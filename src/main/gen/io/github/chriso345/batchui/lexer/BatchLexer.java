// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int BREAK = 8;
  public static final int CALL = 10;
  public static final int CHDIR = 12;
  public static final int COMMAND = 14;
  public static final int ECHO = 16;
  public static final int ECHO_STRING = 18;
  public static final int EXIT = 20;
  public static final int FOR = 22;
  public static final int FOR_COLLECTION = 24;
  public static final int GOTO = 26;
  public static final int IF = 28;
  public static final int IF_ERRORLEVEL = 30;
  public static final int IF_EXIST = 32;
  public static final int IF_STANDARD = 34;
  public static final int LABEL = 36;
  public static final int MORE = 38;
  public static final int REM = 40;
  public static final int SET = 42;
  public static final int SET_LOCAL = 44;
  public static final int SHIFT = 46;
  public static final int SET_VALUE = 48;
  public static final int TOKEN = 50;
  public static final int BAD_WHITESPACE = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12,  5,  5, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\11\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\41\1\56\2\41"+
    "\1\0\1\57\2\0\1\60\1\0\1\61\1\31\1\62"+
    "\1\63\1\34\1\64\1\36\1\37\1\40\1\41\1\42"+
    "\1\65\1\44\1\45\1\46\1\66\1\50\1\67\1\70"+
    "\1\53\1\54\1\55\1\41\1\56\2\41\1\0\1\71"+
    "\1\0\1\72\53\0\1\60\12\0\1\60\4\0\1\60"+
    "\5\0\27\60\1\0\37\60\1\0\70\60\2\73\115\60"+
    "\1\74\u0142\60\4\0\14\60\16\0\5\60\7\0\1\60"+
    "\1\0\1\60\21\0\165\60\1\0\2\60\2\0\4\60"+
    "\1\0\1\60\6\0\1\60\1\0\3\60\1\0\1\60"+
    "\1\0\24\60\1\0\123\60\1\0\213\60\1\0\255\60"+
    "\1\0\46\60\2\0\1\60\6\0\51\60\10\0\55\60"+
    "\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60"+
    "\10\0\33\60\4\0\4\60\35\0\13\60\5\0\100\60"+
    "\12\75\4\0\146\60\1\0\10\60\2\0\12\60\1\0"+
    "\6\60\12\75\3\60\2\0\1\60\20\0\73\60\2\0"+
    "\145\60\16\0\12\75\54\60\4\0\1\60\2\0\1\60"+
    "\2\0\56\60\22\0\34\60\4\0\13\60\65\0\25\60"+
    "\1\0\10\60\25\0\17\60\1\0\201\60\2\0\12\75"+
    "\1\0\23\60\1\0\10\60\2\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\1\60\3\0\4\60\2\0\11\60"+
    "\2\0\2\60\2\0\4\60\10\0\1\60\4\0\2\60"+
    "\1\0\5\60\2\0\12\75\2\60\12\0\1\60\1\0"+
    "\1\60\2\0\3\60\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0"+
    "\2\60\2\0\1\60\1\0\5\60\4\0\2\60\2\0"+
    "\3\60\3\0\1\60\7\0\4\60\1\0\1\60\7\0"+
    "\12\75\6\60\13\0\3\60\1\0\11\60\1\0\3\60"+
    "\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\12\60\1\0\3\60\1\0\3\60\2\0\1\60"+
    "\17\0\4\60\2\0\12\75\11\0\7\60\1\0\3\60"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\5\60\2\0\11\60\2\0\2\60"+
    "\2\0\3\60\10\0\2\60\4\0\2\60\1\0\5\60"+
    "\2\0\12\75\1\0\1\60\20\0\2\60\1\0\6\60"+
    "\3\0\3\60\1\0\4\60\3\0\2\60\1\0\1\60"+
    "\1\0\2\60\3\0\2\60\3\0\3\60\3\0\14\60"+
    "\4\0\5\60\3\0\3\60\1\0\4\60\2\0\1\60"+
    "\6\0\1\60\16\0\12\75\20\0\15\60\1\0\3\60"+
    "\1\0\27\60\1\0\20\60\3\0\10\60\1\0\3\60"+
    "\1\0\4\60\7\0\2\60\1\0\3\60\5\0\4\60"+
    "\2\0\12\75\20\0\4\60\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\11\60"+
    "\1\0\3\60\1\0\4\60\7\0\2\60\7\0\1\60"+
    "\1\0\4\60\2\0\12\75\1\0\2\60\15\0\4\60"+
    "\1\0\10\60\1\0\3\60\1\0\63\60\1\0\3\60"+
    "\1\0\5\60\5\0\4\60\7\0\5\60\2\0\12\75"+
    "\12\0\6\60\2\0\2\60\1\0\22\60\3\0\30\60"+
    "\1\0\11\60\1\0\1\60\2\0\7\60\3\0\1\60"+
    "\4\0\6\60\1\0\1\60\1\0\10\60\6\0\12\75"+
    "\2\0\2\60\15\0\72\60\5\0\17\60\1\0\12\75"+
    "\47\0\2\60\1\0\1\60\1\0\5\60\1\0\30\60"+
    "\1\0\1\60\1\0\27\60\2\0\5\60\1\0\1\60"+
    "\1\0\6\60\2\0\12\75\2\0\4\60\40\0\1\60"+
    "\27\0\2\60\6\0\12\75\13\0\1\60\1\0\1\60"+
    "\1\0\1\60\4\0\12\60\1\0\44\60\4\0\24\60"+
    "\1\0\22\60\1\0\44\60\11\0\1\60\71\0\100\60"+
    "\12\75\6\0\100\60\12\75\4\60\2\0\46\60\1\0"+
    "\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0"+
    "\51\60\1\0\4\60\2\0\41\60\1\0\4\60\2\0"+
    "\7\60\1\0\1\60\1\0\4\60\2\0\17\60\1\0"+
    "\71\60\1\0\4\60\2\0\103\60\2\0\3\60\40\0"+
    "\20\60\20\0\126\60\2\0\6\60\3\0\u016c\60\2\0"+
    "\21\60\1\0\32\60\5\0\113\60\3\0\13\60\7\0"+
    "\15\60\1\0\7\60\13\0\25\60\13\0\24\60\14\0"+
    "\15\60\1\0\3\60\1\0\2\60\14\0\124\60\3\0"+
    "\1\60\4\0\2\60\2\0\12\75\41\0\3\60\2\0"+
    "\12\75\6\0\131\60\7\0\53\60\5\0\106\60\12\0"+
    "\37\60\1\0\14\60\4\0\14\60\12\0\12\75\36\60"+
    "\2\0\5\60\13\0\54\60\4\0\32\60\6\0\12\75"+
    "\46\0\34\60\4\0\77\60\1\0\35\60\2\0\1\60"+
    "\12\75\6\0\12\75\15\0\1\60\10\0\17\60\101\0"+
    "\114\60\4\0\12\75\21\0\11\60\14\0\60\60\12\75"+
    "\72\60\14\0\70\60\10\0\12\75\3\0\3\60\12\75"+
    "\44\60\2\0\11\60\7\0\53\60\2\0\3\60\20\0"+
    "\3\60\1\0\47\60\5\0\372\60\1\0\33\60\2\0"+
    "\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0"+
    "\65\60\1\0\7\60\1\0\1\60\3\0\3\60\1\0"+
    "\7\60\3\0\4\60\2\0\6\60\4\0\15\60\5\0"+
    "\3\60\1\0\7\60\102\0\2\60\23\0\1\60\34\0"+
    "\1\60\15\0\1\60\20\0\15\60\63\0\41\60\21\0"+
    "\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0"+
    "\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\76\3\60\1\0\13\60\2\0\4\60\5\0\5\60"+
    "\4\0\1\60\21\0\51\60\u022d\0\64\60\26\0\57\60"+
    "\1\0\57\60\1\0\205\60\6\0\11\60\14\0\46\60"+
    "\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\30\60\11\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\40\60\57\0\1\60\325\0\3\60"+
    "\31\0\17\60\1\0\5\60\2\0\5\60\4\0\126\60"+
    "\2\0\2\60\2\0\3\60\1\0\132\60\1\0\4\60"+
    "\5\0\53\60\1\0\136\60\21\0\33\60\65\0\306\60"+
    "\112\0\360\60\20\0\215\60\103\0\56\60\2\0\15\60"+
    "\3\0\20\60\12\75\2\60\24\0\63\60\1\0\12\60"+
    "\1\0\163\60\45\0\11\60\2\0\147\60\2\0\65\60"+
    "\2\0\5\60\60\0\61\60\30\0\64\60\14\0\106\60"+
    "\12\0\12\75\6\0\30\60\3\0\1\60\1\0\3\60"+
    "\12\75\44\60\2\0\44\60\14\0\35\60\3\0\101\60"+
    "\16\0\1\60\12\75\6\0\20\60\12\75\5\60\1\0"+
    "\67\60\11\0\16\60\2\0\12\75\6\0\27\60\3\0"+
    "\111\60\30\0\3\60\2\0\20\60\2\0\5\60\12\0"+
    "\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0"+
    "\7\60\1\0\53\60\1\0\14\60\10\0\173\60\1\0"+
    "\2\60\2\0\12\75\6\0\244\60\14\0\27\60\4\0"+
    "\61\60\u0104\0\156\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\14\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0"+
    "\153\60\22\0\100\60\2\0\66\60\50\0\14\60\4\0"+
    "\20\60\20\0\20\60\3\0\2\60\30\0\3\60\40\0"+
    "\5\60\1\0\207\60\23\0\12\75\7\0\32\60\4\0"+
    "\1\60\1\0\32\60\13\0\131\60\3\0\6\60\2\0"+
    "\6\60\2\0\6\60\2\0\3\60\43\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0"+
    "\16\60\42\0\173\60\105\0\65\60\210\0\1\60\202\0"+
    "\35\60\3\0\61\60\17\0\1\60\37\0\40\60\15\0"+
    "\36\60\5\0\53\60\5\0\36\60\2\0\44\60\4\0"+
    "\10\60\1\0\5\60\52\0\236\60\2\0\12\75\6\0"+
    "\44\60\4\0\44\60\4\0\50\60\10\0\64\60\234\0"+
    "\67\60\11\0\26\60\12\0\10\60\230\0\6\60\2\0"+
    "\1\60\1\0\54\60\1\0\2\60\3\0\1\60\2\0"+
    "\27\60\12\0\27\60\11\0\37\60\101\0\23\60\1\0"+
    "\2\60\12\0\26\60\12\0\32\60\106\0\70\60\6\0"+
    "\2\60\100\0\4\60\1\0\2\60\5\0\10\60\1\0"+
    "\3\60\1\0\35\60\2\0\3\60\4\0\1\60\40\0"+
    "\35\60\3\0\35\60\43\0\10\60\1\0\36\60\31\0"+
    "\66\60\12\0\26\60\12\0\23\60\15\0\22\60\156\0"+
    "\111\60\67\0\63\60\15\0\63\60\15\0\50\60\10\0"+
    "\12\75\306\0\35\60\12\0\1\60\10\0\41\60\217\0"+
    "\27\60\11\0\107\60\37\0\12\75\17\0\74\60\25\0"+
    "\31\60\7\0\12\75\6\0\65\60\1\0\12\75\4\0"+
    "\3\60\11\0\44\60\2\0\1\60\11\0\105\60\4\0"+
    "\4\60\3\0\12\75\1\60\1\0\1\60\43\0\22\60"+
    "\1\0\45\60\6\0\1\60\101\0\7\60\1\0\1\60"+
    "\1\0\4\60\1\0\17\60\1\0\12\60\7\0\73\60"+
    "\5\0\12\75\6\0\4\60\1\0\10\60\2\0\2\60"+
    "\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\1\0\12\60\2\0\2\60\2\0\3\60\2\0\1\60"+
    "\6\0\1\60\5\0\7\60\2\0\7\60\3\0\5\60"+
    "\213\0\113\60\5\0\12\75\4\0\2\60\40\0\106\60"+
    "\1\0\1\60\10\0\12\75\246\0\66\60\2\0\11\60"+
    "\27\0\6\60\42\0\101\60\3\0\1\60\13\0\12\75"+
    "\46\0\71\60\7\0\12\75\66\0\33\60\2\0\17\60"+
    "\4\0\12\75\306\0\73\60\145\0\100\60\12\75\25\0"+
    "\1\60\240\0\10\60\2\0\56\60\2\0\10\60\1\0"+
    "\2\60\33\0\77\60\10\0\1\60\10\0\112\60\3\0"+
    "\1\60\42\0\71\60\7\0\11\60\1\0\55\60\1\0"+
    "\11\60\17\0\12\75\30\0\36\60\2\0\26\60\1\0"+
    "\16\60\111\0\7\60\1\0\2\60\1\0\54\60\3\0"+
    "\1\60\1\0\2\60\1\0\11\60\10\0\12\75\6\0"+
    "\6\60\1\0\2\60\1\0\45\60\1\0\2\60\1\0"+
    "\6\60\7\0\12\75\u0136\0\27\60\11\0\232\60\146\0"+
    "\157\60\21\0\304\60\274\0\57\60\321\0\107\60\271\0"+
    "\71\60\7\0\37\60\1\0\12\75\146\0\36\60\2\0"+
    "\5\60\13\0\67\60\11\0\4\60\14\0\12\75\11\0"+
    "\25\60\5\0\23\60\260\0\100\60\200\0\113\60\4\0"+
    "\71\60\7\0\21\60\100\0\2\60\1\0\1\60\34\0"+
    "\370\60\10\0\363\60\15\0\37\60\61\0\3\60\21\0"+
    "\4\60\10\0\u018c\60\4\0\153\60\5\0\15\60\3\0"+
    "\11\60\7\0\12\60\3\0\2\60\306\0\5\60\3\0"+
    "\6\60\10\0\10\60\2\0\7\60\36\0\4\60\224\0"+
    "\3\60\273\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0"+
    "\1\60\1\0\7\60\1\0\101\60\1\0\4\60\2\0"+
    "\10\60\1\0\7\60\1\0\34\60\1\0\4\60\1\0"+
    "\5\60\1\0\1\60\3\0\7\60\1\0\u0154\60\2\0"+
    "\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\10\60\2\0\62\75\67\60"+
    "\4\0\62\60\10\0\1\60\16\0\1\60\26\0\5\60"+
    "\1\0\17\60\120\0\7\60\1\0\21\60\2\0\7\60"+
    "\1\0\2\60\1\0\5\60\325\0\55\60\3\0\16\60"+
    "\2\0\12\75\4\0\1\60\u0171\0\60\60\12\75\6\0"+
    "\305\60\13\0\7\60\51\0\114\60\4\0\12\75\246\0"+
    "\4\60\1\0\33\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\12\60\1\0\4\60\1\0\1\60\1\0"+
    "\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\2\60\1\0\1\60\2\0\4\60\1\0"+
    "\7\60\1\0\4\60\1\0\4\60\1\0\1\60\1\0"+
    "\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\164\0\32\60\6\0\32\60\6\0\32\60\166\0"+
    "\327\60\51\0\65\60\13\0\336\60\2\0\u0182\60\16\0"+
    "\u0131\60\37\0\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\32\0\1\1\2\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\3\1\1\3\1\10"+
    "\1\11\11\10\1\12\1\13\2\14\1\15\2\14\1\16"+
    "\1\17\3\16\1\20\1\4\1\21\1\4\1\22\1\23"+
    "\1\6\1\24\1\25\4\24\1\26\13\10\1\27\1\30"+
    "\3\27\1\31\1\32\1\4\1\33\1\34\1\35\3\34"+
    "\1\4\7\34\1\36\2\37\2\36\1\40\1\41\1\42"+
    "\7\41\1\14\1\43\1\20\1\44\3\20\1\45\1\46"+
    "\2\45\1\47\2\45\1\50\1\4\4\45\1\51\1\52"+
    "\1\53\1\4\2\52\1\54\1\4\1\55\3\4\1\56"+
    "\1\57\1\60\1\61\1\4\1\62\1\63\3\62\1\64"+
    "\1\65\2\66\2\65\4\66\1\67\1\0\1\70\1\1"+
    "\1\71\1\1\1\3\1\0\1\1\1\0\1\72\1\73"+
    "\1\0\1\73\1\74\1\1\3\10\1\75\7\10\1\76"+
    "\1\77\4\10\1\14\1\0\1\16\1\100\1\16\1\0"+
    "\1\16\1\4\1\101\1\0\1\102\1\24\1\0\1\24"+
    "\1\103\1\0\1\104\1\10\1\0\4\10\1\105\7\10"+
    "\1\106\1\107\4\10\1\0\1\110\1\27\1\0\3\27"+
    "\1\111\1\0\1\112\2\34\1\0\1\34\1\0\1\113"+
    "\1\114\1\34\1\115\1\34\1\116\3\34\1\0\1\117"+
    "\1\36\1\0\1\36\1\0\1\120\1\41\1\0\11\41"+
    "\1\70\2\45\1\120\2\45\1\121\5\45\1\122\1\52"+
    "\1\122\1\123\1\124\1\0\2\125\1\4\1\126\1\127"+
    "\1\0\1\130\1\62\1\131\1\62\1\0\1\62\2\65"+
    "\1\66\1\70\1\0\1\70\1\0\1\70\1\132\1\133"+
    "\1\73\1\72\10\10\1\134\3\10\1\135\1\10\1\16"+
    "\2\0\1\102\1\0\1\102\1\0\1\102\1\104\1\0"+
    "\1\104\1\0\1\104\10\10\1\136\3\10\1\137\1\10"+
    "\1\110\1\0\1\110\1\0\1\110\1\0\1\140\1\141"+
    "\1\112\1\0\1\112\1\142\1\0\1\112\5\34\1\117"+
    "\1\0\1\117\1\0\1\117\1\120\1\0\1\120\1\0"+
    "\1\120\1\41\1\143\2\41\2\70\2\120\1\121\1\122"+
    "\1\144\3\145\1\130\1\0\1\130\1\0\1\130\1\146"+
    "\2\70\1\133\2\10\1\147\1\10\1\150\1\151\1\10"+
    "\1\152\1\153\1\10\1\154\2\10\2\16\2\102\2\104"+
    "\2\10\1\155\1\10\1\156\1\157\1\10\1\160\1\161"+
    "\1\10\1\162\2\10\2\110\2\112\1\34\1\0\3\34"+
    "\2\117\2\120\3\41\2\130\1\163\1\164\2\10\1\165"+
    "\1\166\1\167\2\10\1\170\1\34\1\171\1\0\2\34"+
    "\2\41\1\172\4\10\1\34\1\171\2\34\2\41\4\10"+
    "\1\171\1\0\1\34\1\41\1\173\1\174\1\175\1\176"+
    "\2\171\1\41\1\0\1\41\1\171\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[525];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\u085e\0\u089d\0\u08dc\0\u085e\0\u091b"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u085e\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u085e\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u085e\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u085e"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u0666"+
    "\0\u2b8f\0\u0666\0\u2bce\0\u085e\0\u2c0d\0\u2c4c\0\u2c8b\0\u085e"+
    "\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83"+
    "\0\u0a56\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u0a56\0\u0a56\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u085e\0\u3177"+
    "\0\u31b6\0\u0e85\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u0fc0\0\u32f1"+
    "\0\u10fb\0\u3330\0\u336f\0\u33ae\0\u10fb\0\u33ed\0\u0a56\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u0a56\0\u35a6\0\u35e5"+
    "\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u0a56\0\u0a56\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\u385b\0\u1569\0\u389a\0\u38d9\0\u3918"+
    "\0\u3957\0\u3996\0\u0fc0\0\u39d5\0\u17a0\0\u3a14\0\u3a53\0\u3a92"+
    "\0\u3ad1\0\u18db\0\u18db\0\u17a0\0\u3b10\0\u17a0\0\u3b4f\0\u17a0"+
    "\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u1ad3\0\u3c8a\0\u3cc9\0\u3d08"+
    "\0\u3d47\0\u1c0e\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1"+
    "\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u1ffe\0\u403b\0\u407a"+
    "\0\u1ffe\0\u40b9\0\u40f8\0\u085e\0\u4137\0\u4176\0\u41b5\0\u41f4"+
    "\0\u4233\0\u23ee\0\u4272\0\u2370\0\u42b1\0\u085e\0\u42f0\0\u085e"+
    "\0\u2625\0\u432f\0\u085e\0\u0fc0\0\u436e\0\u2760\0\u43ad\0\u2760"+
    "\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u085e\0\u085e\0\u4527"+
    "\0\u0723\0\u4566\0\u07e0\0\u2c8b\0\u085e\0\u45a5\0\u0999\0\u45e4"+
    "\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u0a56"+
    "\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u085e\0\u4917\0\u4956"+
    "\0\u085e\0\u4995\0\u1179\0\u49d4\0\u11b8\0\u085e\0\u4a13\0\u12b4"+
    "\0\u4a52\0\u12f3\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc"+
    "\0\u4c0b\0\u4c4a\0\u0a56\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85"+
    "\0\u085e\0\u4dc4\0\u15e7\0\u4e03\0\u1626\0\u4e42\0\u4e81\0\u085e"+
    "\0\u085e\0\u4ec0\0\u181e\0\u17a0\0\u4eff\0\u189c\0\u4f3e\0\u4f7d"+
    "\0\u4fbc\0\u4ffb\0\u503a\0\u085e\0\u5079\0\u1b90\0\u50b8\0\u1bcf"+
    "\0\u085e\0\u50f7\0\u1c8c\0\u5136\0\u1ccb\0\u5175\0\u1c0e\0\u51b4"+
    "\0\u51f3\0\u207c\0\u20bb\0\u2139\0\u2178\0\u1ffe\0\u4272\0\u085e"+
    "\0\u24ea\0\u5232\0\u085e\0\u085e\0\u5271\0\u27de\0\u52b0\0\u285c"+
    "\0\u28da\0\u2b50\0\u2c0d\0\u2cca\0\u52ef\0\u532e\0\u0a56\0\u536d"+
    "\0\u0a56\0\u0a56\0\u53ac\0\u0a56\0\u0a56\0\u53eb\0\u0a56\0\u542a"+
    "\0\u5469\0\u3177\0\u3234\0\u32f1\0\u336f\0\u33ed\0\u346b\0\u54a8"+
    "\0\u54e7\0\u0a56\0\u5526\0\u0a56\0\u0a56\0\u5565\0\u0a56\0\u0a56"+
    "\0\u55a4\0\u0a56\0\u55e3\0\u5622\0\u385b\0\u38d9\0\u39d5\0\u3a92"+
    "\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d\0\u3c4b\0\u3cc9\0\u3d47"+
    "\0\u3dc5\0\u579c\0\u57db\0\u581a\0\u436e\0\u442b\0\u0a56\0\u0a56"+
    "\0\u5859\0\u5898\0\u0a56\0\u0a56\0\u0a56\0\u58d7\0\u5916\0\u0a56"+
    "\0\u5955\0\u085e\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u1c0e"+
    "\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5994\0\u5c0a\0\u5c49"+
    "\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41"+
    "\0\u5e80\0\u5ebf\0\u0a56\0\u0a56\0\u0a56\0\u0a56\0\u5efe\0\u17a0"+
    "\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u1c0e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[525];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\1\34\1\35\1\0\1\33\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\33\2\44\4\33\1\45\1\44"+
    "\1\46\1\47\1\50\1\51\21\52\1\53\5\52\2\33"+
    "\6\52\1\53\1\52\1\54\5\33\1\55\1\56\2\0"+
    "\3\55\1\44\1\55\2\44\1\55\2\44\4\55\5\44"+
    "\1\55\1\57\1\60\1\61\1\55\1\62\1\63\1\64"+
    "\1\55\1\65\3\55\1\66\5\55\1\67\6\55\1\57"+
    "\1\61\1\55\1\63\3\55\1\67\1\44\1\55\1\65"+
    "\1\67\2\55\1\70\1\71\1\35\1\0\3\70\1\72"+
    "\1\70\2\44\1\70\2\44\4\70\2\44\1\73\1\74"+
    "\1\75\42\70\1\76\5\70\1\77\1\100\1\35\1\0"+
    "\1\77\1\101\1\102\1\72\1\103\2\44\1\77\2\44"+
    "\4\77\2\44\1\73\1\104\1\75\42\77\1\76\5\77"+
    "\1\105\1\106\1\35\1\0\3\105\1\72\1\105\2\44"+
    "\1\105\2\44\4\105\2\44\1\73\1\44\1\75\17\105"+
    "\1\107\22\105\1\76\5\105\1\110\1\111\1\35\1\0"+
    "\3\110\1\44\1\110\2\44\1\110\2\44\4\110\1\112"+
    "\4\44\42\110\1\44\5\110\1\113\1\114\1\35\1\0"+
    "\1\113\1\115\1\113\1\72\1\116\2\44\1\113\2\44"+
    "\1\113\1\117\2\113\2\44\1\73\1\44\1\75\1\113"+
    "\27\120\2\113\10\120\1\76\5\113\1\55\1\121\1\35"+
    "\1\0\1\55\1\122\1\55\1\72\1\123\2\44\1\55"+
    "\2\44\4\55\2\44\1\73\1\44\1\75\1\55\1\124"+
    "\1\125\1\126\1\55\1\127\1\130\1\131\1\55\1\132"+
    "\3\55\1\133\5\55\1\134\6\55\1\124\1\126\1\55"+
    "\1\130\3\55\1\134\1\76\1\55\1\132\1\134\2\55"+
    "\1\135\1\136\1\35\1\0\1\135\1\137\1\135\1\72"+
    "\1\140\2\44\1\135\2\44\4\135\2\44\1\73\1\44"+
    "\1\75\17\135\1\141\22\135\1\76\6\135\1\142\1\35"+
    "\1\0\1\135\1\137\1\135\1\72\1\140\2\44\1\135"+
    "\2\44\4\135\2\44\1\73\1\44\1\75\42\135\1\76"+
    "\5\135\1\105\1\143\1\35\1\0\3\105\1\72\1\105"+
    "\2\44\1\105\2\44\1\105\1\144\2\145\2\44\1\73"+
    "\1\44\1\75\42\105\1\76\5\105\1\146\1\147\1\35"+
    "\1\0\1\146\1\150\1\151\1\72\1\152\1\153\1\44"+
    "\1\146\2\44\1\146\1\154\2\146\2\44\1\73\1\44"+
    "\1\75\4\146\1\155\1\156\3\146\1\157\11\146\1\160"+
    "\1\161\1\162\6\146\1\155\4\146\1\160\1\76\1\146"+
    "\1\157\1\160\2\146\1\163\1\164\1\165\1\0\1\163"+
    "\1\166\1\163\1\44\1\167\1\44\1\170\1\163\2\44"+
    "\4\163\5\44\42\163\1\44\5\163\1\171\1\172\1\35"+
    "\1\0\1\171\1\173\1\171\1\44\1\174\2\44\1\171"+
    "\2\44\4\171\5\44\4\171\1\175\1\176\1\171\1\177"+
    "\4\171\1\200\1\171\1\201\15\171\1\175\1\171\1\200"+
    "\3\171\1\44\5\171\1\202\1\203\1\35\1\0\3\202"+
    "\1\204\1\202\1\42\1\44\1\202\2\44\2\202\2\205"+
    "\2\44\1\206\1\44\1\207\42\202\1\210\5\202\1\211"+
    "\1\212\1\35\1\0\1\211\1\213\1\211\1\204\1\214"+
    "\1\42\1\44\1\211\2\44\4\211\2\44\1\206\1\44"+
    "\1\207\42\211\1\210\6\211\1\215\1\35\1\0\1\211"+
    "\1\216\1\211\1\204\1\217\1\42\1\44\1\211\2\44"+
    "\2\211\2\220\2\44\1\206\1\221\1\207\5\211\1\222"+
    "\1\211\1\223\4\211\1\224\1\211\1\225\17\211\1\224"+
    "\3\211\1\210\5\211\1\110\1\226\1\35\1\0\3\110"+
    "\1\44\1\110\2\44\1\110\2\44\4\110\5\44\42\110"+
    "\1\44\5\110\1\227\1\230\1\35\1\0\3\227\1\72"+
    "\1\227\2\44\1\227\1\231\1\44\1\227\1\232\2\227"+
    "\2\44\1\73\1\44\1\75\1\227\27\233\2\227\10\233"+
    "\1\76\5\227\2\234\1\35\74\234\1\235\1\236\1\35"+
    "\1\0\3\235\1\44\1\235\2\44\1\237\1\240\1\44"+
    "\1\237\1\241\2\235\3\44\1\242\1\44\42\235\1\44"+
    "\5\235\1\243\1\244\1\35\1\0\3\243\1\72\1\243"+
    "\2\44\1\243\2\44\4\243\2\44\1\73\1\44\1\75"+
    "\42\243\1\76\5\243\1\105\1\245\1\35\1\0\3\105"+
    "\1\72\1\105\2\44\1\105\2\44\1\105\1\246\2\105"+
    "\2\44\1\73\1\44\1\75\42\105\1\76\5\105\1\247"+
    "\1\250\1\35\1\0\1\247\1\251\1\252\1\72\1\253"+
    "\2\44\1\247\2\44\2\247\2\254\2\44\1\73\1\104"+
    "\1\75\42\247\1\76\5\247\1\255\1\256\1\257\1\0"+
    "\1\260\1\255\1\261\1\262\1\255\2\44\1\255\2\44"+
    "\4\255\2\44\1\263\1\44\1\264\42\255\1\265\5\255"+
    "\1\105\1\266\2\0\3\105\1\44\1\105\2\44\1\105"+
    "\2\44\4\105\5\44\42\105\1\44\5\105\1\33\3\0"+
    "\3\33\1\0\1\33\2\0\1\33\2\0\4\33\5\0"+
    "\42\33\1\0\5\33\1\0\1\34\77\0\1\35\74\0"+
    "\1\36\1\267\1\0\1\267\1\36\1\270\1\36\1\267"+
    "\1\36\2\267\1\36\2\267\4\36\5\267\30\36\1\271"+
    "\11\36\1\267\5\36\1\33\3\0\3\33\1\0\1\33"+
    "\2\0\1\33\2\0\2\33\2\272\5\0\42\33\1\0"+
    "\1\273\4\33\7\0\1\274\67\0\1\41\1\275\1\0"+
    "\1\275\3\41\1\275\1\270\2\275\1\41\2\275\4\41"+
    "\5\275\30\41\1\276\11\41\1\275\5\41\77\277\121\0"+
    "\1\300\100\0\1\274\100\0\1\274\50\0\1\301\3\0"+
    "\3\301\1\0\1\301\2\0\1\301\2\0\4\301\1\302"+
    "\4\0\22\301\1\303\15\301\1\303\1\301\1\0\5\301"+
    "\1\33\3\0\3\33\1\0\1\33\2\0\1\33\2\0"+
    "\4\33\1\304\4\0\1\33\27\52\2\33\10\52\1\0"+
    "\6\33\3\0\3\33\1\0\1\33\2\0\1\33\2\0"+
    "\4\33\1\304\4\0\1\33\4\52\1\305\22\52\2\33"+
    "\10\52\1\0\5\33\71\0\1\274\5\0\1\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\42\55\1\0\5\55\1\0\1\56\75\0\1\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\23\55\1\306\15\55\1\306\1\0\2\55\1\306\3\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\22\55\1\307\15\55\1\307\1\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\1\55\1\310\2\55\1\311\3\55\1\312\21\55"+
    "\1\310\1\55\1\311\5\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\3\55"+
    "\1\313\10\55\1\314\1\55\1\315\10\55\1\316\3\55"+
    "\1\313\2\55\1\314\3\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\17\55"+
    "\1\317\22\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\17\55\1\320\22\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\6\55\1\321\26\55\1\321\4\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\4\55\1\322\6\55\1\323\3\55"+
    "\1\324\14\55\1\322\5\55\1\0\4\55\1\323\1\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\5\55\1\325\2\55\1\326\31\55\1\0\5\55"+
    "\1\70\3\0\3\70\1\0\1\70\2\0\1\70\2\0"+
    "\4\70\5\0\42\70\1\0\5\70\1\0\1\71\104\0"+
    "\1\327\113\0\1\327\100\0\1\327\141\0\1\327\5\0"+
    "\1\77\3\0\3\77\1\0\1\77\2\0\1\77\2\0"+
    "\4\77\5\0\42\77\1\0\5\77\1\0\1\100\75\0"+
    "\1\101\1\330\1\0\1\330\1\101\1\77\1\101\1\330"+
    "\1\101\2\330\1\101\2\330\4\101\5\330\30\101\1\331"+
    "\11\101\1\330\5\101\1\77\3\0\3\77\1\0\1\77"+
    "\2\0\1\77\2\0\2\77\2\332\5\0\42\77\1\0"+
    "\1\333\4\77\1\103\1\334\1\0\1\334\3\103\1\334"+
    "\1\77\2\334\1\103\2\334\4\103\5\334\30\103\1\335"+
    "\11\103\1\334\5\103\1\105\3\0\3\105\1\0\1\105"+
    "\2\0\1\105\2\0\4\105\5\0\42\105\1\0\5\105"+
    "\1\0\1\106\75\0\1\105\3\0\3\105\1\0\1\105"+
    "\2\0\1\105\2\0\4\105\5\0\6\105\1\336\7\105"+
    "\1\337\16\105\1\336\4\105\1\0\5\105\1\110\3\0"+
    "\3\110\1\0\1\110\2\0\1\110\2\0\4\110\5\0"+
    "\42\110\1\0\5\110\1\0\1\111\75\0\1\113\3\0"+
    "\3\113\1\0\1\113\2\0\1\113\2\0\4\113\5\0"+
    "\42\113\1\0\5\113\1\0\1\114\75\0\1\115\1\340"+
    "\1\0\1\340\1\115\1\341\1\115\1\340\1\115\2\340"+
    "\1\115\2\340\4\115\5\340\30\115\1\342\11\115\1\340"+
    "\5\115\1\116\1\343\1\0\1\343\3\116\1\343\1\341"+
    "\2\343\1\116\2\343\4\116\5\343\30\116\1\344\11\116"+
    "\1\343\5\116\1\113\3\0\3\113\1\0\1\113\2\0"+
    "\1\113\2\0\4\113\5\0\34\113\1\345\5\113\1\0"+
    "\6\113\3\0\3\113\1\0\1\113\2\0\1\113\2\0"+
    "\4\113\1\304\4\0\1\113\27\120\2\113\10\120\1\0"+
    "\5\113\1\0\1\121\75\0\1\122\1\346\1\0\1\346"+
    "\1\122\1\347\1\122\1\346\1\122\2\346\1\122\2\346"+
    "\4\122\5\346\30\122\1\350\11\122\1\346\5\122\1\123"+
    "\1\351\1\0\1\351\3\123\1\351\1\347\2\351\1\123"+
    "\2\351\4\123\5\351\30\123\1\352\11\123\1\351\5\123"+
    "\1\55\3\0\3\55\1\0\1\55\2\0\1\55\2\0"+
    "\4\55\5\0\23\55\1\353\15\55\1\353\1\0\2\55"+
    "\1\353\3\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\22\55\1\354\15\55\1\354\1\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\1\55\1\355\2\55\1\356\3\55"+
    "\1\357\21\55\1\355\1\55\1\356\5\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\3\55\1\360\10\55\1\361\1\55\1\362\10\55"+
    "\1\363\3\55\1\360\2\55\1\361\3\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\17\55\1\364\22\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\17\55"+
    "\1\365\22\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\6\55\1\366\26\55"+
    "\1\366\4\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\4\55\1\367\6\55"+
    "\1\370\3\55\1\371\14\55\1\367\5\55\1\0\4\55"+
    "\1\370\1\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\5\55\1\372\2\55\1\373\31\55"+
    "\1\0\5\55\1\135\3\0\3\135\1\0\1\135\2\0"+
    "\1\135\2\0\4\135\5\0\42\135\1\0\5\135\1\0"+
    "\1\136\75\0\1\137\1\374\1\0\1\374\1\137\1\375"+
    "\1\137\1\374\1\137\2\374\1\137\2\374\4\137\5\374"+
    "\30\137\1\376\11\137\1\374\5\137\1\140\1\377\1\0"+
    "\1\377\3\140\1\377\1\375\2\377\1\140\2\377\4\140"+
    "\5\377\30\140\1\u0100\11\140\1\377\5\140\1\135\3\0"+
    "\3\135\1\0\1\135\2\0\1\135\2\0\4\135\5\0"+
    "\6\135\1\u0101\7\135\1\u0102\16\135\1\u0101\4\135\1\0"+
    "\5\135\1\0\1\142\76\0\1\143\75\0\1\105\3\0"+
    "\3\105\1\0\1\105\2\0\1\105\2\0\4\105\5\0"+
    "\2\105\1\u0103\37\105\1\0\6\105\3\0\3\105\1\0"+
    "\1\105\2\0\1\105\2\0\2\105\2\145\5\0\42\105"+
    "\1\0\5\105\1\146\3\0\3\146\1\0\1\146\2\0"+
    "\1\146\2\0\4\146\5\0\42\146\1\0\5\146\1\0"+
    "\1\147\75\0\1\150\1\u0104\1\0\1\u0104\1\150\1\u0105"+
    "\1\150\1\u0104\1\150\2\u0104\1\150\2\u0104\4\150\5\u0104"+
    "\30\150\1\u0106\11\150\1\u0104\5\150\1\146\3\0\2\146"+
    "\1\u0107\1\0\1\146\2\0\1\146\2\0\4\146\5\0"+
    "\42\146\1\0\5\146\1\152\1\u0108\1\0\1\u0108\3\152"+
    "\1\u0108\1\u0105\2\u0108\1\152\2\u0108\4\152\5\u0108\30\152"+
    "\1\u0109\11\152\1\u0108\5\152\12\u010a\1\u010b\64\u010a\1\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\34\146\3\u010c\1\146\1\u010c\1\146\1\0\6\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\5\146\1\u010d\11\146\1\u010e\22\146\1\0\6\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\17\146\1\u010f\22\146\1\0\6\146\3\0\3\146"+
    "\1\0\1\146\2\0\1\146\2\0\4\146\5\0\16\146"+
    "\1\u0110\23\146\1\0\6\146\3\0\3\146\1\0\1\146"+
    "\2\0\1\146\2\0\4\146\5\0\13\146\1\u0111\26\146"+
    "\1\0\4\146\1\u0111\1\146\3\0\3\146\1\0\1\146"+
    "\2\0\1\146\2\0\4\146\5\0\17\146\1\u0112\22\146"+
    "\1\0\6\146\3\0\3\146\1\0\1\146\2\0\1\146"+
    "\2\0\4\146\5\0\23\146\1\u0113\15\146\1\u0113\1\0"+
    "\2\146\1\u0113\2\146\1\163\3\0\3\163\1\0\1\163"+
    "\2\0\1\163\2\0\4\163\5\0\42\163\1\0\5\163"+
    "\1\0\1\164\77\0\1\165\74\0\1\166\1\u0114\1\0"+
    "\1\u0114\1\166\1\u0115\1\166\1\u0114\1\166\2\u0114\1\166"+
    "\2\u0114\4\166\5\u0114\30\166\1\u0116\11\166\1\u0114\5\166"+
    "\1\167\1\u0117\1\0\1\u0117\3\167\1\u0117\1\u0115\2\u0117"+
    "\1\167\2\u0117\4\167\5\u0117\30\167\1\u0118\11\167\1\u0117"+
    "\5\167\1\171\3\0\3\171\1\0\1\171\2\0\1\171"+
    "\2\0\4\171\5\0\42\171\1\0\5\171\1\0\1\172"+
    "\75\0\1\173\1\u0119\1\0\1\u0119\1\173\1\u011a\1\173"+
    "\1\u0119\1\173\2\u0119\1\173\2\u0119\4\173\5\u0119\30\173"+
    "\1\u011b\11\173\1\u0119\5\173\1\174\1\u011c\1\0\1\u011c"+
    "\3\174\1\u011c\1\u011a\2\u011c\1\174\2\u011c\4\174\5\u011c"+
    "\30\174\1\u011d\11\174\1\u011c\5\174\1\171\3\0\3\171"+
    "\1\0\1\171\2\0\1\171\2\0\4\171\5\0\5\171"+
    "\1\u011e\34\171\1\0\6\171\3\0\3\171\1\0\1\171"+
    "\2\0\1\171\2\0\4\171\5\0\21\171\1\u011f\1\u0120"+
    "\4\171\1\u0121\10\171\1\u0120\1\171\1\0\6\171\3\0"+
    "\3\171\1\0\1\171\2\0\1\171\2\0\4\171\5\0"+
    "\5\171\1\u0122\16\171\1\u0123\15\171\1\0\6\171\3\0"+
    "\3\171\1\0\1\171\2\0\1\171\2\0\4\171\5\0"+
    "\5\171\1\u0122\15\171\1\u0124\15\171\1\u0124\1\0\2\171"+
    "\1\u0124\3\171\3\0\3\171\1\0\1\171\2\0\1\171"+
    "\2\0\4\171\5\0\5\171\1\u0122\11\171\1\u0125\22\171"+
    "\1\0\5\171\1\202\3\0\3\202\1\0\1\202\2\0"+
    "\1\202\2\0\4\202\5\0\42\202\1\0\5\202\1\0"+
    "\1\203\104\0\1\104\67\0\1\202\3\0\3\202\1\0"+
    "\1\202\2\0\1\202\2\0\2\202\2\205\5\0\42\202"+
    "\1\0\5\202\24\0\1\104\100\0\1\104\141\0\1\104"+
    "\5\0\1\211\3\0\3\211\1\0\1\211\2\0\1\211"+
    "\2\0\4\211\5\0\42\211\1\0\5\211\1\0\1\212"+
    "\75\0\1\213\1\267\1\0\1\267\1\213\1\u0126\1\213"+
    "\1\267\1\213\2\267\1\213\2\267\4\213\5\267\30\213"+
    "\1\u0127\11\213\1\267\5\213\1\214\1\275\1\0\1\275"+
    "\3\214\1\275\1\u0126\2\275\1\214\2\275\4\214\5\275"+
    "\30\214\1\u0128\11\214\1\275\5\214\1\0\1\215\75\0"+
    "\1\216\1\u0119\1\0\1\u0119\1\216\1\u0129\1\216\1\u0119"+
    "\1\216\2\u0119\1\216\2\u0119\4\216\5\u0119\30\216\1\u012a"+
    "\11\216\1\u0119\5\216\1\217\1\u011c\1\0\1\u011c\3\217"+
    "\1\u011c\1\u0129\2\u011c\1\217\2\u011c\4\217\5\u011c\30\217"+
    "\1\u012b\11\217\1\u011c\5\217\1\211\3\0\3\211\1\0"+
    "\1\211\2\0\1\211\2\0\2\211\2\220\5\0\42\211"+
    "\1\0\5\211\25\0\1\u012c\51\0\1\211\3\0\3\211"+
    "\1\0\1\211\2\0\1\211\2\0\4\211\5\0\21\211"+
    "\1\u012d\20\211\1\0\6\211\3\0\3\211\1\0\1\211"+
    "\2\0\1\211\2\0\4\211\5\0\5\211\1\u012e\16\211"+
    "\1\u012f\15\211\1\0\6\211\3\0\3\211\1\0\1\211"+
    "\2\0\1\211\2\0\4\211\5\0\5\211\1\u012e\15\211"+
    "\1\u0130\15\211\1\u0130\1\0\2\211\1\u0130\3\211\3\0"+
    "\3\211\1\0\1\211\2\0\1\211\2\0\4\211\5\0"+
    "\5\211\1\u012e\11\211\1\u0131\22\211\1\0\5\211\1\0"+
    "\1\226\75\0\1\227\3\0\3\227\1\0\1\227\2\0"+
    "\1\227\2\0\4\227\5\0\42\227\1\0\5\227\1\0"+
    "\1\230\115\0\2\u0132\55\0\1\227\3\0\3\227\1\0"+
    "\1\227\2\0\1\227\2\0\4\227\5\0\24\227\1\u0133"+
    "\6\227\1\u0134\3\227\1\u0134\1\227\1\u0134\1\0\6\227"+
    "\3\0\3\227\1\0\1\227\2\0\1\227\2\0\4\227"+
    "\1\u0135\4\0\1\227\27\233\2\227\10\233\1\0\5\227"+
    "\2\234\1\0\74\234\1\235\1\u0136\2\0\3\235\1\0"+
    "\1\235\2\0\1\235\1\u0137\1\0\4\235\3\0\1\u0138"+
    "\1\0\42\235\1\0\5\235\1\0\1\236\75\0\1\235"+
    "\1\u0136\2\0\3\235\1\0\1\235\2\0\1\235\1\u0137"+
    "\1\0\4\235\3\0\1\u0139\1\0\42\235\1\0\5\235"+
    "\25\0\1\242\51\0\1\235\1\u0136\2\0\3\235\1\0"+
    "\1\235\2\0\1\235\1\u0137\1\0\4\235\3\0\1\u0139"+
    "\1\0\32\235\1\u013a\4\235\1\u013a\2\235\1\0\5\235"+
    "\1\0\1\u013b\75\0\1\243\3\0\3\243\1\0\1\243"+
    "\2\0\1\243\2\0\4\243\5\0\42\243\1\0\5\243"+
    "\1\0\1\244\76\0\1\245\75\0\1\105\3\0\3\105"+
    "\1\0\1\105\2\0\1\105\2\0\2\105\1\u013c\1\105"+
    "\5\0\42\105\1\0\5\105\1\247\3\0\3\247\1\0"+
    "\1\247\2\0\1\247\2\0\4\247\5\0\42\247\1\0"+
    "\5\247\1\0\1\250\75\0\1\251\1\u013d\1\0\1\u013d"+
    "\1\251\1\u013e\1\251\1\u013d\1\251\2\u013d\1\251\2\u013d"+
    "\4\251\5\u013d\30\251\1\u013f\11\251\1\u013d\5\251\1\247"+
    "\3\0\3\247\1\0\1\247\2\0\1\247\2\0\2\247"+
    "\2\u0140\5\0\42\247\1\0\1\u0141\4\247\1\253\1\u0142"+
    "\1\0\1\u0142\3\253\1\u0142\1\u013e\2\u0142\1\253\2\u0142"+
    "\4\253\5\u0142\30\253\1\u0143\11\253\1\u0142\5\253\1\247"+
    "\3\0\3\247\1\0\1\247\2\0\1\247\2\0\2\247"+
    "\2\254\5\0\42\247\1\0\5\247\1\255\3\0\3\255"+
    "\1\0\1\255\2\0\1\255\2\0\4\255\5\0\42\255"+
    "\1\0\5\255\1\0\1\256\77\0\1\257\74\0\1\255"+
    "\3\0\3\255\1\0\1\255\2\0\1\255\2\0\2\255"+
    "\2\u0144\5\0\1\255\27\u0144\1\255\11\u0144\1\0\1\255"+
    "\4\u0144\1\255\3\0\3\255\1\0\1\255\2\0\1\255"+
    "\2\0\2\255\2\u0145\5\0\1\255\27\u0145\1\255\11\u0145"+
    "\1\0\1\255\4\u0145\7\0\1\u0146\113\0\1\u0146\100\0"+
    "\1\u0146\141\0\1\u0146\6\0\1\266\75\0\2\267\1\0"+
    "\2\267\1\u0147\51\267\1\u0148\17\267\1\36\1\267\1\0"+
    "\1\267\1\36\1\u0149\1\36\1\267\1\36\2\267\1\36"+
    "\2\267\4\36\5\267\30\36\1\271\11\36\1\267\5\36"+
    "\1\33\3\0\3\33\1\0\1\33\2\0\1\33\2\0"+
    "\2\33\2\272\5\0\42\33\1\0\5\33\2\275\1\0"+
    "\5\275\1\u0147\46\275\1\u014a\17\275\1\41\1\275\1\0"+
    "\1\275\3\41\1\275\1\u014b\2\275\1\41\2\275\4\41"+
    "\5\275\30\41\1\276\11\41\1\275\5\41\12\277\1\u014c"+
    "\64\277\1\301\3\0\3\301\1\0\1\301\2\0\1\301"+
    "\2\0\4\301\5\0\42\301\1\0\5\301\22\0\1\u014d"+
    "\54\0\1\301\3\0\3\301\1\0\1\301\2\0\1\301"+
    "\2\0\4\301\5\0\5\301\1\u014e\34\301\1\0\5\301"+
    "\1\304\3\0\3\304\1\0\1\304\2\0\1\304\2\0"+
    "\4\304\5\0\42\304\1\0\5\304\1\33\3\0\3\33"+
    "\1\0\1\33\2\0\1\33\2\0\4\33\1\304\4\0"+
    "\1\33\14\52\1\u014f\12\52\2\33\10\52\1\0\5\33"+
    "\1\55\3\0\3\55\1\0\1\55\2\0\1\55\2\0"+
    "\4\55\5\0\23\55\1\u0150\15\55\1\u0150\1\0\2\55"+
    "\1\u0150\3\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\5\55\1\u0151\34\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\14\55\1\u0152\21\55\1\u0152\3\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\4\55\1\u0153\27\55\1\u0153\5\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\10\55\1\u0154\31\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\23\55"+
    "\1\u0155\15\55\1\u0155\1\0\2\55\1\u0155\3\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\4\55\1\u0156\27\55\1\u0156\5\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\11\55\1\u0157\30\55\1\0\1\55\1\u0157\4\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\22\55\1\u0158\15\55\1\u0158\1\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\24\55\1\u0159\15\55\1\0\6\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\4\55\1\u015a"+
    "\27\55\1\u015a\5\55\1\0\6\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\22\55\1\u015b"+
    "\15\55\1\u015b\1\55\1\0\6\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\24\55\1\u015c"+
    "\15\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\11\55\1\u015d\30\55\1\0"+
    "\1\55\1\u015d\3\55\2\330\1\0\2\330\1\u015e\51\330"+
    "\1\u015f\17\330\1\101\1\330\1\0\1\330\3\101\1\330"+
    "\1\101\2\330\1\101\2\330\4\101\5\330\30\101\1\331"+
    "\11\101\1\330\5\101\1\77\3\0\3\77\1\0\1\77"+
    "\2\0\1\77\2\0\2\77\2\332\5\0\42\77\1\0"+
    "\5\77\2\334\1\0\5\334\1\u015e\46\334\1\u0160\17\334"+
    "\1\103\1\334\1\0\1\334\3\103\1\334\1\103\2\334"+
    "\1\103\2\334\4\103\5\334\30\103\1\335\11\103\1\334"+
    "\5\103\1\105\3\0\3\105\1\0\1\105\2\0\1\105"+
    "\2\0\4\105\5\0\6\105\1\337\26\105\1\337\4\105"+
    "\1\0\5\105\2\340\1\0\2\340\1\u0161\51\340\1\u0162"+
    "\17\340\1\115\1\340\1\0\1\340\1\115\1\u0163\1\115"+
    "\1\340\1\115\2\340\1\115\2\340\4\115\5\340\30\115"+
    "\1\342\11\115\1\340\5\115\2\343\1\0\5\343\1\u0161"+
    "\46\343\1\u0164\17\343\1\116\1\343\1\0\1\343\3\116"+
    "\1\343\1\u0165\2\343\1\116\2\343\4\116\5\343\30\116"+
    "\1\344\11\116\1\343\5\116\2\346\1\0\2\346\1\u0166"+
    "\51\346\1\u0167\17\346\1\122\1\346\1\0\1\346\1\122"+
    "\1\u0168\1\122\1\346\1\122\2\346\1\122\2\346\4\122"+
    "\5\346\30\122\1\350\11\122\1\346\5\122\2\351\1\0"+
    "\5\351\1\u0166\46\351\1\u0169\17\351\1\123\1\351\1\0"+
    "\1\351\3\123\1\351\1\u016a\2\351\1\123\2\351\4\123"+
    "\5\351\30\123\1\352\11\123\1\351\5\123\1\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\23\55\1\u016b\15\55\1\u016b\1\0\2\55\1\u016b\3\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\5\55\1\u016c\34\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\14\55"+
    "\1\u016d\21\55\1\u016d\3\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\4\55"+
    "\1\u016e\27\55\1\u016e\5\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\10\55"+
    "\1\u016f\31\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\23\55\1\u0170\15\55"+
    "\1\u0170\1\0\2\55\1\u0170\3\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\4\55\1\u0171"+
    "\27\55\1\u0171\5\55\1\0\6\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\11\55\1\u0172"+
    "\30\55\1\0\1\55\1\u0172\4\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\22\55\1\u0173"+
    "\15\55\1\u0173\1\55\1\0\6\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\24\55\1\u0174"+
    "\15\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\4\55\1\u0175\27\55\1\u0175"+
    "\5\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\22\55\1\u0176\15\55\1\u0176"+
    "\1\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\24\55\1\u0177\15\55\1\0"+
    "\6\55\3\0\3\55\1\0\1\55\2\0\1\55\2\0"+
    "\4\55\5\0\11\55\1\u0178\30\55\1\0\1\55\1\u0178"+
    "\3\55\2\374\1\0\2\374\1\u0179\51\374\1\u017a\17\374"+
    "\1\137\1\374\1\0\1\374\1\137\1\u017b\1\137\1\374"+
    "\1\137\2\374\1\137\2\374\4\137\5\374\30\137\1\376"+
    "\11\137\1\374\5\137\2\377\1\0\5\377\1\u0179\46\377"+
    "\1\u017c\17\377\1\140\1\377\1\0\1\377\3\140\1\377"+
    "\1\u017d\2\377\1\140\2\377\4\140\5\377\30\140\1\u0100"+
    "\11\140\1\377\5\140\1\135\3\0\3\135\1\0\1\135"+
    "\2\0\1\135\2\0\4\135\5\0\6\135\1\u0102\26\135"+
    "\1\u0102\4\135\1\0\6\135\1\u017e\1\u017f\1\0\3\135"+
    "\1\u0180\1\135\2\u0180\1\135\2\0\4\135\2\0\1\u0180"+
    "\1\0\1\u0180\42\135\1\u0180\5\135\2\u0104\1\0\2\u0104"+
    "\1\u0181\51\u0104\1\u0182\17\u0104\1\150\1\u0104\1\0\1\u0104"+
    "\1\150\1\u0183\1\150\1\u0104\1\150\2\u0104\1\150\2\u0104"+
    "\4\150\5\u0104\30\150\1\u0106\11\150\1\u0104\5\150\1\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\1\146\27\u0184\2\146\10\u0184\1\0\5\146\2\u0108"+
    "\1\0\5\u0108\1\u0181\46\u0108\1\u0185\17\u0108\1\152\1\u0108"+
    "\1\0\1\u0108\3\152\1\u0108\1\u0186\2\u0108\1\152\2\u0108"+
    "\4\152\5\u0108\30\152\1\u0109\11\152\1\u0108\5\152\1\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\14\146\1\u0187\21\146\1\u0187\3\146\1\0\6\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\14\146\1\u0188\21\146\1\u0188\3\146\1\0\6\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\11\146\1\u0189\30\146\1\0\1\146\1\u0189\4\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\13\146\1\u018a\26\146\1\0\4\146\1\u018a\1\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\5\146\1\u018b\34\146\1\0\5\146\2\u0114\1\0"+
    "\2\u0114\1\u018c\51\u0114\1\u018d\17\u0114\1\166\1\u0114\1\0"+
    "\1\u0114\1\166\1\u018e\1\166\1\u0114\1\166\2\u0114\1\166"+
    "\2\u0114\4\166\5\u0114\30\166\1\u0116\11\166\1\u0114\5\166"+
    "\2\u0117\1\0\5\u0117\1\u018c\46\u0117\1\u018f\17\u0117\1\167"+
    "\1\u0117\1\0\1\u0117\3\167\1\u0117\1\u0190\2\u0117\1\167"+
    "\2\u0117\4\167\5\u0117\30\167\1\u0118\11\167\1\u0117\5\167"+
    "\2\u0119\1\0\2\u0119\1\u0191\51\u0119\1\u0192\17\u0119\1\173"+
    "\1\u0119\1\0\1\u0119\1\173\1\u0193\1\173\1\u0119\1\173"+
    "\2\u0119\1\173\2\u0119\4\173\5\u0119\30\173\1\u011b\11\173"+
    "\1\u0119\5\173\2\u011c\1\0\5\u011c\1\u0191\46\u011c\1\u0194"+
    "\17\u011c\1\174\1\u011c\1\0\1\u011c\3\174\1\u011c\1\u0195"+
    "\2\u011c\1\174\2\u011c\4\174\5\u011c\30\174\1\u011d\11\174"+
    "\1\u011c\5\174\1\171\3\0\3\171\1\0\1\171\2\0"+
    "\1\171\2\0\4\171\5\0\6\171\1\u0196\26\171\1\u0196"+
    "\4\171\1\0\6\171\3\0\3\171\1\0\1\171\2\0"+
    "\1\171\2\0\4\171\5\0\25\171\1\u0197\14\171\1\0"+
    "\6\171\3\0\3\171\1\0\1\171\2\0\1\171\2\0"+
    "\4\171\5\0\22\171\1\u0198\15\171\1\u0198\1\171\1\0"+
    "\6\171\3\0\3\171\1\0\1\171\2\0\1\171\2\0"+
    "\4\171\5\0\11\171\1\u0199\30\171\1\0\1\171\1\u0199"+
    "\4\171\3\0\3\171\1\0\1\171\2\0\1\171\2\0"+
    "\4\171\5\0\21\171\1\u0197\20\171\1\0\6\171\3\0"+
    "\3\171\1\0\1\171\2\0\1\171\2\0\4\171\5\0"+
    "\22\171\1\u0197\15\171\1\u0197\1\171\1\0\6\171\3\0"+
    "\3\171\1\0\1\171\2\0\1\171\2\0\4\171\5\0"+
    "\23\171\1\u0197\15\171\1\u0197\1\0\2\171\1\u0197\3\171"+
    "\3\0\3\171\1\0\1\171\2\0\1\171\2\0\4\171"+
    "\5\0\24\171\1\u0197\15\171\1\0\5\171\1\213\1\267"+
    "\1\0\1\267\1\213\1\u019a\1\213\1\267\1\213\2\267"+
    "\1\213\2\267\4\213\5\267\30\213\1\u0127\11\213\1\267"+
    "\5\213\1\214\1\275\1\0\1\275\3\214\1\275\1\u019b"+
    "\2\275\1\214\2\275\4\214\5\275\30\214\1\u0128\11\214"+
    "\1\275\5\214\1\216\1\u0119\1\0\1\u0119\1\216\1\u019c"+
    "\1\216\1\u0119\1\216\2\u0119\1\216\2\u0119\4\216\5\u0119"+
    "\30\216\1\u012a\11\216\1\u0119\5\216\1\217\1\u011c\1\0"+
    "\1\u011c\3\217\1\u011c\1\u019d\2\u011c\1\217\2\u011c\4\217"+
    "\5\u011c\30\217\1\u012b\11\217\1\u011c\5\217\1\211\3\0"+
    "\3\211\1\0\1\211\2\0\1\211\2\0\4\211\5\0"+
    "\25\211\1\u019e\14\211\1\0\6\211\3\0\3\211\1\0"+
    "\1\211\2\0\1\211\2\0\4\211\5\0\21\211\1\u019e"+
    "\20\211\1\0\6\211\3\0\3\211\1\0\1\211\2\0"+
    "\1\211\2\0\4\211\5\0\22\211\1\u019e\15\211\1\u019e"+
    "\1\211\1\0\6\211\3\0\3\211\1\0\1\211\2\0"+
    "\1\211\2\0\4\211\5\0\23\211\1\u019e\15\211\1\u019e"+
    "\1\0\2\211\1\u019e\3\211\3\0\3\211\1\0\1\211"+
    "\2\0\1\211\2\0\4\211\5\0\24\211\1\u019e\15\211"+
    "\1\0\5\211\1\227\3\0\3\227\1\0\1\227\2\0"+
    "\1\227\2\0\2\227\2\u019f\5\0\42\227\1\0\5\227"+
    "\1\u0135\3\0\3\u0135\1\0\1\u0135\2\0\1\u0135\2\0"+
    "\4\u0135\5\0\42\u0135\1\0\5\u0135\25\0\1\u01a0\51\0"+
    "\1\u01a1\1\u01a2\2\u01a3\3\u01a1\1\u01a3\1\u01a1\2\u01a3\1\235"+
    "\1\u0137\1\u01a3\1\235\3\u01a1\3\u01a3\1\u0138\1\u01a3\42\u01a1"+
    "\1\u01a3\5\u01a1\2\u013d\1\0\2\u013d\1\u01a4\51\u013d\1\u01a5"+
    "\17\u013d\1\251\1\u013d\1\0\1\u013d\1\251\1\u01a6\1\251"+
    "\1\u013d\1\251\2\u013d\1\251\2\u013d\4\251\5\u013d\30\251"+
    "\1\u013f\11\251\1\u013d\5\251\1\247\3\0\3\247\1\0"+
    "\1\247\2\0\1\247\2\0\2\247\2\u0140\5\0\42\247"+
    "\1\0\5\247\2\u0142\1\0\5\u0142\1\u01a4\46\u0142\1\u01a7"+
    "\17\u0142\1\253\1\u0142\1\0\1\u0142\3\253\1\u0142\1\u01a8"+
    "\2\u0142\1\253\2\u0142\4\253\5\u0142\30\253\1\u0143\11\253"+
    "\1\u0142\5\253\1\255\3\0\1\u01a9\2\255\1\0\1\255"+
    "\2\0\1\255\2\0\2\255\2\u0144\5\0\1\255\27\u0144"+
    "\1\255\11\u0144\1\0\1\255\4\u0144\1\255\3\0\2\255"+
    "\1\u01a9\1\0\1\255\2\0\1\255\2\0\2\255\2\u0145"+
    "\5\0\1\255\27\u0145\1\255\11\u0145\1\0\1\255\4\u0145"+
    "\2\267\1\0\2\267\1\u01aa\51\267\1\u0148\17\267\2\275"+
    "\1\0\5\275\1\u01ab\46\275\1\u014a\17\275\1\301\3\0"+
    "\3\301\1\0\1\301\2\0\1\301\2\0\4\301\5\0"+
    "\15\301\1\u01ac\24\301\1\0\5\301\1\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\17\55"+
    "\1\u01ad\22\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\1\55\1\u01ae\30\55"+
    "\1\u01ae\7\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\14\55\1\u01af\21\55"+
    "\1\u01af\3\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\11\55\1\u01b0\30\55"+
    "\1\0\1\55\1\u01b0\4\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\17\55\1\u01b1\22\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\5\55\1\u01b2\34\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\14\55\1\u01b3\21\55\1\u01b3\3\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\24\55\1\u01b4\15\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\17\55"+
    "\1\u01b5\22\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\11\55\1\u01b6\30\55"+
    "\1\0\1\55\1\u01b6\4\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\5\55\1\u01b7\34\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\14\55\1\u01b8\21\55\1\u01b8\3\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\6\55\1\u01b9\26\55\1\u01b9\4\55"+
    "\1\0\5\55\2\330\1\0\2\330\1\u01ba\51\330\1\u015f"+
    "\17\330\2\334\1\0\5\334\1\u01bb\46\334\1\u0160\17\334"+
    "\2\340\1\0\2\340\1\u01bc\51\340\1\u0162\17\340\2\343"+
    "\1\0\5\343\1\u01bd\46\343\1\u0164\17\343\2\346\1\0"+
    "\2\346\1\u01be\51\346\1\u0167\17\346\2\351\1\0\5\351"+
    "\1\u01bf\46\351\1\u0169\17\351\1\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\17\55\1\u01c0"+
    "\22\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\1\55\1\u01c1\30\55\1\u01c1"+
    "\7\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\14\55\1\u01c2\21\55\1\u01c2"+
    "\3\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\11\55\1\u01c3\30\55\1\0"+
    "\1\55\1\u01c3\4\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\17\55\1\u01c4\22\55\1\0"+
    "\6\55\3\0\3\55\1\0\1\55\2\0\1\55\2\0"+
    "\4\55\5\0\5\55\1\u01c5\34\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\14\55\1\u01c6\21\55\1\u01c6\3\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\24\55\1\u01c7\15\55\1\0\6\55\3\0\3\55\1\0"+
    "\1\55\2\0\1\55\2\0\4\55\5\0\17\55\1\u01c8"+
    "\22\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\11\55\1\u01c9\30\55\1\0"+
    "\1\55\1\u01c9\4\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\5\55\1\u01ca\34\55\1\0"+
    "\6\55\3\0\3\55\1\0\1\55\2\0\1\55\2\0"+
    "\4\55\5\0\14\55\1\u01cb\21\55\1\u01cb\3\55\1\0"+
    "\6\55\3\0\3\55\1\0\1\55\2\0\1\55\2\0"+
    "\4\55\5\0\6\55\1\u01cc\26\55\1\u01cc\4\55\1\0"+
    "\5\55\2\374\1\0\2\374\1\u01cd\51\374\1\u017a\17\374"+
    "\2\377\1\0\5\377\1\u01ce\46\377\1\u017c\17\377\1\0"+
    "\1\u017e\1\u017f\4\0\1\u0180\1\0\2\u0180\11\0\1\u0180"+
    "\1\0\1\u0180\42\0\1\u0180\7\0\1\u017f\74\0\2\u0104"+
    "\1\0\2\u0104\1\u01cf\51\u0104\1\u0182\17\u0104\2\u0108\1\0"+
    "\5\u0108\1\u01d0\46\u0108\1\u0185\17\u0108\1\146\3\0\3\146"+
    "\1\0\1\146\2\0\1\146\2\0\4\146\5\0\11\146"+
    "\1\u01d1\30\146\1\0\1\146\1\u01d1\4\146\3\0\3\146"+
    "\1\0\1\146\2\0\1\146\2\0\4\146\3\0\1\u01d2"+
    "\1\0\42\146\1\0\6\146\3\0\3\146\1\0\1\146"+
    "\2\0\1\146\2\0\4\146\5\0\20\146\1\u01d3\16\146"+
    "\1\u01d3\2\146\1\0\6\146\3\0\3\146\1\0\1\146"+
    "\2\0\1\146\2\0\4\146\5\0\5\146\1\u01d4\34\146"+
    "\1\0\6\146\3\0\3\146\1\0\1\146\2\0\1\146"+
    "\2\0\4\146\5\0\2\146\1\u01d5\37\146\1\0\5\146"+
    "\2\u0114\1\0\2\u0114\1\u01d6\51\u0114\1\u018d\17\u0114\2\u0117"+
    "\1\0\5\u0117\1\u01d7\46\u0117\1\u018f\17\u0117\2\u0119\1\0"+
    "\2\u0119\1\u01d8\51\u0119\1\u0192\17\u0119\2\u011c\1\0\5\u011c"+
    "\1\u01d9\46\u011c\1\u0194\17\u011c\1\171\3\0\3\171\1\0"+
    "\1\171\2\0\1\171\2\0\4\171\5\0\11\171\1\u01da"+
    "\30\171\1\0\1\171\1\u01da\4\171\3\0\3\171\1\0"+
    "\1\171\2\0\1\171\2\0\4\171\5\0\17\171\1\u01db"+
    "\22\171\1\0\6\171\3\0\3\171\1\0\1\171\2\0"+
    "\1\171\2\0\4\171\5\0\23\171\1\u01dc\15\171\1\u01dc"+
    "\1\0\2\171\1\u01dc\2\171\1\u01a3\1\u01a2\11\u01a3\2\0"+
    "\1\u01a3\1\0\6\u01a3\1\0\51\u01a3\2\u013d\1\0\2\u013d"+
    "\1\u01dd\51\u013d\1\u01a5\17\u013d\2\u0142\1\0\5\u0142\1\u01de"+
    "\46\u0142\1\u01a7\17\u0142\1\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\3\55\1\u01df\27\55"+
    "\1\u01df\6\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\13\55\1\u01e0\26\55"+
    "\1\0\4\55\1\u01e0\1\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\22\55\1\311\15\55"+
    "\1\311\1\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\17\55\1\u01e1\22\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\22\55\1\322\15\55\1\322\1\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\17\55\1\u01e2\22\55\1\0\6\55"+
    "\3\0\3\55\1\0\1\55\2\0\1\55\2\0\4\55"+
    "\5\0\24\55\1\u01e3\15\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\3\55"+
    "\1\u01e4\27\55\1\u01e4\6\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\13\55"+
    "\1\u01e5\26\55\1\0\4\55\1\u01e5\1\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\22\55"+
    "\1\356\15\55\1\356\1\55\1\0\6\55\3\0\3\55"+
    "\1\0\1\55\2\0\1\55\2\0\4\55\5\0\17\55"+
    "\1\u01e6\22\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\22\55\1\367\15\55"+
    "\1\367\1\55\1\0\6\55\3\0\3\55\1\0\1\55"+
    "\2\0\1\55\2\0\4\55\5\0\17\55\1\u01e7\22\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\24\55\1\u01e8\15\55\1\0\5\55"+
    "\1\146\3\0\3\146\1\0\1\146\2\0\1\146\2\0"+
    "\4\146\5\0\15\146\1\u01e9\24\146\1\0\5\146\20\0"+
    "\2\u01ea\6\0\27\u01ea\1\0\11\u01ea\2\0\4\u01ea\1\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\3\0\1\u01eb\1\0\42\146\1\0\6\146\3\0\3\146"+
    "\1\0\1\146\2\0\1\146\2\0\4\146\5\0\16\146"+
    "\1\u01ec\23\146\1\0\6\146\3\0\3\146\1\0\1\146"+
    "\2\0\1\146\2\0\4\146\5\0\1\146\1\u01ed\30\146"+
    "\1\u01ed\7\146\1\0\5\146\1\171\3\0\3\171\1\0"+
    "\1\171\2\0\1\171\2\0\4\171\5\0\16\171\1\u01ee"+
    "\23\171\1\0\6\171\3\0\3\171\1\0\1\171\2\0"+
    "\1\171\2\0\4\171\5\0\22\171\1\u01ef\15\171\1\u01ef"+
    "\1\171\1\0\6\171\3\0\3\171\1\0\1\171\2\0"+
    "\1\171\2\0\4\171\5\0\24\171\1\u01f0\15\171\1\0"+
    "\5\171\1\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\3\55\1\u01f1\27\55\1\u01f1\6\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\3\55\1\u01f2\27\55\1\u01f2\6\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\3\55\1\u01f3\27\55\1\u01f3\6\55"+
    "\1\0\6\55\3\0\3\55\1\0\1\55\2\0\1\55"+
    "\2\0\4\55\5\0\3\55\1\u01f4\27\55\1\u01f4\6\55"+
    "\1\0\5\55\1\146\3\0\3\146\1\0\1\146\2\0"+
    "\1\146\2\0\4\146\5\0\23\146\1\u01f5\15\146\1\u01f5"+
    "\1\0\2\146\1\u01f5\2\146\20\0\2\u01f6\53\0\1\u01f6"+
    "\1\0\1\146\3\0\3\146\1\0\1\146\2\0\1\146"+
    "\2\0\4\146\5\0\23\146\1\u01f7\15\146\1\u01f7\1\0"+
    "\2\146\1\u01f7\3\146\3\0\3\146\1\0\1\146\2\0"+
    "\1\146\2\0\4\146\5\0\3\146\1\u01f8\27\146\1\u01f8"+
    "\6\146\1\0\5\146\1\171\3\0\3\171\1\0\1\171"+
    "\2\0\1\171\2\0\4\171\5\0\5\171\1\u01f9\34\171"+
    "\1\0\6\171\3\0\3\171\1\0\1\171\2\0\1\171"+
    "\2\0\4\171\5\0\14\171\1\u01fa\21\171\1\u01fa\3\171"+
    "\1\0\5\171\1\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\1\55\1\u01fb\30\55\1\u01fb"+
    "\7\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\1\55\1\u01fc\30\55\1\u01fc"+
    "\7\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\1\55\1\u01fd\30\55\1\u01fd"+
    "\7\55\1\0\6\55\3\0\3\55\1\0\1\55\2\0"+
    "\1\55\2\0\4\55\5\0\1\55\1\u01fe\30\55\1\u01fe"+
    "\7\55\1\0\5\55\1\146\3\0\3\146\1\0\1\146"+
    "\2\0\1\146\2\0\4\146\3\0\1\u01ff\1\0\42\146"+
    "\1\0\6\146\3\0\3\146\1\0\1\146\2\0\1\146"+
    "\2\0\4\146\3\0\1\u0200\1\0\42\146\1\0\6\146"+
    "\3\0\3\146\1\0\1\146\2\0\1\146\2\0\4\146"+
    "\5\0\13\146\1\u0201\26\146\1\0\4\146\1\u0201\1\171"+
    "\3\0\3\171\1\0\1\171\2\0\1\171\2\0\4\171"+
    "\5\0\4\171\1\u01f0\27\171\1\u01f0\5\171\1\0\6\171"+
    "\3\0\3\171\1\0\1\171\2\0\1\171\2\0\4\171"+
    "\5\0\5\171\1\u0202\34\171\1\0\5\171\1\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\14\55\1\u0203\21\55\1\u0203\3\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\14\55\1\u0204\21\55\1\u0204\3\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\14\55\1\u0205\21\55\1\u0205\3\55\1\0\6\55\3\0"+
    "\3\55\1\0\1\55\2\0\1\55\2\0\4\55\5\0"+
    "\14\55\1\u0206\21\55\1\u0206\3\55\1\0\5\55\13\0"+
    "\2\u01ea\1\0\4\u01ea\3\0\1\u01ea\2\0\27\u01ea\1\0"+
    "\11\u01ea\2\0\4\u01ea\20\0\2\u0207\53\0\1\u0207\1\0"+
    "\1\146\3\0\3\146\1\0\1\146\2\0\1\146\2\0"+
    "\4\146\5\0\21\146\1\u0208\20\146\1\0\5\146\1\171"+
    "\3\0\3\171\1\0\1\171\2\0\1\171\2\0\4\171"+
    "\5\0\26\171\1\u0209\13\171\1\0\5\171\13\0\1\u01ea"+
    "\1\0\1\u0200\1\u020a\60\0\1\171\3\0\3\171\1\0"+
    "\1\171\2\0\1\171\2\0\4\171\5\0\5\171\1\u020b"+
    "\34\171\1\0\5\171\20\0\2\u020c\53\0\1\u020c\1\0"+
    "\1\171\3\0\3\171\1\0\1\171\2\0\1\171\2\0"+
    "\4\171\5\0\14\171\1\u020d\21\171\1\u020d\3\171\1\0"+
    "\5\171\13\0\1\u01ea\1\0\1\u0200\61\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24633];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\10\1\2\11\2\1\1\11\24\1\1\11\7\1"+
    "\1\11\5\1\1\11\55\1\1\11\76\1\1\0\4\1"+
    "\1\11\1\0\1\1\1\0\1\11\1\1\1\0\24\1"+
    "\1\11\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\22\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\1\1\1\0\11\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\17\1\1\11"+
    "\11\1\1\11\1\0\1\11\2\1\1\11\1\1\1\0"+
    "\4\1\1\0\3\1\2\11\1\0\1\1\1\0\2\1"+
    "\1\11\20\1\1\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\17\1\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\11\1\0\2\1"+
    "\1\0\6\1\1\11\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\13\1\1\11\2\1\2\11\1\0"+
    "\1\1\1\0\52\1\1\0\27\1\1\11\1\0\24\1"+
    "\1\0\11\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[525];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private Stack<Integer> tokenOrigin = new Stack<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 128: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 129: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 130: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 131: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 132: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 133: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 134: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 135: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 136: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 137: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 138: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 139: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 140: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 141: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 142: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 143: break;
          case 17:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 144: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 145: break;
          case 19:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 146: break;
          case 20:
            { tokenOrigin.push(CHDIR); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 147: break;
          case 21:
            { yybegin(CHDIR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 148: break;
          case 22:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 149: break;
          case 23:
            { tokenOrigin.push(ECHO_STRING); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 150: break;
          case 24:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 151: break;
          case 25:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 152: break;
          case 26:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 153: break;
          case 27:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 154: break;
          case 28:
            { yybegin(FOR); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 155: break;
          case 29:
            { yybegin(FOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 156: break;
          case 30:
            { yybegin(FOR); yypushback(yylength()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 157: break;
          case 31:
            { yybegin(FOR_COLLECTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 158: break;
          case 32:
            { yybegin(FOR); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 159: break;
          case 33:
            { tokenOrigin.push(IF_STANDARD); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 160: break;
          case 34:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 161: break;
          case 35:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 162: break;
          case 36:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 163: break;
          case 37:
            { tokenOrigin.push(YYINITIAL); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 164: break;
          case 38:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 165: break;
          case 39:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 166: break;
          case 40:
            { yybegin(IF_STANDARD); return BatchTypes.NUMERIC;
            }
          // fall through
          case 167: break;
          case 41:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 168: break;
          case 42:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 169: break;
          case 43:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 170: break;
          case 44:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 171: break;
          case 45:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 172: break;
          case 46:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 173: break;
          case 47:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 174: break;
          case 48:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 175: break;
          case 49:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 176: break;
          case 50:
            { tokenOrigin.push(SET_VALUE); yybegin(TOKEN); yypushback(yylength());
            }
          // fall through
          case 177: break;
          case 51:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 178: break;
          case 52:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 179: break;
          case 53:
            { yybegin(tokenOrigin.pop()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 180: break;
          case 54:
            { yybegin(tokenOrigin.pop()); yypushback(yylength());
            }
          // fall through
          case 181: break;
          case 55:
            { yybegin(tokenOrigin.pop()); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 182: break;
          case 56:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 183: break;
          case 57:
            { yybegin(YYINITIAL); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 184: break;
          case 58:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 185: break;
          case 59:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 186: break;
          case 60:
            { yybegin(CHDIR); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 187: break;
          case 61:
            { yybegin(CHDIR); return BatchTypes.CHDIR_ANNOTATION;
            }
          // fall through
          case 188: break;
          case 62:
            { yybegin(IF); return BatchTypes.IF_ANNOTATION;
            }
          // fall through
          case 189: break;
          case 63:
            { yybegin(YYINITIAL); return BatchTypes.MKDIR_ANNOTATION;
            }
          // fall through
          case 190: break;
          case 64:
            { yybegin(ASSOC_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 191: break;
          case 65:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 192: break;
          case 66:
            { yybegin(CHDIR); return BatchTypes.STRING;
            }
          // fall through
          case 193: break;
          case 67:
            { yybegin(CHDIR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 194: break;
          case 68:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 195: break;
          case 69:
            { yybegin(CHDIR); return BatchTypes.CHDIR_COMMAND;
            }
          // fall through
          case 196: break;
          case 70:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 197: break;
          case 71:
            { yybegin(YYINITIAL); return BatchTypes.MKDIR_COMMAND;
            }
          // fall through
          case 198: break;
          case 72:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 199: break;
          case 73:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 200: break;
          case 74:
            { yybegin(FOR); return BatchTypes.STRING;
            }
          // fall through
          case 201: break;
          case 75:
            { yybegin(FOR_COLLECTION); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 202: break;
          case 76:
            { yybegin(FOR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 203: break;
          case 77:
            { yybegin(YYINITIAL); return BatchTypes.DO_COMMAND;
            }
          // fall through
          case 204: break;
          case 78:
            { yybegin(FOR); return BatchTypes.IN_COMMAND;
            }
          // fall through
          case 205: break;
          case 79:
            { yybegin(FOR_COLLECTION); return BatchTypes.STRING;
            }
          // fall through
          case 206: break;
          case 80:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 207: break;
          case 81:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 208: break;
          case 82:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 209: break;
          case 83:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 210: break;
          case 84:
            { tokenOrigin.push(SET); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.VARIABLE;
            }
          // fall through
          case 211: break;
          case 85:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 212: break;
          case 86:
            { tokenOrigin.push(SET_VALUE); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 213: break;
          case 87:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 214: break;
          case 88:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 215: break;
          case 89:
            { yybegin(SET_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 216: break;
          case 90:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 217: break;
          case 91:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 218: break;
          case 92:
            { yybegin(FOR); return BatchTypes.FOR_ANNOTATION;
            }
          // fall through
          case 219: break;
          case 93:
            { yybegin(SET); return BatchTypes.SET_ANNOTATION;
            }
          // fall through
          case 220: break;
          case 94:
            { yybegin(FOR); return BatchTypes.FOR_COMMAND;
            }
          // fall through
          case 221: break;
          case 95:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 222: break;
          case 96:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 223: break;
          case 97:
            { yybegin(YYINITIAL); yypushback(1); return BatchTypes.TOGGLE;
            }
          // fall through
          case 224: break;
          case 98:
            { yybegin(FOR); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 225: break;
          case 99:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 226: break;
          case 100:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 227: break;
          case 101:
            { yybegin(SET); yypushback(yylength() - 2); return BatchTypes.EXTENSION;
            }
          // fall through
          case 228: break;
          case 102:
            { yybegin(tokenOrigin.pop()); return BatchTypes.VARIABLE;
            }
          // fall through
          case 229: break;
          case 103:
            { yybegin(CALL); return BatchTypes.CALL_ANNOTATION;
            }
          // fall through
          case 230: break;
          case 104:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 231: break;
          case 105:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_ANNOTATION;
            }
          // fall through
          case 232: break;
          case 106:
            { yybegin(EXIT); return BatchTypes.EXIT_ANNOTATION;
            }
          // fall through
          case 233: break;
          case 107:
            { yybegin(GOTO); return BatchTypes.GOTO_ANNOTATION;
            }
          // fall through
          case 234: break;
          case 108:
            { yybegin(MORE); return BatchTypes.MORE_ANNOTATION;
            }
          // fall through
          case 235: break;
          case 109:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 236: break;
          case 110:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 237: break;
          case 111:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 238: break;
          case 112:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 239: break;
          case 113:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 240: break;
          case 114:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 241: break;
          case 115:
            { yybegin(ASSOC); return BatchTypes.ASSOC_ANNOTATION;
            }
          // fall through
          case 242: break;
          case 116:
            { yybegin(BREAK); return BatchTypes.BREAK_ANNOTATION;
            }
          // fall through
          case 243: break;
          case 117:
            { yybegin(SHIFT); return BatchTypes.SHIFT_ANNOTATION;
            }
          // fall through
          case 244: break;
          case 118:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 245: break;
          case 119:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 246: break;
          case 120:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 247: break;
          case 121:
            { yybegin(FOR); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 248: break;
          case 122:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 249: break;
          case 123:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_ANNOTATION;
            }
          // fall through
          case 250: break;
          case 124:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_ANNOTATION;
            }
          // fall through
          case 251: break;
          case 125:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 252: break;
          case 126:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 253: break;
          case 127:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
