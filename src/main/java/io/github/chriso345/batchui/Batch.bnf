{
    parserClass = "io.github.chriso345.batchui.parser.BatchParser"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Batch"
    psiImplClassSuffix = "Impl"
    psiPackage = "io.github.chriso345.batchui.psi"
    psiImplPackage = "io.github.chriso345.batchui.psi.impl"

    elementTypeHolderClass = "io.github.chriso345.batchui.psi.BatchTypes"
    elementTypeClass = "io.github.chriso345.batchui.psi.BatchElementType"
    tokenTypeClass = "io.github.chriso345.batchui.psi.BatchTokenType"

    psiImplUtilClass = "io.github.chriso345.batchui.psi.impl.BatchPsiImplUtil"
}

batchFile ::= item_*

// May be needed for reference completions later??
label ::= (LABEL_MARKER? FUNC_LABEL) {
    methods = [
        getLabelMarker
        getFuncLabel
    ]
}

//cmd_terminator ::= (PIPE|AND|LESS|GREATER|DOUBLE_PIPE|DOUBLE_AND|DOUBLE_LESS|DOUBLE_GREATER)

types_ ::= STRING | NUMERIC | PLAINTEXT | DISK_DRIVE | VARIABLE | ARG_LITERAL | FOR_VARIABLE
operators ::= COMPARISON_OPERATOR | OPERATOR
//parenthesis ::= LEFT_PARENTHESIS | RIGHT_PARENTHESIS
//braces ::= LEFT_BRACE | RIGHT_BRACE
//brackets ::= LEFT_BRACKET | RIGHT_BRACKET

private item_ ::= (
    prefix          // ECHO, SET, etc
    | label
    | COMMENT        // REM, ::
    | CRLF
    | OPEN_PAREN recurse_item CLOSE_PAREN
)

private recurse_item ::= item_ recurse_item?

prefix ::= (DECORATOR? command)

command ::= command_reference | annotation_reference | COMMENT_REFERENCE | REM_DECORATOR COMMENT? | PLAINTEXT

command_reference ::= (
    ASSOC_COMMAND assoc_arguments?
    | BREAK_COMMAND TOGGLE?
    | CALL_COMMAND call_arguments?
    | CHDIR_COMMAND chdir_arguments?
    | DATE_COMMAND date_arguments?
    | ECHO_COMMAND echo_arguments?
    | ELSE_COMMAND else_arguments?
    | ENDLOCAL_COMMAND
    | EXIT_COMMAND exit_arguments?
    | FOR_COMMAND for_arguments?
    | GOTO_COMMAND label?
    | IF_COMMAND if_arguments?
    | MKDIR_COMMAND types_
    | MORE_COMMAND more_arguments?
    | SET_COMMAND set_arguments?
    | SETLOCAL_COMMAND setlocal_arguments?
    | SHIFT_COMMAND shift_arguments?

    | UNDEFINED_COMMAND undefined_arguments?
) (COMMAND_TERMINATOR command)?

annotation_reference ::= (
    ASSOC_ANNOTATION assoc_arguments?
    | BREAK_ANNOTATION TOGGLE?
    | CALL_ANNOTATION call_arguments?
    | CHDIR_ANNOTATION chdir_arguments?
    | DATE_ANNOTATION date_arguments?
    | ECHO_ANNOTATION echo_arguments?
    | ELSE_ANNOTATION else_arguments?
    | ENDLOCAL_ANNOTATION
    | EXIT_ANNOTATION exit_arguments?
    | FOR_ANNOTATION for_arguments?
    | GOTO_ANNOTATION label?
    | IF_ANNOTATION if_arguments?
    | MKDIR_ANNOTATION types_
    | MORE_ANNOTATION more_arguments?
    | SET_ANNOTATION set_arguments?
    | SETLOCAL_ANNOTATION setlocal_arguments?
    | SHIFT_ANNOTATION shift_arguments?

    | UNDEFINED_ANNOTATION undefined_arguments?
) (COMMAND_TERMINATOR command)?

assoc_arguments ::= VARIABLE (ASSIGNMENT (STRING|NUMERIC)?)?
call_arguments ::= label? // todo: add extra arguments
chdir_arguments ::= EXTENSION? (DISK_DRIVE | PLAINTEXT | VARIABLE)
date_arguments ::= EXTENSION? NUMERIC?
echo_arguments ::= (TOGGLE | (types_)*)?
exit_arguments ::= EXTENSION NUMERIC?
more_arguments ::= (EXTENSION | PLAINTEXT | DISK_DRIVE) more_arguments?
set_arguments ::= EXTENSION? VARIABLE ASSIGNMENT (recurse_types_)?
setlocal_arguments ::= SETLOCAL_PARAMETER SETLOCAL_PARAMETER?
shift_arguments ::= EXTENSION

if_arguments ::= COMPARISON_OPERATOR? (error_if | standard_if | exist_if)
else_arguments ::= (command | (OPEN_PAREN recurse_item CLOSE_PAREN))
error_if ::= ERRORLEVEL_TOKEN NUMERIC (command | (OPEN_PAREN recurse_item CLOSE_PAREN))
standard_if ::= (types_ | VARIABLE) operators (types_ | VARIABLE) (command | (OPEN_PAREN recurse_item CLOSE_PAREN))
exist_if ::= EXIST_TOKEN (STRING | PLAINTEXT | VARIABLE) (command | (OPEN_PAREN recurse_item CLOSE_PAREN))

//for_params ::= (PLAINTEXT | STRING) ASSIGNMENT (types_)
private for_params ::= PLAINTEXT for_params?
for_arguments ::= (EXTENSION (for_params | STRING))? FOR_VARIABLE IN_COMMAND collection DO_COMMAND (command | (OPEN_PAREN recurse_item CLOSE_PAREN))

private recurse_types_ ::= types_ recurse_types_?
collection ::= OPEN_PAREN recurse_types_ CLOSE_PAREN

undefined_arguments ::= (EXTENSION | PLAINTEXT | DISK_DRIVE) undefined_arguments?
