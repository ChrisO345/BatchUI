// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int COMMAND = 4;
  public static final int ECHO = 6;
  public static final int ECHO_STRING = 8;
  public static final int GOTO = 10;
  public static final int LABEL = 12;
  public static final int REM = 14;
  public static final int SET = 16;
  public static final int SET_VALUE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\0\1\4\3\0\1\5\5\0\1\3\15\0\1\6"+
    "\1\3\1\7\1\10\1\11\1\0\1\12\2\0\1\13"+
    "\1\0\1\14\1\15\1\16\1\17\4\0\1\20\1\21"+
    "\1\22\2\0\1\23\1\24\1\25\7\0\1\26\6\0"+
    "\1\13\1\0\1\14\1\15\1\16\1\17\4\0\1\20"+
    "\1\21\1\22\2\0\1\23\1\24\1\25\7\0\1\27"+
    "\u0102\0\1\24\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\1\1\1\3\1\4\2\3\2\1"+
    "\1\3\1\5\1\6\1\5\1\7\1\10\1\7\3\11"+
    "\3\7\1\11\1\12\1\13\2\12\1\14\1\15\1\16"+
    "\1\17\1\20\1\7\1\21\1\22\1\23\1\24\1\23"+
    "\1\0\1\25\1\1\1\3\1\26\2\27\1\1\1\5"+
    "\1\0\1\30\1\7\1\11\3\7\1\0\1\31\3\12"+
    "\1\0\1\32\1\0\1\23\1\25\1\0\1\25\1\27"+
    "\1\26\1\5\1\30\1\0\1\30\2\7\1\33\1\31"+
    "\1\0\1\31\1\0\1\34\1\23\1\0\1\25\1\35"+
    "\1\36\1\30\1\37\1\40\1\31\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\u0138\0\u0150\0\u0168"+
    "\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0\0\u01f8\0\u0210\0\u0228"+
    "\0\u0240\0\u0258\0\u0270\0\u0288\0\u02a0\0\u02b8\0\u02d0\0\u02e8"+
    "\0\u0300\0\u0318\0\u0330\0\u0348\0\u0360\0\u0378\0\u0390\0\u03a8"+
    "\0\u03c0\0\u03d8\0\u03f0\0\u0408\0\u0420\0\u0438\0\u0450\0\u0468"+
    "\0\u0480\0\u0498\0\360\0\u04b0\0\u0438\0\u0438\0\u04c8\0\u04e0"+
    "\0\u04f8\0\u0510\0\u0528\0\u0240\0\u0540\0\u0438\0\u0558\0\u0570"+
    "\0\u0588\0\u05a0\0\u0330\0\u05b8\0\u05d0\0\u05e8\0\u0600\0\u0438"+
    "\0\u0618\0\u0630\0\u0438\0\u0648\0\u0138\0\u0660\0\360\0\u0678"+
    "\0\u0438\0\u0690\0\u0270\0\u06a8\0\u06c0\0\u0240\0\u0438\0\u06d8"+
    "\0\u0360\0\u06f0\0\u0708\0\u0438\0\u0720\0\u0498\0\u04c8\0\u01f8"+
    "\0\u0528\0\u0240\0\u0240\0\u05a0\0\u0618";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\0\1\16\1\17\1\20\1\21"+
    "\1\0\1\22\1\23\10\13\1\24\3\13\1\25\1\26"+
    "\1\27\2\0\1\26\5\0\2\26\1\30\12\26\1\0"+
    "\1\31\1\32\1\15\1\0\1\33\1\34\1\0\1\35"+
    "\1\0\1\36\2\31\1\37\1\31\1\40\5\31\1\41"+
    "\2\31\1\42\1\43\1\44\1\15\1\0\1\45\1\34"+
    "\1\0\1\35\1\0\1\36\10\43\1\46\4\43\1\42"+
    "\1\43\1\47\1\15\1\0\1\45\1\34\1\0\1\35"+
    "\1\0\1\36\15\43\1\42\1\50\1\51\1\15\1\0"+
    "\1\50\5\0\15\50\1\0\1\50\1\52\2\0\1\50"+
    "\5\0\15\50\1\0\2\53\1\15\25\53\1\54\1\55"+
    "\1\15\1\0\1\54\3\0\1\56\1\0\15\54\1\0"+
    "\1\57\1\60\1\15\1\0\1\61\5\0\15\57\1\0"+
    "\1\13\3\0\1\13\5\0\15\13\2\0\1\14\30\0"+
    "\1\15\25\0\1\16\1\62\1\0\1\62\1\63\5\62"+
    "\14\16\1\64\1\62\5\0\1\65\30\0\1\66\30\0"+
    "\1\65\31\0\1\65\16\0\1\67\3\0\1\67\5\0"+
    "\11\67\1\70\3\67\1\0\1\13\3\0\1\13\5\0"+
    "\2\13\1\71\12\13\30\0\1\65\1\26\3\0\1\26"+
    "\5\0\15\26\2\0\1\27\26\0\1\26\3\0\1\26"+
    "\5\0\1\26\1\72\13\26\1\0\1\31\3\0\1\31"+
    "\5\0\15\31\2\0\1\32\26\0\1\33\1\73\1\0"+
    "\1\73\1\74\5\73\14\33\1\75\1\73\5\0\1\76"+
    "\31\0\1\76\31\0\1\76\16\0\1\31\3\0\1\31"+
    "\5\0\1\31\1\77\13\31\1\0\1\31\3\0\1\31"+
    "\5\0\10\31\1\100\4\31\1\0\1\31\3\0\1\31"+
    "\5\0\2\31\1\101\12\31\30\0\1\76\1\43\3\0"+
    "\1\43\5\0\15\43\2\0\1\44\26\0\1\45\1\102"+
    "\1\0\1\102\1\103\5\102\14\45\1\104\1\102\1\43"+
    "\3\0\1\43\5\0\3\43\1\105\3\43\1\106\5\43"+
    "\2\0\1\47\26\0\1\50\3\0\1\50\5\0\15\50"+
    "\2\0\1\51\27\0\1\52\26\0\2\53\1\0\25\53"+
    "\1\54\1\107\2\0\1\54\3\0\1\110\1\0\15\54"+
    "\2\0\1\55\56\0\1\57\3\0\1\57\5\0\15\57"+
    "\2\0\1\60\26\0\1\61\1\111\1\0\1\111\1\57"+
    "\5\111\14\61\1\112\1\111\2\62\1\0\1\62\1\113"+
    "\21\62\1\114\1\62\1\16\1\62\1\0\1\62\1\115"+
    "\5\62\14\16\1\64\1\62\1\67\3\0\1\67\5\0"+
    "\15\67\1\0\1\67\3\0\1\67\5\0\2\67\1\116"+
    "\12\67\1\0\1\13\3\0\1\13\5\0\6\13\1\117"+
    "\6\13\1\0\1\26\3\0\1\26\5\0\5\26\1\120"+
    "\7\26\1\0\2\73\1\0\1\73\1\121\21\73\1\122"+
    "\1\73\1\33\1\73\1\0\1\73\1\123\5\73\14\33"+
    "\1\75\1\73\1\31\3\0\1\31\5\0\5\31\1\124"+
    "\7\31\1\0\1\31\3\0\1\31\5\0\13\31\1\125"+
    "\1\31\1\0\1\31\3\0\1\31\5\0\13\31\1\126"+
    "\1\31\1\0\2\102\1\0\1\102\1\127\21\102\1\130"+
    "\1\102\1\45\1\102\1\0\1\102\1\131\5\102\14\45"+
    "\1\104\1\102\1\43\3\0\1\43\5\0\3\43\1\106"+
    "\11\43\1\0\1\43\1\132\1\133\1\0\1\43\5\0"+
    "\15\43\2\0\1\107\6\0\1\110\17\0\2\111\1\0"+
    "\1\111\1\134\21\111\1\135\1\111\1\61\1\111\1\0"+
    "\1\111\1\61\5\111\14\61\1\112\1\111\2\62\1\0"+
    "\1\62\1\136\21\62\1\114\1\62\1\67\3\0\1\67"+
    "\5\0\6\67\1\137\6\67\1\0\1\26\3\0\1\26"+
    "\5\0\10\26\1\140\4\26\1\0\2\73\1\0\1\73"+
    "\1\141\21\73\1\122\1\73\1\31\3\0\1\31\5\0"+
    "\10\31\1\142\4\31\1\0\1\31\3\0\1\31\5\0"+
    "\10\31\1\143\4\31\1\0\2\102\1\0\1\102\1\144"+
    "\21\102\1\130\1\102\1\0\1\132\1\133\27\0\1\133"+
    "\25\0\2\111\1\0\1\111\1\145\21\111\1\135\1\111";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1848];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\43\1\1\11\3\1\1\0\2\1\2\11\4\1"+
    "\1\0\2\1\1\11\3\1\1\0\4\1\1\0\1\11"+
    "\1\0\1\1\1\11\1\0\4\1\1\11\1\0\4\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\11\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 33: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 34: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.CMD_TERMINATOR;
            }
          // fall through
          case 35: break;
          case 4:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 36: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.ANNOTATION;
            }
          // fall through
          case 37: break;
          case 6:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 38: break;
          case 7:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 39: break;
          case 8:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 40: break;
          case 9:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 41: break;
          case 10:
            { yybegin(ECHO_STRING); return BatchTypes.COMMAND;
            }
          // fall through
          case 42: break;
          case 11:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 43: break;
          case 12:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 44: break;
          case 13:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 45: break;
          case 14:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 46: break;
          case 15:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 47: break;
          case 16:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 48: break;
          case 17:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 18:
            { yybegin(SET_VALUE); return BatchTypes.SEPARATOR;
            }
          // fall through
          case 50: break;
          case 19:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 51: break;
          case 20:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 52: break;
          case 21:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 53: break;
          case 22:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 54: break;
          case 23:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.ANNOTATION;
            }
          // fall through
          case 55: break;
          case 24:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 56: break;
          case 25:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 57: break;
          case 26:
            { yybegin(SET); yypushback(1); return BatchTypes.CONSTANT;
            }
          // fall through
          case 58: break;
          case 27:
            { yybegin(SET); return BatchTypes.COMMAND;
            }
          // fall through
          case 59: break;
          case 28:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 60: break;
          case 29:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_ANNOTATION;
            }
          // fall through
          case 61: break;
          case 30:
            { yybegin(ECHO); return BatchTypes.ANNOTATION;
            }
          // fall through
          case 62: break;
          case 31:
            { yybegin(ECHO); return BatchTypes.COMMAND;
            }
          // fall through
          case 63: break;
          case 32:
            { yybegin(GOTO); return BatchTypes.COMMAND;
            }
          // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
