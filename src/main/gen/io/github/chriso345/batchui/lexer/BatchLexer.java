// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int ATTRIB = 8;
  public static final int BREAK = 10;
  public static final int CALL = 12;
  public static final int CHDIR = 14;
  public static final int COLOR = 16;
  public static final int COMMAND = 18;
  public static final int DATE = 20;
  public static final int ECHO = 22;
  public static final int ECHO_STRING = 24;
  public static final int EXIT = 26;
  public static final int FOR = 28;
  public static final int FOR_COLLECTION = 30;
  public static final int GOTO = 32;
  public static final int IF = 34;
  public static final int IF_ERRORLEVEL = 36;
  public static final int IF_EXIST = 38;
  public static final int IF_STANDARD = 40;
  public static final int LABEL = 42;
  public static final int MORE = 44;
  public static final int REM = 46;
  public static final int SET = 48;
  public static final int SET_LOCAL = 50;
  public static final int SHIFT = 52;
  public static final int SET_VALUE = 54;
  public static final int TOKEN = 56;
  public static final int BAD_WHITESPACE = 58;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
     6,  6, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\42\1\57\2\42"+
    "\1\0\1\60\2\0\1\61\1\0\1\62\1\63\1\64"+
    "\1\65\1\35\1\66\1\37\1\67\1\70\1\42\1\43"+
    "\1\71\1\45\1\46\1\72\1\73\1\51\1\74\1\75"+
    "\1\54\1\76\1\56\1\42\1\77\2\42\1\0\1\100"+
    "\1\0\1\101\53\0\1\61\12\0\1\61\4\0\1\61"+
    "\5\0\27\61\1\0\37\61\1\0\70\61\2\102\115\61"+
    "\1\103\u0142\61\4\0\14\61\16\0\5\61\7\0\1\61"+
    "\1\0\1\61\21\0\165\61\1\0\2\61\2\0\4\61"+
    "\1\0\1\61\6\0\1\61\1\0\3\61\1\0\1\61"+
    "\1\0\24\61\1\0\123\61\1\0\213\61\1\0\255\61"+
    "\1\0\46\61\2\0\1\61\6\0\51\61\10\0\55\61"+
    "\1\0\1\61\1\0\2\61\1\0\2\61\1\0\1\61"+
    "\10\0\33\61\4\0\4\61\35\0\13\61\5\0\100\61"+
    "\12\104\4\0\146\61\1\0\10\61\2\0\12\61\1\0"+
    "\6\61\12\104\3\61\2\0\1\61\20\0\73\61\2\0"+
    "\145\61\16\0\12\104\54\61\4\0\1\61\2\0\1\61"+
    "\2\0\56\61\22\0\34\61\4\0\13\61\65\0\25\61"+
    "\1\0\10\61\25\0\17\61\1\0\201\61\2\0\12\104"+
    "\1\0\23\61\1\0\10\61\2\0\2\61\2\0\26\61"+
    "\1\0\7\61\1\0\1\61\3\0\4\61\2\0\11\61"+
    "\2\0\2\61\2\0\4\61\10\0\1\61\4\0\2\61"+
    "\1\0\5\61\2\0\12\104\2\61\12\0\1\61\1\0"+
    "\1\61\2\0\3\61\1\0\6\61\4\0\2\61\2\0"+
    "\26\61\1\0\7\61\1\0\2\61\1\0\2\61\1\0"+
    "\2\61\2\0\1\61\1\0\5\61\4\0\2\61\2\0"+
    "\3\61\3\0\1\61\7\0\4\61\1\0\1\61\7\0"+
    "\12\104\6\61\13\0\3\61\1\0\11\61\1\0\3\61"+
    "\1\0\26\61\1\0\7\61\1\0\2\61\1\0\5\61"+
    "\2\0\12\61\1\0\3\61\1\0\3\61\2\0\1\61"+
    "\17\0\4\61\2\0\12\104\11\0\7\61\1\0\3\61"+
    "\1\0\10\61\2\0\2\61\2\0\26\61\1\0\7\61"+
    "\1\0\2\61\1\0\5\61\2\0\11\61\2\0\2\61"+
    "\2\0\3\61\10\0\2\61\4\0\2\61\1\0\5\61"+
    "\2\0\12\104\1\0\1\61\20\0\2\61\1\0\6\61"+
    "\3\0\3\61\1\0\4\61\3\0\2\61\1\0\1\61"+
    "\1\0\2\61\3\0\2\61\3\0\3\61\3\0\14\61"+
    "\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\61"+
    "\6\0\1\61\16\0\12\104\20\0\15\61\1\0\3\61"+
    "\1\0\27\61\1\0\20\61\3\0\10\61\1\0\3\61"+
    "\1\0\4\61\7\0\2\61\1\0\3\61\5\0\4\61"+
    "\2\0\12\104\20\0\4\61\1\0\10\61\1\0\3\61"+
    "\1\0\27\61\1\0\12\61\1\0\5\61\2\0\11\61"+
    "\1\0\3\61\1\0\4\61\7\0\2\61\7\0\1\61"+
    "\1\0\4\61\2\0\12\104\1\0\2\61\15\0\4\61"+
    "\1\0\10\61\1\0\3\61\1\0\63\61\1\0\3\61"+
    "\1\0\5\61\5\0\4\61\7\0\5\61\2\0\12\104"+
    "\12\0\6\61\2\0\2\61\1\0\22\61\3\0\30\61"+
    "\1\0\11\61\1\0\1\61\2\0\7\61\3\0\1\61"+
    "\4\0\6\61\1\0\1\61\1\0\10\61\6\0\12\104"+
    "\2\0\2\61\15\0\72\61\5\0\17\61\1\0\12\104"+
    "\47\0\2\61\1\0\1\61\1\0\5\61\1\0\30\61"+
    "\1\0\1\61\1\0\27\61\2\0\5\61\1\0\1\61"+
    "\1\0\6\61\2\0\12\104\2\0\4\61\40\0\1\61"+
    "\27\0\2\61\6\0\12\104\13\0\1\61\1\0\1\61"+
    "\1\0\1\61\4\0\12\61\1\0\44\61\4\0\24\61"+
    "\1\0\22\61\1\0\44\61\11\0\1\61\71\0\100\61"+
    "\12\104\6\0\100\61\12\104\4\61\2\0\46\61\1\0"+
    "\1\61\5\0\1\61\2\0\53\61\1\0\u014d\61\1\0"+
    "\4\61\2\0\7\61\1\0\1\61\1\0\4\61\2\0"+
    "\51\61\1\0\4\61\2\0\41\61\1\0\4\61\2\0"+
    "\7\61\1\0\1\61\1\0\4\61\2\0\17\61\1\0"+
    "\71\61\1\0\4\61\2\0\103\61\2\0\3\61\40\0"+
    "\20\61\20\0\126\61\2\0\6\61\3\0\u016c\61\2\0"+
    "\21\61\1\0\32\61\5\0\113\61\3\0\13\61\7\0"+
    "\15\61\1\0\7\61\13\0\25\61\13\0\24\61\14\0"+
    "\15\61\1\0\3\61\1\0\2\61\14\0\124\61\3\0"+
    "\1\61\4\0\2\61\2\0\12\104\41\0\3\61\2\0"+
    "\12\104\6\0\131\61\7\0\53\61\5\0\106\61\12\0"+
    "\37\61\1\0\14\61\4\0\14\61\12\0\12\104\36\61"+
    "\2\0\5\61\13\0\54\61\4\0\32\61\6\0\12\104"+
    "\46\0\34\61\4\0\77\61\1\0\35\61\2\0\1\61"+
    "\12\104\6\0\12\104\15\0\1\61\10\0\17\61\101\0"+
    "\114\61\4\0\12\104\21\0\11\61\14\0\60\61\12\104"+
    "\72\61\14\0\70\61\10\0\12\104\3\0\3\61\12\104"+
    "\44\61\2\0\11\61\7\0\53\61\2\0\3\61\20\0"+
    "\3\61\1\0\47\61\5\0\372\61\1\0\33\61\2\0"+
    "\6\61\2\0\46\61\2\0\6\61\2\0\10\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\1\0\37\61\2\0"+
    "\65\61\1\0\7\61\1\0\1\61\3\0\3\61\1\0"+
    "\7\61\3\0\4\61\2\0\6\61\4\0\15\61\5\0"+
    "\3\61\1\0\7\61\102\0\2\61\23\0\1\61\34\0"+
    "\1\61\15\0\1\61\20\0\15\61\63\0\41\61\21\0"+
    "\1\61\4\0\1\61\2\0\12\61\1\0\1\61\3\0"+
    "\5\61\6\0\1\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\105\3\61\1\0\13\61\2\0\4\61\5\0\5\61"+
    "\4\0\1\61\21\0\51\61\u022d\0\64\61\26\0\57\61"+
    "\1\0\57\61\1\0\205\61\6\0\11\61\14\0\46\61"+
    "\1\0\1\61\5\0\1\61\2\0\70\61\7\0\1\61"+
    "\17\0\30\61\11\0\7\61\1\0\7\61\1\0\7\61"+
    "\1\0\7\61\1\0\7\61\1\0\7\61\1\0\7\61"+
    "\1\0\7\61\1\0\40\61\57\0\1\61\325\0\3\61"+
    "\31\0\17\61\1\0\5\61\2\0\5\61\4\0\126\61"+
    "\2\0\2\61\2\0\3\61\1\0\132\61\1\0\4\61"+
    "\5\0\53\61\1\0\136\61\21\0\33\61\65\0\306\61"+
    "\112\0\360\61\20\0\215\61\103\0\56\61\2\0\15\61"+
    "\3\0\20\61\12\104\2\61\24\0\63\61\1\0\12\61"+
    "\1\0\163\61\45\0\11\61\2\0\147\61\2\0\65\61"+
    "\2\0\5\61\60\0\61\61\30\0\64\61\14\0\106\61"+
    "\12\0\12\104\6\0\30\61\3\0\1\61\1\0\3\61"+
    "\12\104\44\61\2\0\44\61\14\0\35\61\3\0\101\61"+
    "\16\0\1\61\12\104\6\0\20\61\12\104\5\61\1\0"+
    "\67\61\11\0\16\61\2\0\12\104\6\0\27\61\3\0"+
    "\111\61\30\0\3\61\2\0\20\61\2\0\5\61\12\0"+
    "\6\61\2\0\6\61\2\0\6\61\11\0\7\61\1\0"+
    "\7\61\1\0\53\61\1\0\14\61\10\0\173\61\1\0"+
    "\2\61\2\0\12\104\6\0\244\61\14\0\27\61\4\0"+
    "\61\61\u0104\0\156\61\2\0\152\61\46\0\7\61\14\0"+
    "\5\61\5\0\14\61\1\0\15\61\1\0\5\61\1\0"+
    "\1\61\1\0\2\61\1\0\2\61\1\0\154\61\41\0"+
    "\153\61\22\0\100\61\2\0\66\61\50\0\14\61\4\0"+
    "\20\61\20\0\20\61\3\0\2\61\30\0\3\61\40\0"+
    "\5\61\1\0\207\61\23\0\12\104\7\0\32\61\4\0"+
    "\1\61\1\0\32\61\13\0\131\61\3\0\6\61\2\0"+
    "\6\61\2\0\6\61\2\0\3\61\43\0\14\61\1\0"+
    "\32\61\1\0\23\61\1\0\2\61\1\0\17\61\2\0"+
    "\16\61\42\0\173\61\105\0\65\61\210\0\1\61\202\0"+
    "\35\61\3\0\61\61\17\0\1\61\37\0\40\61\15\0"+
    "\36\61\5\0\53\61\5\0\36\61\2\0\44\61\4\0"+
    "\10\61\1\0\5\61\52\0\236\61\2\0\12\104\6\0"+
    "\44\61\4\0\44\61\4\0\50\61\10\0\64\61\234\0"+
    "\67\61\11\0\26\61\12\0\10\61\230\0\6\61\2\0"+
    "\1\61\1\0\54\61\1\0\2\61\3\0\1\61\2\0"+
    "\27\61\12\0\27\61\11\0\37\61\101\0\23\61\1\0"+
    "\2\61\12\0\26\61\12\0\32\61\106\0\70\61\6\0"+
    "\2\61\100\0\4\61\1\0\2\61\5\0\10\61\1\0"+
    "\3\61\1\0\35\61\2\0\3\61\4\0\1\61\40\0"+
    "\35\61\3\0\35\61\43\0\10\61\1\0\36\61\31\0"+
    "\66\61\12\0\26\61\12\0\23\61\15\0\22\61\156\0"+
    "\111\61\67\0\63\61\15\0\63\61\15\0\50\61\10\0"+
    "\12\104\306\0\35\61\12\0\1\61\10\0\41\61\217\0"+
    "\27\61\11\0\107\61\37\0\12\104\17\0\74\61\25\0"+
    "\31\61\7\0\12\104\6\0\65\61\1\0\12\104\4\0"+
    "\3\61\11\0\44\61\2\0\1\61\11\0\105\61\4\0"+
    "\4\61\3\0\12\104\1\61\1\0\1\61\43\0\22\61"+
    "\1\0\45\61\6\0\1\61\101\0\7\61\1\0\1\61"+
    "\1\0\4\61\1\0\17\61\1\0\12\61\7\0\73\61"+
    "\5\0\12\104\6\0\4\61\1\0\10\61\2\0\2\61"+
    "\2\0\26\61\1\0\7\61\1\0\2\61\1\0\5\61"+
    "\1\0\12\61\2\0\2\61\2\0\3\61\2\0\1\61"+
    "\6\0\1\61\5\0\7\61\2\0\7\61\3\0\5\61"+
    "\213\0\113\61\5\0\12\104\4\0\2\61\40\0\106\61"+
    "\1\0\1\61\10\0\12\104\246\0\66\61\2\0\11\61"+
    "\27\0\6\61\42\0\101\61\3\0\1\61\13\0\12\104"+
    "\46\0\71\61\7\0\12\104\66\0\33\61\2\0\17\61"+
    "\4\0\12\104\306\0\73\61\145\0\100\61\12\104\25\0"+
    "\1\61\240\0\10\61\2\0\56\61\2\0\10\61\1\0"+
    "\2\61\33\0\77\61\10\0\1\61\10\0\112\61\3\0"+
    "\1\61\42\0\71\61\7\0\11\61\1\0\55\61\1\0"+
    "\11\61\17\0\12\104\30\0\36\61\2\0\26\61\1\0"+
    "\16\61\111\0\7\61\1\0\2\61\1\0\54\61\3\0"+
    "\1\61\1\0\2\61\1\0\11\61\10\0\12\104\6\0"+
    "\6\61\1\0\2\61\1\0\45\61\1\0\2\61\1\0"+
    "\6\61\7\0\12\104\u0136\0\27\61\11\0\232\61\146\0"+
    "\157\61\21\0\304\61\274\0\57\61\321\0\107\61\271\0"+
    "\71\61\7\0\37\61\1\0\12\104\146\0\36\61\2\0"+
    "\5\61\13\0\67\61\11\0\4\61\14\0\12\104\11\0"+
    "\25\61\5\0\23\61\260\0\100\61\200\0\113\61\4\0"+
    "\71\61\7\0\21\61\100\0\2\61\1\0\1\61\34\0"+
    "\370\61\10\0\363\61\15\0\37\61\61\0\3\61\21\0"+
    "\4\61\10\0\u018c\61\4\0\153\61\5\0\15\61\3\0"+
    "\11\61\7\0\12\61\3\0\2\61\306\0\5\61\3\0"+
    "\6\61\10\0\10\61\2\0\7\61\36\0\4\61\224\0"+
    "\3\61\273\0\125\61\1\0\107\61\1\0\2\61\2\0"+
    "\1\61\2\0\2\61\2\0\4\61\1\0\14\61\1\0"+
    "\1\61\1\0\7\61\1\0\101\61\1\0\4\61\2\0"+
    "\10\61\1\0\7\61\1\0\34\61\1\0\4\61\1\0"+
    "\5\61\1\0\1\61\3\0\7\61\1\0\u0154\61\2\0"+
    "\31\61\1\0\31\61\1\0\37\61\1\0\31\61\1\0"+
    "\37\61\1\0\31\61\1\0\37\61\1\0\31\61\1\0"+
    "\37\61\1\0\31\61\1\0\10\61\2\0\62\104\67\61"+
    "\4\0\62\61\10\0\1\61\16\0\1\61\26\0\5\61"+
    "\1\0\17\61\120\0\7\61\1\0\21\61\2\0\7\61"+
    "\1\0\2\61\1\0\5\61\325\0\55\61\3\0\16\61"+
    "\2\0\12\104\4\0\1\61\u0171\0\60\61\12\104\6\0"+
    "\305\61\13\0\7\61\51\0\114\61\4\0\12\104\246\0"+
    "\4\61\1\0\33\61\1\0\2\61\1\0\1\61\2\0"+
    "\1\61\1\0\12\61\1\0\4\61\1\0\1\61\1\0"+
    "\1\61\6\0\1\61\4\0\1\61\1\0\1\61\1\0"+
    "\1\61\1\0\3\61\1\0\2\61\1\0\1\61\2\0"+
    "\1\61\1\0\1\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\1\0\2\61\1\0\1\61\2\0\4\61\1\0"+
    "\7\61\1\0\4\61\1\0\4\61\1\0\1\61\1\0"+
    "\12\61\1\0\21\61\5\0\3\61\1\0\5\61\1\0"+
    "\21\61\164\0\32\61\6\0\32\61\6\0\32\61\166\0"+
    "\327\61\51\0\65\61\13\0\336\61\2\0\u0182\61\16\0"+
    "\u0131\61\37\0\36\61\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\1\1\2\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\3\1\1\3\1\10"+
    "\1\11\12\10\1\12\1\13\2\14\1\15\2\14\1\16"+
    "\1\17\3\16\1\20\1\21\1\22\1\4\3\21\1\4"+
    "\1\23\1\4\1\24\1\25\1\6\1\26\1\27\4\26"+
    "\1\30\1\31\1\32\14\10\1\33\2\4\1\34\1\35"+
    "\3\34\1\36\1\37\1\4\1\31\1\40\1\41\3\40"+
    "\1\4\7\40\1\42\2\43\3\42\1\44\1\45\1\46"+
    "\7\45\1\14\1\47\1\20\1\50\3\20\1\51\1\52"+
    "\2\51\1\53\2\51\1\54\1\4\4\51\1\55\1\56"+
    "\1\57\1\4\2\56\1\60\1\4\1\61\3\4\1\62"+
    "\1\63\1\64\1\65\1\4\1\66\1\67\3\66\1\70"+
    "\1\71\2\72\2\71\4\72\1\73\1\0\1\74\1\1"+
    "\1\75\1\1\1\3\1\0\1\1\1\0\1\76\1\77"+
    "\1\0\1\77\1\100\1\1\4\10\1\101\12\10\1\102"+
    "\1\103\4\10\1\14\1\0\1\16\1\104\1\16\1\0"+
    "\1\16\2\105\1\106\1\4\1\107\1\0\1\110\1\26"+
    "\1\0\1\26\1\111\1\0\1\112\1\10\1\0\5\10"+
    "\1\113\12\10\1\114\1\115\4\10\1\116\2\4\1\0"+
    "\1\117\1\34\1\0\3\34\1\120\1\0\1\121\2\40"+
    "\1\0\1\40\1\0\1\122\1\123\1\40\1\124\1\40"+
    "\1\125\3\40\1\0\1\126\1\42\1\127\1\42\1\0"+
    "\1\42\1\0\1\130\1\45\1\0\11\45\1\74\2\51"+
    "\1\130\2\51\1\131\5\51\1\132\1\56\1\132\1\133"+
    "\1\134\1\0\2\135\1\4\1\136\1\137\1\0\1\140"+
    "\1\66\1\141\1\66\1\0\1\66\3\71\1\72\1\74"+
    "\1\0\1\74\1\0\1\74\1\142\1\143\1\77\1\76"+
    "\5\10\1\144\6\10\1\145\3\10\1\146\1\10\1\16"+
    "\2\0\1\110\1\0\1\110\1\0\1\110\1\112\1\0"+
    "\1\112\1\0\1\112\5\10\1\147\6\10\1\150\3\10"+
    "\1\151\1\10\1\4\1\117\1\0\1\117\1\0\1\117"+
    "\1\0\1\152\1\153\1\121\1\0\1\121\1\154\1\0"+
    "\1\121\5\40\1\126\1\0\1\126\1\0\1\126\1\130"+
    "\1\0\1\130\1\0\1\130\1\45\1\155\2\45\2\74"+
    "\2\130\1\131\1\132\1\156\3\157\1\140\1\0\1\140"+
    "\1\0\1\140\1\160\1\161\2\74\1\143\3\10\1\162"+
    "\2\10\1\163\1\164\1\165\1\10\1\166\1\167\1\10"+
    "\1\170\2\10\2\16\2\110\2\112\3\10\1\171\2\10"+
    "\1\172\1\173\1\174\1\10\1\175\1\176\1\10\1\177"+
    "\2\10\2\4\2\117\2\121\1\40\1\0\3\40\2\126"+
    "\2\130\3\45\2\140\1\200\1\10\1\201\1\202\2\10"+
    "\1\203\1\204\1\10\1\205\1\206\2\10\1\207\1\4"+
    "\1\40\1\210\1\0\2\40\2\45\1\211\1\212\2\10"+
    "\1\213\2\10\1\31\1\40\1\210\2\40\2\45\4\10"+
    "\1\31\1\210\1\0\1\40\1\45\1\214\1\215\1\216"+
    "\1\217\1\31\2\210\1\45\1\0\1\45\1\210\1\220";

  private static int [] zzUnpackAction() {
    int [] result = new int[587];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a1e\0\u0a64"+
    "\0\u0aaa\0\u0a1e\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u0a1e"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u0a1e"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482"+
    "\0\u14c8\0\u150e\0\u1554\0\u0a1e\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u0a1e\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06"+
    "\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36"+
    "\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u07ee\0\u350c\0\u07ee\0\u3552\0\u0a1e\0\u3598\0\u35de\0\u3624"+
    "\0\u0a1e\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u3854\0\u389a\0\u0c4e\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u0c4e\0\u0c4e\0\u3b9c"+
    "\0\u3be2\0\u3c28\0\u3c6e\0\u0a1e\0\u3cb4\0\u3cfa\0\u113a\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u0a1e\0\u1298\0\u3e12\0\u3e58\0\u143c\0\u3e9e"+
    "\0\u159a\0\u3ee4\0\u3f2a\0\u3f70\0\u159a\0\u3fb6\0\u0c4e\0\u3ffc"+
    "\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u0c4e\0\u41e6"+
    "\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416"+
    "\0\u445c\0\u0c4e\0\u0c4e\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u143c"+
    "\0\u45ba\0\u4600\0\u4646\0\u1c2a\0\u468c\0\u46d2\0\u4718\0\u475e"+
    "\0\u47a4\0\u143c\0\u47ea\0\u1ea0\0\u4830\0\u4876\0\u48bc\0\u4902"+
    "\0\u1ffe\0\u1ffe\0\u1ea0\0\u4948\0\u1ea0\0\u498e\0\u1ea0\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u222e\0\u4aec\0\u222e\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u23d2\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62"+
    "\0\u4da8\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u2832\0\u4f4c"+
    "\0\u4f92\0\u2832\0\u4fd8\0\u501e\0\u0a1e\0\u5064\0\u50aa\0\u50f0"+
    "\0\u5136\0\u517c\0\u2c92\0\u51c2\0\u2c06\0\u5208\0\u0a1e\0\u524e"+
    "\0\u0a1e\0\u2f08\0\u5294\0\u0a1e\0\u143c\0\u52da\0\u3066\0\u5320"+
    "\0\u3066\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u0a1e"+
    "\0\u0a1e\0\u550a\0\u08c0\0\u5550\0\u0992\0\u3624\0\u0a1e\0\u5596"+
    "\0\u0b7c\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u0c4e\0\u573a"+
    "\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898\0\u0c4e\0\u58de\0\u5924"+
    "\0\u596a\0\u59b0\0\u59f6\0\u0a1e\0\u5a3c\0\u5a82\0\u0a1e\0\u5ac8"+
    "\0\u1626\0\u5b0e\0\u166c\0\u0a1e\0\u5b54\0\u1810\0\u5b9a\0\u1856"+
    "\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u0c4e\0\u5d3e\0\u5d84"+
    "\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u0c4e\0\u5ee2\0\u5f28\0\u5f6e"+
    "\0\u5fb4\0\u5ffa\0\u6040\0\u0a1e\0\u6086\0\u1cb6\0\u60cc\0\u1cfc"+
    "\0\u6112\0\u6158\0\u0a1e\0\u0a1e\0\u619e\0\u1f2c\0\u1ea0\0\u61e4"+
    "\0\u1fb8\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342\0\u0a1e\0\u6388"+
    "\0\u2300\0\u63ce\0\u238c\0\u0a1e\0\u6414\0\u245e\0\u645a\0\u24a4"+
    "\0\u64a0\0\u23d2\0\u64e6\0\u652c\0\u28be\0\u2904\0\u2990\0\u29d6"+
    "\0\u2832\0\u51c2\0\u0a1e\0\u2daa\0\u6572\0\u0a1e\0\u0a1e\0\u65b8"+
    "\0\u30f2\0\u65fe\0\u317e\0\u320a\0\u320a\0\u34c6\0\u3598\0\u366a"+
    "\0\u6644\0\u668a\0\u66d0\0\u0c4e\0\u6716\0\u675c\0\u0c4e\0\u0c4e"+
    "\0\u0c4e\0\u67a2\0\u0c4e\0\u0c4e\0\u67e8\0\u0c4e\0\u682e\0\u6874"+
    "\0\u3cb4\0\u3d86\0\u3e9e\0\u3f2a\0\u3fb6\0\u4042\0\u68ba\0\u6900"+
    "\0\u6946\0\u0c4e\0\u698c\0\u69d2\0\u0c4e\0\u0c4e\0\u0c4e\0\u6a18"+
    "\0\u0c4e\0\u0c4e\0\u6a5e\0\u0c4e\0\u6aa4\0\u6aea\0\u6b30\0\u6b76"+
    "\0\u4646\0\u46d2\0\u47ea\0\u48bc\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e"+
    "\0\u6cd4\0\u4aa6\0\u4b78\0\u4c04\0\u4c90\0\u6d1a\0\u6d60\0\u6da6"+
    "\0\u52da\0\u53ac\0\u0c4e\0\u6dec\0\u0c4e\0\u0c4e\0\u6e32\0\u6e78"+
    "\0\u0c4e\0\u0c4e\0\u6ebe\0\u0c4e\0\u0c4e\0\u6f04\0\u6f4a\0\u0c4e"+
    "\0\u6f90\0\u6fd6\0\u0a1e\0\u701c\0\u7062\0\u70a8\0\u70ee\0\u7134"+
    "\0\u23d2\0\u0c4e\0\u717a\0\u71c0\0\u0c4e\0\u7206\0\u724c\0\u7292"+
    "\0\u72d8\0\u701c\0\u731e\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c"+
    "\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620\0\u7666\0\u0c4e"+
    "\0\u0c4e\0\u0c4e\0\u0c4e\0\u143c\0\u76ac\0\u1ea0\0\u76f2\0\u7738"+
    "\0\u777e\0\u77c4\0\u23d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[587];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\1\37\1\40\1\0\1\36\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\36\2\47\5\36\1\50\1\47"+
    "\1\51\1\52\1\53\1\54\21\55\1\56\5\55\2\36"+
    "\12\55\1\56\3\55\1\57\5\36\1\60\1\61\2\0"+
    "\3\60\1\47\1\60\2\47\1\60\2\47\5\60\5\47"+
    "\1\60\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\60\1\71\3\60\1\72\5\60\1\73\6\60\1\62"+
    "\1\63\1\64\1\65\1\67\1\60\1\71\4\60\1\73"+
    "\2\60\1\47\1\60\1\71\1\73\2\60\1\74\1\75"+
    "\1\40\1\0\3\74\1\76\1\74\2\47\1\74\2\47"+
    "\5\74\2\47\1\77\1\100\1\101\50\74\1\102\5\74"+
    "\1\103\1\104\1\40\1\0\1\103\1\105\1\106\1\76"+
    "\1\107\2\47\1\103\2\47\5\103\2\47\1\77\1\110"+
    "\1\101\50\103\1\102\5\103\1\111\1\112\1\40\1\0"+
    "\3\111\1\76\1\111\2\47\1\111\1\113\1\47\1\114"+
    "\1\111\1\115\2\111\2\47\1\77\1\47\1\101\1\111"+
    "\27\116\2\111\16\116\1\102\5\111\1\117\1\120\1\40"+
    "\1\0\3\117\1\76\1\117\2\47\1\117\2\47\5\117"+
    "\2\47\1\77\1\47\1\101\17\117\1\121\22\117\1\121"+
    "\5\117\1\102\5\117\1\122\1\123\1\40\1\0\3\122"+
    "\1\47\1\122\2\47\1\122\2\47\5\122\1\124\4\47"+
    "\50\122\1\47\5\122\1\125\1\126\1\40\1\0\1\125"+
    "\1\127\1\125\1\76\1\130\2\47\1\125\2\47\2\125"+
    "\1\131\2\125\2\47\1\77\1\47\1\101\1\125\27\132"+
    "\2\125\16\132\1\102\5\125\1\117\1\133\1\40\1\0"+
    "\3\117\1\76\1\117\2\47\1\117\2\47\3\117\2\134"+
    "\2\47\1\77\1\47\1\101\1\117\6\134\23\117\5\134"+
    "\11\117\1\102\5\117\1\60\1\135\1\40\1\0\1\60"+
    "\1\136\1\60\1\76\1\137\2\47\1\60\2\47\5\60"+
    "\2\47\1\77\1\47\1\101\1\60\1\140\1\141\1\142"+
    "\1\143\1\144\1\145\1\146\1\60\1\147\3\60\1\150"+
    "\5\60\1\151\6\60\1\140\1\141\1\142\1\143\1\145"+
    "\1\60\1\147\4\60\1\151\2\60\1\102\1\60\1\147"+
    "\1\151\2\60\1\117\1\152\1\40\1\0\3\117\1\76"+
    "\1\117\2\47\1\117\2\47\2\117\1\153\2\154\2\47"+
    "\1\77\1\47\1\101\50\117\1\102\5\117\1\155\1\156"+
    "\1\40\1\0\1\155\1\157\1\155\1\76\1\160\2\47"+
    "\1\155\2\47\5\155\2\47\1\77\1\47\1\101\17\155"+
    "\1\161\22\155\1\161\5\155\1\102\6\155\1\162\1\40"+
    "\1\0\1\155\1\157\1\155\1\76\1\160\2\47\1\155"+
    "\2\47\5\155\2\47\1\77\1\47\1\101\50\155\1\102"+
    "\5\155\1\117\1\163\1\40\1\0\3\117\1\76\1\117"+
    "\2\47\1\117\2\47\2\117\1\164\2\165\2\47\1\77"+
    "\1\47\1\101\50\117\1\102\5\117\1\166\1\167\1\40"+
    "\1\0\1\166\1\170\1\171\1\76\1\172\1\173\1\47"+
    "\1\166\2\47\2\166\1\174\2\166\2\47\1\77\1\47"+
    "\1\101\4\166\1\175\1\176\3\166\1\177\11\166\1\200"+
    "\1\201\1\202\7\166\1\175\2\166\1\177\4\166\1\200"+
    "\1\202\1\166\1\102\1\166\1\177\1\200\2\166\1\203"+
    "\1\204\1\205\1\0\1\203\1\206\1\207\1\47\1\210"+
    "\1\47\1\211\1\203\2\47\5\203\5\47\50\203\1\47"+
    "\5\203\1\212\1\213\1\40\1\0\1\212\1\214\1\212"+
    "\1\47\1\215\2\47\1\212\2\47\5\212\5\47\4\212"+
    "\1\216\1\217\1\212\1\220\4\212\1\221\1\212\1\222"+
    "\16\212\1\216\3\212\1\221\6\212\1\47\5\212\1\223"+
    "\1\224\1\40\1\0\3\223\1\225\1\223\1\45\1\47"+
    "\1\223\2\47\3\223\2\226\2\47\1\227\1\47\1\230"+
    "\50\223\1\231\5\223\1\232\1\233\1\40\1\0\1\232"+
    "\1\234\1\232\1\225\1\235\1\45\1\47\1\232\2\47"+
    "\5\232\2\47\1\227\1\47\1\230\50\232\1\231\6\232"+
    "\1\236\1\40\1\0\1\232\1\237\1\232\1\225\1\240"+
    "\1\45\1\47\1\232\2\47\3\232\2\241\2\47\1\227"+
    "\1\242\1\230\5\232\1\243\1\232\1\244\4\232\1\245"+
    "\1\232\1\246\22\232\1\245\6\232\1\231\5\232\1\122"+
    "\1\247\1\40\1\0\3\122\1\47\1\122\2\47\1\122"+
    "\2\47\5\122\5\47\50\122\1\47\5\122\1\250\1\251"+
    "\1\40\1\0\3\250\1\76\1\250\2\47\1\250\1\252"+
    "\1\47\2\250\1\253\2\250\2\47\1\77\1\47\1\101"+
    "\1\250\27\254\2\250\16\254\1\102\5\250\2\255\1\40"+
    "\103\255\1\256\1\257\1\40\1\0\3\256\1\47\1\256"+
    "\2\47\1\260\1\261\1\47\1\260\1\256\1\262\2\256"+
    "\3\47\1\263\1\47\50\256\1\47\5\256\1\264\1\265"+
    "\1\40\1\0\3\264\1\76\1\264\2\47\1\264\2\47"+
    "\5\264\2\47\1\77\1\47\1\101\50\264\1\102\5\264"+
    "\1\117\1\266\1\40\1\0\3\117\1\76\1\117\2\47"+
    "\1\117\2\47\2\117\1\267\2\117\2\47\1\77\1\47"+
    "\1\101\50\117\1\102\5\117\1\270\1\271\1\40\1\0"+
    "\1\270\1\272\1\273\1\76\1\274\2\47\1\270\2\47"+
    "\3\270\2\275\2\47\1\77\1\110\1\101\50\270\1\102"+
    "\5\270\1\276\1\277\1\300\1\0\1\301\1\276\1\302"+
    "\1\303\1\276\2\47\1\276\2\47\5\276\2\47\1\304"+
    "\1\47\1\305\50\276\1\306\5\276\1\117\1\307\2\0"+
    "\3\117\1\47\1\117\2\47\1\117\2\47\5\117\5\47"+
    "\50\117\1\47\5\117\1\36\3\0\3\36\1\0\1\36"+
    "\2\0\1\36\2\0\5\36\5\0\50\36\1\0\5\36"+
    "\1\0\1\37\106\0\1\40\103\0\1\41\1\310\1\0"+
    "\1\310\1\41\1\311\1\41\1\310\1\41\2\310\1\41"+
    "\2\310\5\41\5\310\30\41\1\312\17\41\1\310\5\41"+
    "\1\36\3\0\3\36\1\0\1\36\2\0\1\36\2\0"+
    "\3\36\2\313\5\0\50\36\1\0\1\314\4\36\7\0"+
    "\1\315\76\0\1\44\1\316\1\0\1\316\3\44\1\316"+
    "\1\311\2\316\1\44\2\316\5\44\5\316\30\44\1\317"+
    "\17\44\1\316\5\44\106\320\131\0\1\321\107\0\1\315"+
    "\107\0\1\315\56\0\1\322\3\0\3\322\1\0\1\322"+
    "\2\0\1\322\2\0\5\322\1\323\4\0\22\322\1\324"+
    "\21\322\1\324\3\322\1\0\5\322\1\36\3\0\3\36"+
    "\1\0\1\36\2\0\1\36\2\0\5\36\1\325\4\0"+
    "\1\36\27\55\2\36\16\55\1\0\6\36\3\0\3\36"+
    "\1\0\1\36\2\0\1\36\2\0\5\36\1\325\4\0"+
    "\1\36\4\55\1\326\22\55\2\36\16\55\1\0\5\36"+
    "\100\0\1\315\5\0\1\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\50\60\1\0\5\60"+
    "\1\0\1\61\104\0\1\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\23\60\1\327\1\330"+
    "\20\60\1\327\2\60\1\0\2\60\1\327\3\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\22\60\1\331\21\60\1\331\3\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\1\60\1\332\2\60\1\333\3\60\1\334\3\60\1\335"+
    "\2\60\1\336\12\60\1\332\2\60\1\333\1\60\1\334"+
    "\1\60\1\335\1\336\5\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\1\60"+
    "\1\337\30\60\1\337\15\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\3\60"+
    "\1\340\10\60\1\341\1\60\1\342\10\60\1\343\4\60"+
    "\1\340\4\60\1\341\5\60\1\343\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\17\60\1\344\22\60\1\344\5\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\17\60\1\345\22\60\1\345\5\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\6\60\1\346\27\60\1\346\11\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\4\60\1\347\6\60\1\350\3\60\1\351\15\60\1\347"+
    "\4\60\1\351\5\60\1\0\4\60\1\350\1\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\5\60\1\352\2\60\1\353\26\60\1\353\10\60\1\0"+
    "\5\60\1\74\3\0\3\74\1\0\1\74\2\0\1\74"+
    "\2\0\5\74\5\0\50\74\1\0\5\74\1\0\1\75"+
    "\113\0\1\354\123\0\1\354\107\0\1\354\156\0\1\354"+
    "\5\0\1\103\3\0\3\103\1\0\1\103\2\0\1\103"+
    "\2\0\5\103\5\0\50\103\1\0\5\103\1\0\1\104"+
    "\104\0\1\105\1\355\1\0\1\355\1\105\1\103\1\105"+
    "\1\355\1\105\2\355\1\105\2\355\5\105\5\355\30\105"+
    "\1\356\17\105\1\355\5\105\1\103\3\0\3\103\1\0"+
    "\1\103\2\0\1\103\2\0\3\103\2\357\5\0\50\103"+
    "\1\0\1\360\4\103\1\107\1\361\1\0\1\361\3\107"+
    "\1\361\1\103\2\361\1\107\2\361\5\107\5\361\30\107"+
    "\1\362\17\107\1\361\5\107\1\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\5\111\5\0\50\111\1\0"+
    "\5\111\1\0\1\112\166\0\2\363\3\0\2\363\1\0"+
    "\1\363\1\0\4\363\6\0\1\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\5\111\5\0\32\111\2\364"+
    "\3\111\2\364\1\111\1\364\1\111\4\364\1\0\6\111"+
    "\3\0\3\111\1\0\1\111\2\0\1\111\2\0\5\111"+
    "\5\0\35\111\1\364\3\111\1\364\3\111\1\364\2\111"+
    "\1\0\6\111\3\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\5\111\1\365\4\0\1\111\27\116\2\111\16\116"+
    "\1\0\5\111\1\117\3\0\3\117\1\0\1\117\2\0"+
    "\1\117\2\0\5\117\5\0\50\117\1\0\5\117\1\0"+
    "\1\120\104\0\1\117\3\0\3\117\1\0\1\117\2\0"+
    "\1\117\2\0\5\117\5\0\6\117\1\366\7\117\1\367"+
    "\17\117\1\366\11\117\1\0\5\117\1\122\3\0\3\122"+
    "\1\0\1\122\2\0\1\122\2\0\5\122\5\0\50\122"+
    "\1\0\5\122\1\0\1\123\104\0\1\125\3\0\3\125"+
    "\1\0\1\125\2\0\1\125\2\0\5\125\5\0\50\125"+
    "\1\0\5\125\1\0\1\126\104\0\1\127\1\370\1\0"+
    "\1\370\1\127\1\371\1\127\1\370\1\127\2\370\1\127"+
    "\2\370\5\127\5\370\30\127\1\372\17\127\1\370\5\127"+
    "\1\130\1\373\1\0\1\373\3\130\1\373\1\371\2\373"+
    "\1\130\2\373\5\130\5\373\30\130\1\374\17\130\1\373"+
    "\5\130\1\125\3\0\3\125\1\0\1\125\2\0\1\125"+
    "\2\0\5\125\5\0\35\125\1\375\12\125\1\0\6\125"+
    "\3\0\3\125\1\0\1\125\2\0\1\125\2\0\5\125"+
    "\1\325\4\0\1\125\27\132\2\125\16\132\1\0\5\125"+
    "\1\0\1\133\104\0\1\117\3\0\3\117\1\0\1\117"+
    "\2\0\1\117\2\0\3\117\2\134\5\0\1\117\6\134"+
    "\23\117\5\134\11\117\1\0\5\117\1\0\1\135\104\0"+
    "\1\136\1\376\1\0\1\376\1\136\1\377\1\136\1\376"+
    "\1\136\2\376\1\136\2\376\5\136\5\376\30\136\1\u0100"+
    "\17\136\1\376\5\136\1\137\1\u0101\1\0\1\u0101\3\137"+
    "\1\u0101\1\377\2\u0101\1\137\2\u0101\5\137\5\u0101\30\137"+
    "\1\u0102\17\137\1\u0101\5\137\1\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\23\60\1\u0103"+
    "\1\u0104\20\60\1\u0103\2\60\1\0\2\60\1\u0103\3\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\22\60\1\u0105\21\60\1\u0105\3\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\1\60\1\u0106\2\60\1\u0107\3\60\1\u0108\3\60"+
    "\1\u0109\2\60\1\u010a\12\60\1\u0106\2\60\1\u0107\1\60"+
    "\1\u0108\1\60\1\u0109\1\u010a\5\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\1\60\1\u010b\30\60\1\u010b\15\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\3\60\1\u010c\10\60\1\u010d\1\60\1\u010e\10\60\1\u010f"+
    "\4\60\1\u010c\4\60\1\u010d\5\60\1\u010f\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\17\60\1\u0110\22\60\1\u0110\5\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\17\60\1\u0111\22\60\1\u0111\5\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\6\60\1\u0112\27\60\1\u0112\11\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\4\60\1\u0113\6\60\1\u0114\3\60\1\u0115\15\60"+
    "\1\u0113\4\60\1\u0115\5\60\1\0\4\60\1\u0114\1\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\5\60\1\u0116\2\60\1\u0117\26\60\1\u0117\10\60"+
    "\1\0\5\60\1\0\1\152\104\0\1\117\3\0\3\117"+
    "\1\0\1\117\2\0\1\117\2\0\5\117\5\0\24\117"+
    "\1\u0118\23\117\1\0\6\117\3\0\3\117\1\0\1\117"+
    "\2\0\1\117\2\0\3\u0119\2\u011a\5\0\50\117\1\0"+
    "\5\117\1\155\3\0\3\155\1\0\1\155\2\0\1\155"+
    "\2\0\5\155\5\0\50\155\1\0\5\155\1\0\1\156"+
    "\104\0\1\157\1\u011b\1\0\1\u011b\1\157\1\u011c\1\157"+
    "\1\u011b\1\157\2\u011b\1\157\2\u011b\5\157\5\u011b\30\157"+
    "\1\u011d\17\157\1\u011b\5\157\1\160\1\u011e\1\0\1\u011e"+
    "\3\160\1\u011e\1\u011c\2\u011e\1\160\2\u011e\5\160\5\u011e"+
    "\30\160\1\u011f\17\160\1\u011e\5\160\1\155\3\0\3\155"+
    "\1\0\1\155\2\0\1\155\2\0\5\155\5\0\6\155"+
    "\1\u0120\7\155\1\u0121\17\155\1\u0120\11\155\1\0\5\155"+
    "\1\0\1\162\105\0\1\163\104\0\1\117\3\0\3\117"+
    "\1\0\1\117\2\0\1\117\2\0\5\117\5\0\2\117"+
    "\1\u0122\30\117\1\u0122\14\117\1\0\6\117\3\0\3\117"+
    "\1\0\1\117\2\0\1\117\2\0\3\117\2\165\5\0"+
    "\50\117\1\0\5\117\1\166\3\0\3\166\1\0\1\166"+
    "\2\0\1\166\2\0\5\166\5\0\50\166\1\0\5\166"+
    "\1\0\1\167\104\0\1\170\1\u0123\1\0\1\u0123\1\170"+
    "\1\u0124\1\170\1\u0123\1\170\2\u0123\1\170\2\u0123\5\170"+
    "\5\u0123\30\170\1\u0125\17\170\1\u0123\5\170\1\166\3\0"+
    "\2\166\1\u0126\1\0\1\166\2\0\1\166\2\0\5\166"+
    "\5\0\50\166\1\0\5\166\1\172\1\u0127\1\0\1\u0127"+
    "\3\172\1\u0127\1\u0124\2\u0127\1\172\2\u0127\5\172\5\u0127"+
    "\30\172\1\u0128\17\172\1\u0127\5\172\12\u0129\1\u012a\73\u0129"+
    "\1\166\3\0\3\166\1\0\1\166\2\0\1\166\2\0"+
    "\5\166\5\0\35\166\2\u012b\2\166\1\u012b\2\166\1\u012b"+
    "\3\166\1\0\6\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\5\0\5\166\1\u012c\11\166\1\u012d"+
    "\22\166\1\u012d\5\166\1\0\6\166\3\0\3\166\1\0"+
    "\1\166\2\0\1\166\2\0\5\166\5\0\17\166\1\u012e"+
    "\22\166\1\u012e\5\166\1\0\6\166\3\0\3\166\1\0"+
    "\1\166\2\0\1\166\2\0\5\166\5\0\16\166\1\u012f"+
    "\31\166\1\0\6\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\5\0\13\166\1\u0130\34\166\1\0"+
    "\4\166\1\u0130\1\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\5\0\17\166\1\u0131\22\166\1\u0131"+
    "\5\166\1\0\6\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\5\0\23\166\1\u0132\21\166\1\u0132"+
    "\2\166\1\0\2\166\1\u0132\2\166\1\203\3\0\3\203"+
    "\1\0\1\203\2\0\1\203\2\0\5\203\5\0\50\203"+
    "\1\0\5\203\1\0\1\204\106\0\1\205\103\0\1\206"+
    "\1\u0133\1\0\1\u0133\1\206\1\u0134\1\206\1\u0133\1\206"+
    "\2\u0133\1\206\2\u0133\5\206\5\u0133\30\206\1\u0135\17\206"+
    "\1\u0133\5\206\1\203\3\0\3\203\1\0\1\203\2\0"+
    "\1\203\2\0\3\203\2\u0136\5\0\50\203\1\0\1\u0137"+
    "\4\203\1\210\1\u0138\1\0\1\u0138\3\210\1\u0138\1\u0134"+
    "\2\u0138\1\210\2\u0138\5\210\5\u0138\30\210\1\u0139\17\210"+
    "\1\u0138\5\210\1\212\3\0\3\212\1\0\1\212\2\0"+
    "\1\212\2\0\5\212\5\0\50\212\1\0\5\212\1\0"+
    "\1\213\104\0\1\214\1\u013a\1\0\1\u013a\1\214\1\u013b"+
    "\1\214\1\u013a\1\214\2\u013a\1\214\2\u013a\5\214\5\u013a"+
    "\30\214\1\u013c\17\214\1\u013a\5\214\1\215\1\u013d\1\0"+
    "\1\u013d\3\215\1\u013d\1\u013b\2\u013d\1\215\2\u013d\5\215"+
    "\5\u013d\30\215\1\u013e\17\215\1\u013d\5\215\1\212\3\0"+
    "\3\212\1\0\1\212\2\0\1\212\2\0\5\212\5\0"+
    "\5\212\1\u013f\42\212\1\0\6\212\3\0\3\212\1\0"+
    "\1\212\2\0\1\212\2\0\5\212\5\0\21\212\1\u0140"+
    "\1\u0141\4\212\1\u0142\14\212\1\u0141\2\212\1\u0142\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\5\212\1\u0143\16\212\1\u0144\23\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\5\212\1\u0143\15\212\1\u0145\21\212\1\u0145"+
    "\2\212\1\0\2\212\1\u0145\3\212\3\0\3\212\1\0"+
    "\1\212\2\0\1\212\2\0\5\212\5\0\5\212\1\u0143"+
    "\11\212\1\u0146\22\212\1\u0146\5\212\1\0\5\212\1\223"+
    "\3\0\3\223\1\0\1\223\2\0\1\223\2\0\5\223"+
    "\5\0\50\223\1\0\5\223\1\0\1\224\113\0\1\110"+
    "\76\0\1\223\3\0\3\223\1\0\1\223\2\0\1\223"+
    "\2\0\3\223\2\226\5\0\50\223\1\0\5\223\25\0"+
    "\1\110\107\0\1\110\156\0\1\110\5\0\1\232\3\0"+
    "\3\232\1\0\1\232\2\0\1\232\2\0\5\232\5\0"+
    "\50\232\1\0\5\232\1\0\1\233\104\0\1\234\1\310"+
    "\1\0\1\310\1\234\1\u0147\1\234\1\310\1\234\2\310"+
    "\1\234\2\310\5\234\5\310\30\234\1\u0148\17\234\1\310"+
    "\5\234\1\235\1\316\1\0\1\316\3\235\1\316\1\u0147"+
    "\2\316\1\235\2\316\5\235\5\316\30\235\1\u0149\17\235"+
    "\1\316\5\235\1\0\1\236\104\0\1\237\1\u013a\1\0"+
    "\1\u013a\1\237\1\u014a\1\237\1\u013a\1\237\2\u013a\1\237"+
    "\2\u013a\5\237\5\u013a\30\237\1\u014b\17\237\1\u013a\5\237"+
    "\1\240\1\u013d\1\0\1\u013d\3\240\1\u013d\1\u014a\2\u013d"+
    "\1\240\2\u013d\5\240\5\u013d\30\240\1\u014c\17\240\1\u013d"+
    "\5\240\1\232\3\0\3\232\1\0\1\232\2\0\1\232"+
    "\2\0\3\232\2\241\5\0\50\232\1\0\5\232\26\0"+
    "\1\u014d\57\0\1\232\3\0\3\232\1\0\1\232\2\0"+
    "\1\232\2\0\5\232\5\0\21\232\1\u014e\26\232\1\0"+
    "\6\232\3\0\3\232\1\0\1\232\2\0\1\232\2\0"+
    "\5\232\5\0\5\232\1\u014f\16\232\1\u0150\23\232\1\0"+
    "\6\232\3\0\3\232\1\0\1\232\2\0\1\232\2\0"+
    "\5\232\5\0\5\232\1\u014f\15\232\1\u0151\21\232\1\u0151"+
    "\2\232\1\0\2\232\1\u0151\3\232\3\0\3\232\1\0"+
    "\1\232\2\0\1\232\2\0\5\232\5\0\5\232\1\u014f"+
    "\11\232\1\u0152\22\232\1\u0152\5\232\1\0\5\232\1\0"+
    "\1\247\104\0\1\250\3\0\3\250\1\0\1\250\2\0"+
    "\1\250\2\0\5\250\5\0\50\250\1\0\5\250\1\0"+
    "\1\251\125\0\2\u0153\63\0\1\250\3\0\3\250\1\0"+
    "\1\250\2\0\1\250\2\0\5\250\5\0\24\250\1\u0154"+
    "\7\250\1\u0155\6\250\1\u0155\1\250\1\u0155\2\250\1\0"+
    "\6\250\3\0\3\250\1\0\1\250\2\0\1\250\2\0"+
    "\5\250\1\u0156\4\0\1\250\27\254\2\250\16\254\1\0"+
    "\5\250\2\255\1\0\103\255\1\256\1\u0157\2\0\3\256"+
    "\1\0\1\256\2\0\1\256\1\u0158\1\0\5\256\3\0"+
    "\1\u0159\1\0\50\256\1\0\5\256\1\0\1\257\104\0"+
    "\1\256\1\u0157\2\0\3\256\1\0\1\256\2\0\1\256"+
    "\1\u0158\1\0\5\256\3\0\1\u015a\1\0\50\256\1\0"+
    "\5\256\26\0\1\263\57\0\1\256\1\u0157\2\0\3\256"+
    "\1\0\1\256\2\0\1\256\1\u0158\1\0\5\256\3\0"+
    "\1\u015a\1\0\32\256\1\u015b\10\256\1\u015b\4\256\1\0"+
    "\5\256\1\0\1\u015c\104\0\1\264\3\0\3\264\1\0"+
    "\1\264\2\0\1\264\2\0\5\264\5\0\50\264\1\0"+
    "\5\264\1\0\1\265\105\0\1\266\104\0\1\117\3\0"+
    "\3\117\1\0\1\117\2\0\1\117\2\0\3\117\1\u015d"+
    "\1\117\5\0\50\117\1\0\5\117\1\270\3\0\3\270"+
    "\1\0\1\270\2\0\1\270\2\0\5\270\5\0\50\270"+
    "\1\0\5\270\1\0\1\271\104\0\1\272\1\u015e\1\0"+
    "\1\u015e\1\272\1\u015f\1\272\1\u015e\1\272\2\u015e\1\272"+
    "\2\u015e\5\272\5\u015e\30\272\1\u0160\17\272\1\u015e\5\272"+
    "\1\270\3\0\3\270\1\0\1\270\2\0\1\270\2\0"+
    "\3\270\2\u0161\5\0\50\270\1\0\1\u0162\4\270\1\274"+
    "\1\u0163\1\0\1\u0163\3\274\1\u0163\1\u015f\2\u0163\1\274"+
    "\2\u0163\5\274\5\u0163\30\274\1\u0164\17\274\1\u0163\5\274"+
    "\1\270\3\0\3\270\1\0\1\270\2\0\1\270\2\0"+
    "\3\270\2\275\5\0\50\270\1\0\5\270\1\276\3\0"+
    "\3\276\1\0\1\276\2\0\1\276\2\0\5\276\5\0"+
    "\50\276\1\0\5\276\1\0\1\277\106\0\1\300\103\0"+
    "\1\276\3\0\3\276\1\0\1\276\2\0\1\276\2\0"+
    "\3\276\2\u0165\5\0\1\276\27\u0165\1\276\17\u0165\1\0"+
    "\1\276\4\u0165\1\276\3\0\2\276\1\u0166\1\0\1\276"+
    "\2\0\1\276\2\0\3\276\2\u0167\5\0\1\276\27\u0167"+
    "\1\276\17\u0167\1\0\1\276\4\u0167\7\0\1\u0168\123\0"+
    "\1\u0168\107\0\1\u0168\156\0\1\u0168\6\0\1\307\104\0"+
    "\2\310\1\0\2\310\1\u0169\52\310\1\u016a\25\310\1\41"+
    "\1\310\1\0\1\310\1\41\1\u016b\1\41\1\310\1\41"+
    "\2\310\1\41\2\310\5\41\5\310\30\41\1\312\17\41"+
    "\1\310\5\41\1\36\3\0\3\36\1\0\1\36\2\0"+
    "\1\36\2\0\3\36\2\313\5\0\50\36\1\0\5\36"+
    "\2\316\1\0\5\316\1\u0169\47\316\1\u016c\25\316\1\44"+
    "\1\316\1\0\1\316\3\44\1\316\1\u016d\2\316\1\44"+
    "\2\316\5\44\5\316\30\44\1\317\17\44\1\316\5\44"+
    "\12\320\1\u016e\73\320\1\322\3\0\3\322\1\0\1\322"+
    "\2\0\1\322\2\0\5\322\5\0\50\322\1\0\5\322"+
    "\23\0\1\u016f\62\0\1\322\3\0\3\322\1\0\1\322"+
    "\2\0\1\322\2\0\5\322\5\0\5\322\1\u0170\42\322"+
    "\1\0\5\322\1\325\3\0\3\325\1\0\1\325\2\0"+
    "\1\325\2\0\5\325\5\0\50\325\1\0\5\325\1\36"+
    "\3\0\3\36\1\0\1\36\2\0\1\36\2\0\5\36"+
    "\1\325\4\0\1\36\14\55\1\u0171\12\55\2\36\16\55"+
    "\1\0\5\36\1\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\23\60\1\u0172\21\60\1\u0172"+
    "\2\60\1\0\2\60\1\u0172\3\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\24\60\1\u0173"+
    "\23\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\5\60\1\u0174\42\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\14\60\1\u0175\24\60\1\u0175\6\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\4\60\1\u0176\30\60\1\u0176\12\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\23\60\1\u0177\21\60\1\u0177\2\60\1\0"+
    "\2\60\1\u0177\3\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\14\60\1\u0178\24\60\1\u0178"+
    "\6\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\24\60\1\u0179\23\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\10\60\1\u017a\26\60\1\u017a\10\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\23\60\1\u017b\21\60\1\u017b\2\60\1\0"+
    "\2\60\1\u017b\3\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\4\60\1\u017c\30\60\1\u017c"+
    "\12\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\11\60\1\u017d\26\60\1\u017d"+
    "\7\60\1\0\1\60\1\u017d\4\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\22\60\1\u017e"+
    "\21\60\1\u017e\3\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\24\60\1\u017f"+
    "\23\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\4\60\1\u0180\30\60\1\u0180"+
    "\12\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\22\60\1\u0181\21\60\1\u0181"+
    "\3\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\24\60\1\u0182\23\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\11\60\1\u0183\26\60\1\u0183\7\60\1\0"+
    "\1\60\1\u0183\3\60\2\355\1\0\2\355\1\u0184\52\355"+
    "\1\u0185\25\355\1\105\1\355\1\0\1\355\3\105\1\355"+
    "\1\105\2\355\1\105\2\355\5\105\5\355\30\105\1\356"+
    "\17\105\1\355\5\105\1\103\3\0\3\103\1\0\1\103"+
    "\2\0\1\103\2\0\3\103\2\357\5\0\50\103\1\0"+
    "\5\103\2\361\1\0\5\361\1\u0184\47\361\1\u0186\25\361"+
    "\1\107\1\361\1\0\1\361\3\107\1\361\1\107\2\361"+
    "\1\107\2\361\5\107\5\361\30\107\1\362\17\107\1\361"+
    "\5\107\1\365\3\0\3\365\1\0\1\365\2\0\1\365"+
    "\2\0\5\365\5\0\50\365\1\0\5\365\1\117\3\0"+
    "\3\117\1\0\1\117\2\0\1\117\2\0\5\117\5\0"+
    "\6\117\1\367\27\117\1\367\11\117\1\0\5\117\2\370"+
    "\1\0\2\370\1\u0187\52\370\1\u0188\25\370\1\127\1\370"+
    "\1\0\1\370\1\127\1\u0189\1\127\1\370\1\127\2\370"+
    "\1\127\2\370\5\127\5\370\30\127\1\372\17\127\1\370"+
    "\5\127\2\373\1\0\5\373\1\u0187\47\373\1\u018a\25\373"+
    "\1\130\1\373\1\0\1\373\3\130\1\373\1\u018b\2\373"+
    "\1\130\2\373\5\130\5\373\30\130\1\374\17\130\1\373"+
    "\5\130\2\376\1\0\2\376\1\u018c\52\376\1\u018d\25\376"+
    "\1\136\1\376\1\0\1\376\1\136\1\u018e\1\136\1\376"+
    "\1\136\2\376\1\136\2\376\5\136\5\376\30\136\1\u0100"+
    "\17\136\1\376\5\136\2\u0101\1\0\5\u0101\1\u018c\47\u0101"+
    "\1\u018f\25\u0101\1\137\1\u0101\1\0\1\u0101\3\137\1\u0101"+
    "\1\u0190\2\u0101\1\137\2\u0101\5\137\5\u0101\30\137\1\u0102"+
    "\17\137\1\u0101\5\137\1\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\23\60\1\u0191\21\60"+
    "\1\u0191\2\60\1\0\2\60\1\u0191\3\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\24\60"+
    "\1\u0192\23\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\5\60\1\u0193\42\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\14\60\1\u0194\24\60\1\u0194\6\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\4\60\1\u0195\30\60\1\u0195\12\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\23\60\1\u0196\21\60\1\u0196\2\60"+
    "\1\0\2\60\1\u0196\3\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\14\60\1\u0197\24\60"+
    "\1\u0197\6\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\24\60\1\u0198\23\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\10\60\1\u0199\26\60\1\u0199\10\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\23\60\1\u019a\21\60\1\u019a\2\60"+
    "\1\0\2\60\1\u019a\3\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\4\60\1\u019b\30\60"+
    "\1\u019b\12\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\11\60\1\u019c\26\60"+
    "\1\u019c\7\60\1\0\1\60\1\u019c\4\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\22\60"+
    "\1\u019d\21\60\1\u019d\3\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\24\60"+
    "\1\u019e\23\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\4\60\1\u019f\30\60"+
    "\1\u019f\12\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\22\60\1\u01a0\21\60"+
    "\1\u01a0\3\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\24\60\1\u01a1\23\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\11\60\1\u01a2\26\60\1\u01a2\7\60"+
    "\1\0\1\60\1\u01a2\3\60\1\117\3\0\3\117\1\0"+
    "\1\117\2\0\1\117\2\0\3\117\2\u01a3\5\0\50\117"+
    "\1\0\6\117\3\0\3\117\1\0\1\117\2\0\1\117"+
    "\2\0\3\u0119\2\117\5\0\50\117\1\0\5\117\2\u011b"+
    "\1\0\2\u011b\1\u01a4\52\u011b\1\u01a5\25\u011b\1\157\1\u011b"+
    "\1\0\1\u011b\1\157\1\u01a6\1\157\1\u011b\1\157\2\u011b"+
    "\1\157\2\u011b\5\157\5\u011b\30\157\1\u011d\17\157\1\u011b"+
    "\5\157\2\u011e\1\0\5\u011e\1\u01a4\47\u011e\1\u01a7\25\u011e"+
    "\1\160\1\u011e\1\0\1\u011e\3\160\1\u011e\1\u01a8\2\u011e"+
    "\1\160\2\u011e\5\160\5\u011e\30\160\1\u011f\17\160\1\u011e"+
    "\5\160\1\155\3\0\3\155\1\0\1\155\2\0\1\155"+
    "\2\0\5\155\5\0\6\155\1\u0121\27\155\1\u0121\11\155"+
    "\1\0\6\155\1\u01a9\1\u01aa\1\0\3\155\1\u01ab\1\155"+
    "\2\u01ab\1\155\2\0\5\155\2\0\1\u01ab\1\0\1\u01ab"+
    "\50\155\1\u01ab\5\155\2\u0123\1\0\2\u0123\1\u01ac\52\u0123"+
    "\1\u01ad\25\u0123\1\170\1\u0123\1\0\1\u0123\1\170\1\u01ae"+
    "\1\170\1\u0123\1\170\2\u0123\1\170\2\u0123\5\170\5\u0123"+
    "\30\170\1\u0125\17\170\1\u0123\5\170\1\166\3\0\3\166"+
    "\1\0\1\166\2\0\1\166\2\0\5\166\5\0\1\166"+
    "\27\u01af\2\166\16\u01af\1\0\5\166\2\u0127\1\0\5\u0127"+
    "\1\u01ac\47\u0127\1\u01b0\25\u0127\1\172\1\u0127\1\0\1\u0127"+
    "\3\172\1\u0127\1\u01b1\2\u0127\1\172\2\u0127\5\172\5\u0127"+
    "\30\172\1\u0128\17\172\1\u0127\5\172\1\166\3\0\3\166"+
    "\1\0\1\166\2\0\1\166\2\0\5\166\5\0\14\166"+
    "\1\u01b2\24\166\1\u01b2\6\166\1\0\6\166\3\0\3\166"+
    "\1\0\1\166\2\0\1\166\2\0\5\166\5\0\14\166"+
    "\1\u01b3\24\166\1\u01b3\6\166\1\0\6\166\3\0\3\166"+
    "\1\0\1\166\2\0\1\166\2\0\5\166\5\0\11\166"+
    "\1\u01b4\26\166\1\u01b4\7\166\1\0\1\166\1\u01b4\4\166"+
    "\3\0\3\166\1\0\1\166\2\0\1\166\2\0\5\166"+
    "\5\0\13\166\1\u01b5\34\166\1\0\4\166\1\u01b5\1\166"+
    "\3\0\3\166\1\0\1\166\2\0\1\166\2\0\5\166"+
    "\5\0\5\166\1\u01b6\42\166\1\0\5\166\2\u0133\1\0"+
    "\2\u0133\1\u01b7\52\u0133\1\u01b8\25\u0133\1\206\1\u0133\1\0"+
    "\1\u0133\1\206\1\u01b9\1\206\1\u0133\1\206\2\u0133\1\206"+
    "\2\u0133\5\206\5\u0133\30\206\1\u0135\17\206\1\u0133\5\206"+
    "\1\203\3\0\3\203\1\0\1\203\2\0\1\203\2\0"+
    "\3\203\2\u0136\5\0\50\203\1\0\5\203\2\u0138\1\0"+
    "\5\u0138\1\u01b7\47\u0138\1\u01ba\25\u0138\1\210\1\u0138\1\0"+
    "\1\u0138\3\210\1\u0138\1\u01bb\2\u0138\1\210\2\u0138\5\210"+
    "\5\u0138\30\210\1\u0139\17\210\1\u0138\5\210\2\u013a\1\0"+
    "\2\u013a\1\u01bc\52\u013a\1\u01bd\25\u013a\1\214\1\u013a\1\0"+
    "\1\u013a\1\214\1\u01be\1\214\1\u013a\1\214\2\u013a\1\214"+
    "\2\u013a\5\214\5\u013a\30\214\1\u013c\17\214\1\u013a\5\214"+
    "\2\u013d\1\0\5\u013d\1\u01bc\47\u013d\1\u01bf\25\u013d\1\215"+
    "\1\u013d\1\0\1\u013d\3\215\1\u013d\1\u01c0\2\u013d\1\215"+
    "\2\u013d\5\215\5\u013d\30\215\1\u013e\17\215\1\u013d\5\215"+
    "\1\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\6\212\1\u01c1\27\212\1\u01c1\11\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\25\212\1\u01c2\20\212\1\u01c2\1\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\22\212\1\u01c3\21\212\1\u01c3\3\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\11\212\1\u01c4\26\212\1\u01c4\7\212\1\0"+
    "\1\212\1\u01c4\4\212\3\0\3\212\1\0\1\212\2\0"+
    "\1\212\2\0\5\212\5\0\21\212\1\u01c2\26\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\22\212\1\u01c2\21\212\1\u01c2\3\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\23\212\1\u01c2\21\212\1\u01c2\2\212\1\0"+
    "\2\212\1\u01c2\3\212\3\0\3\212\1\0\1\212\2\0"+
    "\1\212\2\0\5\212\5\0\24\212\1\u01c2\23\212\1\0"+
    "\5\212\1\234\1\310\1\0\1\310\1\234\1\u01c5\1\234"+
    "\1\310\1\234\2\310\1\234\2\310\5\234\5\310\30\234"+
    "\1\u0148\17\234\1\310\5\234\1\235\1\316\1\0\1\316"+
    "\3\235\1\316\1\u01c6\2\316\1\235\2\316\5\235\5\316"+
    "\30\235\1\u0149\17\235\1\316\5\235\1\237\1\u013a\1\0"+
    "\1\u013a\1\237\1\u01c7\1\237\1\u013a\1\237\2\u013a\1\237"+
    "\2\u013a\5\237\5\u013a\30\237\1\u014b\17\237\1\u013a\5\237"+
    "\1\240\1\u013d\1\0\1\u013d\3\240\1\u013d\1\u01c8\2\u013d"+
    "\1\240\2\u013d\5\240\5\u013d\30\240\1\u014c\17\240\1\u013d"+
    "\5\240\1\232\3\0\3\232\1\0\1\232\2\0\1\232"+
    "\2\0\5\232\5\0\25\232\1\u01c9\20\232\1\u01c9\1\232"+
    "\1\0\6\232\3\0\3\232\1\0\1\232\2\0\1\232"+
    "\2\0\5\232\5\0\21\232\1\u01c9\26\232\1\0\6\232"+
    "\3\0\3\232\1\0\1\232\2\0\1\232\2\0\5\232"+
    "\5\0\22\232\1\u01c9\21\232\1\u01c9\3\232\1\0\6\232"+
    "\3\0\3\232\1\0\1\232\2\0\1\232\2\0\5\232"+
    "\5\0\23\232\1\u01c9\21\232\1\u01c9\2\232\1\0\2\232"+
    "\1\u01c9\3\232\3\0\3\232\1\0\1\232\2\0\1\232"+
    "\2\0\5\232\5\0\24\232\1\u01c9\23\232\1\0\5\232"+
    "\1\250\3\0\3\250\1\0\1\250\2\0\1\250\2\0"+
    "\3\250\2\u01ca\5\0\50\250\1\0\5\250\1\u0156\3\0"+
    "\3\u0156\1\0\1\u0156\2\0\1\u0156\2\0\5\u0156\5\0"+
    "\50\u0156\1\0\5\u0156\26\0\1\u01cb\57\0\1\u01cc\1\u01cd"+
    "\2\u01ce\3\u01cc\1\u01ce\1\u01cc\2\u01ce\1\256\1\u0158\1\u01ce"+
    "\1\256\4\u01cc\3\u01ce\1\u0159\1\u01ce\50\u01cc\1\u01ce\5\u01cc"+
    "\2\u015e\1\0\2\u015e\1\u01cf\52\u015e\1\u01d0\25\u015e\1\272"+
    "\1\u015e\1\0\1\u015e\1\272\1\u01d1\1\272\1\u015e\1\272"+
    "\2\u015e\1\272\2\u015e\5\272\5\u015e\30\272\1\u0160\17\272"+
    "\1\u015e\5\272\1\270\3\0\3\270\1\0\1\270\2\0"+
    "\1\270\2\0\3\270\2\u0161\5\0\50\270\1\0\5\270"+
    "\2\u0163\1\0\5\u0163\1\u01cf\47\u0163\1\u01d2\25\u0163\1\274"+
    "\1\u0163\1\0\1\u0163\3\274\1\u0163\1\u01d3\2\u0163\1\274"+
    "\2\u0163\5\274\5\u0163\30\274\1\u0164\17\274\1\u0163\5\274"+
    "\1\276\3\0\1\u01d4\2\276\1\0\1\276\2\0\1\276"+
    "\2\0\3\276\2\u0165\5\0\1\276\27\u0165\1\276\17\u0165"+
    "\1\0\1\276\4\u0165\1\276\3\0\3\276\1\0\1\276"+
    "\2\0\1\276\2\0\5\276\5\0\1\276\27\u01d5\2\276"+
    "\16\u01d5\1\0\6\276\3\0\2\276\1\u01d4\1\0\1\276"+
    "\2\0\1\276\2\0\3\276\2\u0167\5\0\1\276\27\u0167"+
    "\1\276\17\u0167\1\0\1\276\4\u0167\2\310\1\0\2\310"+
    "\1\u01d6\52\310\1\u016a\25\310\2\316\1\0\5\316\1\u01d7"+
    "\47\316\1\u016c\25\316\1\322\3\0\3\322\1\0\1\322"+
    "\2\0\1\322\2\0\5\322\5\0\15\322\1\u01d8\32\322"+
    "\1\0\5\322\1\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\17\60\1\u01d9\22\60\1\u01d9"+
    "\5\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\22\60\1\u01da\21\60\1\u01da"+
    "\3\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\1\60\1\u01db\30\60\1\u01db"+
    "\15\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\14\60\1\u01dc\24\60\1\u01dc"+
    "\6\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\11\60\1\u01dd\26\60\1\u01dd"+
    "\7\60\1\0\1\60\1\u01dd\4\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\17\60\1\u01de"+
    "\22\60\1\u01de\5\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\5\60\1\u01df"+
    "\42\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\17\60\1\u01e0\22\60\1\u01e0"+
    "\5\60\1\0\6\60\3\0\3\60\1\0\1\60\2\0"+
    "\1\60\2\0\5\60\5\0\5\60\1\u01e1\42\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\14\60\1\u01e2\24\60\1\u01e2\6\60\1\0"+
    "\6\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\24\60\1\u01e3\23\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\17\60\1\u01e4\22\60\1\u01e4\5\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\11\60\1\u01e5\26\60\1\u01e5\7\60\1\0\1\60\1\u01e5"+
    "\4\60\3\0\3\60\1\0\1\60\2\0\1\60\2\0"+
    "\5\60\5\0\5\60\1\u01e6\42\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\14\60\1\u01e7\24\60\1\u01e7\6\60\1\0\6\60\3\0"+
    "\3\60\1\0\1\60\2\0\1\60\2\0\5\60\5\0"+
    "\6\60\1\u01e8\27\60\1\u01e8\11\60\1\0\5\60\2\355"+
    "\1\0\2\355\1\u01e9\52\355\1\u0185\25\355\2\361\1\0"+
    "\5\361\1\u01ea\47\361\1\u0186\25\361\2\370\1\0\2\370"+
    "\1\u01eb\52\370\1\u0188\25\370\2\373\1\0\5\373\1\u01ec"+
    "\47\373\1\u018a\25\373\2\376\1\0\2\376\1\u01ed\52\376"+
    "\1\u018d\25\376\2\u0101\1\0\5\u0101\1\u01ee\47\u0101\1\u018f"+
    "\25\u0101\1\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\17\60\1\u01ef\22\60\1\u01ef\5\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\u01f0\21\60\1\u01f0\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\1\60\1\u01f1\30\60\1\u01f1\15\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\14\60\1\u01f2\24\60\1\u01f2\6\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\11\60\1\u01f3\26\60\1\u01f3\7\60"+
    "\1\0\1\60\1\u01f3\4\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\17\60\1\u01f4\22\60"+
    "\1\u01f4\5\60\1\0\6\60\3\0\3\60\1\0\1\60"+
    "\2\0\1\60\2\0\5\60\5\0\5\60\1\u01f5\42\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\17\60\1\u01f6\22\60\1\u01f6\5\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\5\60\1\u01f7\42\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\14\60\1\u01f8\24\60\1\u01f8\6\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\24\60\1\u01f9\23\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\17\60"+
    "\1\u01fa\22\60\1\u01fa\5\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\11\60"+
    "\1\u01fb\26\60\1\u01fb\7\60\1\0\1\60\1\u01fb\4\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\5\60\1\u01fc\42\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\14\60"+
    "\1\u01fd\24\60\1\u01fd\6\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\6\60"+
    "\1\u01fe\27\60\1\u01fe\11\60\1\0\5\60\1\117\3\0"+
    "\3\117\1\0\1\117\2\0\1\117\2\0\3\u01ff\2\u0200"+
    "\5\0\50\117\1\0\5\117\2\u011b\1\0\2\u011b\1\u0201"+
    "\52\u011b\1\u01a5\25\u011b\2\u011e\1\0\5\u011e\1\u0202\47\u011e"+
    "\1\u01a7\25\u011e\1\0\1\u01a9\1\u01aa\4\0\1\u01ab\1\0"+
    "\2\u01ab\12\0\1\u01ab\1\0\1\u01ab\50\0\1\u01ab\7\0"+
    "\1\u01aa\103\0\2\u0123\1\0\2\u0123\1\u0203\52\u0123\1\u01ad"+
    "\25\u0123\2\u0127\1\0\5\u0127\1\u0204\47\u0127\1\u01b0\25\u0127"+
    "\1\166\3\0\3\166\1\0\1\166\2\0\1\166\2\0"+
    "\5\166\5\0\11\166\1\u0205\26\166\1\u0205\7\166\1\0"+
    "\1\166\1\u0205\4\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\3\0\1\u0206\1\0\50\166\1\0"+
    "\6\166\3\0\3\166\1\0\1\166\2\0\1\166\2\0"+
    "\5\166\5\0\20\166\1\u0207\22\166\1\u0207\4\166\1\0"+
    "\6\166\3\0\3\166\1\0\1\166\2\0\1\166\2\0"+
    "\5\166\5\0\5\166\1\u0208\42\166\1\0\6\166\3\0"+
    "\3\166\1\0\1\166\2\0\1\166\2\0\5\166\5\0"+
    "\2\166\1\u0209\30\166\1\u0209\14\166\1\0\5\166\2\u0133"+
    "\1\0\2\u0133\1\u020a\52\u0133\1\u01b8\25\u0133\2\u0138\1\0"+
    "\5\u0138\1\u020b\47\u0138\1\u01ba\25\u0138\2\u013a\1\0\2\u013a"+
    "\1\u020c\52\u013a\1\u01bd\25\u013a\2\u013d\1\0\5\u013d\1\u020d"+
    "\47\u013d\1\u01bf\25\u013d\1\212\3\0\3\212\1\0\1\212"+
    "\2\0\1\212\2\0\5\212\5\0\11\212\1\u020e\26\212"+
    "\1\u020e\7\212\1\0\1\212\1\u020e\4\212\3\0\3\212"+
    "\1\0\1\212\2\0\1\212\2\0\5\212\5\0\17\212"+
    "\1\u020f\22\212\1\u020f\5\212\1\0\6\212\3\0\3\212"+
    "\1\0\1\212\2\0\1\212\2\0\5\212\5\0\23\212"+
    "\1\u0210\21\212\1\u0210\2\212\1\0\2\212\1\u0210\2\212"+
    "\1\u01ce\1\u01cd\11\u01ce\2\0\1\u01ce\1\0\7\u01ce\1\0"+
    "\57\u01ce\2\u015e\1\0\2\u015e\1\u0211\52\u015e\1\u01d0\25\u015e"+
    "\2\u0163\1\0\5\u0163\1\u0212\47\u0163\1\u01d2\25\u0163\1\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\3\60\1\u0213\30\60\1\u0213\13\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\11\60\1\u0214\26\60\1\u0214\7\60\1\0\1\60"+
    "\1\u0214\4\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\13\60\1\u0215\34\60\1\0\4\60"+
    "\1\u0215\1\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\333\21\60\1\333\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\u0216\21\60\1\u0216\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\17\60\1\u0217\22\60\1\u0217\5\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\347\21\60\1\347\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\17\60\1\u0218\22\60\1\u0218\5\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\24\60\1\u0219\23\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\3\60\1\u021a\30\60\1\u021a\13\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\11\60\1\u021b\26\60\1\u021b\7\60\1\0\1\60"+
    "\1\u021b\4\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\13\60\1\u021c\34\60\1\0\4\60"+
    "\1\u021c\1\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\u0107\21\60\1\u0107\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\u021d\21\60\1\u021d\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\17\60\1\u021e\22\60\1\u021e\5\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\22\60\1\u0113\21\60\1\u0113\3\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\17\60\1\u021f\22\60\1\u021f\5\60"+
    "\1\0\6\60\3\0\3\60\1\0\1\60\2\0\1\60"+
    "\2\0\5\60\5\0\24\60\1\u0220\23\60\1\0\5\60"+
    "\1\117\3\0\3\117\1\0\1\117\2\0\1\117\2\0"+
    "\3\117\2\u0221\5\0\50\117\1\0\6\117\3\0\3\117"+
    "\1\0\1\117\2\0\1\117\2\0\3\u01ff\2\117\5\0"+
    "\50\117\1\0\5\117\1\166\3\0\3\166\1\0\1\166"+
    "\2\0\1\166\2\0\5\166\5\0\15\166\1\u0222\32\166"+
    "\1\0\5\166\21\0\2\u0223\6\0\27\u0223\1\0\17\u0223"+
    "\2\0\4\u0223\1\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\3\0\1\u0224\1\0\50\166\1\0"+
    "\6\166\3\0\3\166\1\0\1\166\2\0\1\166\2\0"+
    "\5\166\5\0\16\166\1\u0225\31\166\1\0\6\166\3\0"+
    "\3\166\1\0\1\166\2\0\1\166\2\0\5\166\5\0"+
    "\1\166\1\u0226\30\166\1\u0226\15\166\1\0\5\166\1\212"+
    "\3\0\3\212\1\0\1\212\2\0\1\212\2\0\5\212"+
    "\5\0\16\212\1\u0227\31\212\1\0\6\212\3\0\3\212"+
    "\1\0\1\212\2\0\1\212\2\0\5\212\5\0\22\212"+
    "\1\u0228\21\212\1\u0228\3\212\1\0\6\212\3\0\3\212"+
    "\1\0\1\212\2\0\1\212\2\0\5\212\5\0\24\212"+
    "\1\u0229\23\212\1\0\5\212\1\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\2\60\1\u022a"+
    "\30\60\1\u022a\14\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\3\60\1\u022b"+
    "\30\60\1\u022b\13\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\3\60\1\u022c"+
    "\30\60\1\u022c\13\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\2\60\1\u022d"+
    "\30\60\1\u022d\14\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\3\60\1\u022e"+
    "\30\60\1\u022e\13\60\1\0\6\60\3\0\3\60\1\0"+
    "\1\60\2\0\1\60\2\0\5\60\5\0\3\60\1\u022f"+
    "\30\60\1\u022f\13\60\1\0\5\60\1\117\3\0\3\117"+
    "\1\0\1\117\2\0\1\117\2\0\3\117\2\u0230\5\0"+
    "\50\117\1\0\5\117\1\166\3\0\3\166\1\0\1\166"+
    "\2\0\1\166\2\0\5\166\5\0\23\166\1\u0231\21\166"+
    "\1\u0231\2\166\1\0\2\166\1\u0231\2\166\21\0\2\u0232"+
    "\61\0\1\u0232\1\0\1\166\3\0\3\166\1\0\1\166"+
    "\2\0\1\166\2\0\5\166\5\0\23\166\1\u0233\21\166"+
    "\1\u0233\2\166\1\0\2\166\1\u0233\3\166\3\0\3\166"+
    "\1\0\1\166\2\0\1\166\2\0\5\166\5\0\3\166"+
    "\1\u0234\30\166\1\u0234\13\166\1\0\5\166\1\212\3\0"+
    "\3\212\1\0\1\212\2\0\1\212\2\0\5\212\5\0"+
    "\5\212\1\u0235\42\212\1\0\6\212\3\0\3\212\1\0"+
    "\1\212\2\0\1\212\2\0\5\212\5\0\14\212\1\u0236"+
    "\24\212\1\u0236\6\212\1\0\5\212\1\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\1\60"+
    "\1\u0237\30\60\1\u0237\15\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\1\60"+
    "\1\u0238\30\60\1\u0238\15\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\1\60"+
    "\1\u0239\30\60\1\u0239\15\60\1\0\6\60\3\0\3\60"+
    "\1\0\1\60\2\0\1\60\2\0\5\60\5\0\1\60"+
    "\1\u023a\30\60\1\u023a\15\60\1\0\5\60\1\117\3\0"+
    "\3\117\1\0\1\117\2\0\1\117\2\0\3\117\2\u023b"+
    "\5\0\50\117\1\0\5\117\1\166\3\0\3\166\1\0"+
    "\1\166\2\0\1\166\2\0\5\166\3\0\1\u023c\1\0"+
    "\50\166\1\0\6\166\3\0\3\166\1\0\1\166\2\0"+
    "\1\166\2\0\5\166\3\0\1\u023d\1\0\50\166\1\0"+
    "\6\166\3\0\3\166\1\0\1\166\2\0\1\166\2\0"+
    "\5\166\5\0\13\166\1\u023e\34\166\1\0\4\166\1\u023e"+
    "\1\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\4\212\1\u0229\30\212\1\u0229\12\212\1\0"+
    "\6\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\5\212\1\u023f\42\212\1\0\5\212\1\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\14\60\1\u0240\24\60\1\u0240\6\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\14\60\1\u0241\24\60\1\u0241\6\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\14\60\1\u0242\24\60\1\u0242\6\60\1\0\6\60"+
    "\3\0\3\60\1\0\1\60\2\0\1\60\2\0\5\60"+
    "\5\0\14\60\1\u0243\24\60\1\u0243\6\60\1\0\5\60"+
    "\1\117\3\0\3\117\1\0\1\117\2\0\1\117\2\0"+
    "\3\117\2\u0244\5\0\50\117\1\0\5\117\13\0\2\u0223"+
    "\1\0\1\u0223\1\0\3\u0223\3\0\1\u0223\2\0\27\u0223"+
    "\1\0\17\u0223\2\0\4\u0223\21\0\2\u0245\61\0\1\u0245"+
    "\1\0\1\166\3\0\3\166\1\0\1\166\2\0\1\166"+
    "\2\0\5\166\5\0\21\166\1\u0246\26\166\1\0\5\166"+
    "\1\212\3\0\3\212\1\0\1\212\2\0\1\212\2\0"+
    "\5\212\5\0\26\212\1\u0247\21\212\1\0\5\212\13\0"+
    "\1\u0223\1\0\1\u023d\1\u0248\67\0\1\212\3\0\3\212"+
    "\1\0\1\212\2\0\1\212\2\0\5\212\5\0\5\212"+
    "\1\u0249\42\212\1\0\5\212\21\0\2\u024a\61\0\1\u024a"+
    "\1\0\1\212\3\0\3\212\1\0\1\212\2\0\1\212"+
    "\2\0\5\212\5\0\14\212\1\u024b\24\212\1\u024b\6\212"+
    "\1\0\5\212\13\0\1\u0223\1\0\1\u023d\70\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30730];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\10\1\2\11\2\1\1\11\25\1\1\11\7\1"+
    "\1\11\13\1\1\11\64\1\1\11\76\1\1\0\4\1"+
    "\1\11\1\0\1\1\1\0\1\11\1\1\1\0\30\1"+
    "\1\11\1\0\3\1\1\0\1\1\1\11\4\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\31\1\1\0"+
    "\2\1\1\0\4\1\1\0\3\1\1\0\1\1\1\0"+
    "\11\1\1\0\4\1\1\0\1\1\1\0\2\1\1\0"+
    "\17\1\1\11\11\1\1\11\1\0\1\11\2\1\1\11"+
    "\1\1\1\0\4\1\1\0\4\1\2\11\1\0\1\1"+
    "\1\0\2\1\1\11\24\1\1\11\2\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\1\1\1\0\24\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\1\1\2\11"+
    "\1\0\2\1\1\0\6\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\13\1\1\11\2\1"+
    "\2\11\1\0\1\1\1\0\63\1\1\0\34\1\1\11"+
    "\1\0\30\1\1\0\12\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[587];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private Stack<Integer> tokenOrigin = new Stack<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 145: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 146: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 147: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 148: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 149: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 150: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 151: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 152: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 153: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 154: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 155: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 156: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 157: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 158: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 159: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 160: break;
          case 17:
            { yybegin(ATTRIB); return BatchTypes.STRING;
            }
          // fall through
          case 161: break;
          case 18:
            { yybegin(ATTRIB); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 162: break;
          case 19:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 163: break;
          case 20:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 164: break;
          case 21:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 165: break;
          case 22:
            { tokenOrigin.push(CHDIR); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 166: break;
          case 23:
            { yybegin(CHDIR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 167: break;
          case 24:
            { yybegin(COLOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 168: break;
          case 25:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 169: break;
          case 26:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 170: break;
          case 27:
            { yybegin(DATE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 171: break;
          case 28:
            { tokenOrigin.push(ECHO_STRING); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 172: break;
          case 29:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 173: break;
          case 30:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 174: break;
          case 31:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 175: break;
          case 32:
            { yybegin(FOR); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 176: break;
          case 33:
            { yybegin(FOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 177: break;
          case 34:
            { yybegin(FOR); yypushback(yylength()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 178: break;
          case 35:
            { yybegin(FOR_COLLECTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 179: break;
          case 36:
            { yybegin(FOR); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 180: break;
          case 37:
            { tokenOrigin.push(IF_STANDARD); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 181: break;
          case 38:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 182: break;
          case 39:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 183: break;
          case 40:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 184: break;
          case 41:
            { tokenOrigin.push(YYINITIAL); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 185: break;
          case 42:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 186: break;
          case 43:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 187: break;
          case 44:
            { yybegin(IF_STANDARD); return BatchTypes.NUMERIC;
            }
          // fall through
          case 188: break;
          case 45:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 189: break;
          case 46:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 190: break;
          case 47:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 191: break;
          case 48:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 192: break;
          case 49:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 193: break;
          case 50:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 194: break;
          case 51:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 195: break;
          case 52:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 196: break;
          case 53:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 197: break;
          case 54:
            { tokenOrigin.push(SET_VALUE); yybegin(TOKEN); yypushback(yylength());
            }
          // fall through
          case 198: break;
          case 55:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 199: break;
          case 56:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 200: break;
          case 57:
            { yybegin(tokenOrigin.pop()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 201: break;
          case 58:
            { yybegin(tokenOrigin.pop()); yypushback(yylength());
            }
          // fall through
          case 202: break;
          case 59:
            { yybegin(tokenOrigin.pop()); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 203: break;
          case 60:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 204: break;
          case 61:
            { yybegin(YYINITIAL); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 205: break;
          case 62:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 206: break;
          case 63:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 207: break;
          case 64:
            { yybegin(CHDIR); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 208: break;
          case 65:
            { yybegin(CHDIR); return BatchTypes.CHDIR_ANNOTATION;
            }
          // fall through
          case 209: break;
          case 66:
            { yybegin(IF); return BatchTypes.IF_ANNOTATION;
            }
          // fall through
          case 210: break;
          case 67:
            { yybegin(YYINITIAL); return BatchTypes.MKDIR_ANNOTATION;
            }
          // fall through
          case 211: break;
          case 68:
            { yybegin(ASSOC_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 212: break;
          case 69:
            { yybegin(ATTRIB); return BatchTypes.EXTENSION;
            }
          // fall through
          case 213: break;
          case 70:
            { yybegin(ATTRIB); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 214: break;
          case 71:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 215: break;
          case 72:
            { yybegin(CHDIR); return BatchTypes.STRING;
            }
          // fall through
          case 216: break;
          case 73:
            { yybegin(CHDIR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 217: break;
          case 74:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 218: break;
          case 75:
            { yybegin(CHDIR); return BatchTypes.CHDIR_COMMAND;
            }
          // fall through
          case 219: break;
          case 76:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 220: break;
          case 77:
            { yybegin(YYINITIAL); return BatchTypes.MKDIR_COMMAND;
            }
          // fall through
          case 221: break;
          case 78:
            { yybegin(DATE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 222: break;
          case 79:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 223: break;
          case 80:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 224: break;
          case 81:
            { yybegin(FOR); return BatchTypes.STRING;
            }
          // fall through
          case 225: break;
          case 82:
            { yybegin(FOR_COLLECTION); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 226: break;
          case 83:
            { yybegin(FOR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 227: break;
          case 84:
            { yybegin(YYINITIAL); return BatchTypes.DO_COMMAND;
            }
          // fall through
          case 228: break;
          case 85:
            { yybegin(FOR); return BatchTypes.IN_COMMAND;
            }
          // fall through
          case 229: break;
          case 86:
            { yybegin(FOR_COLLECTION); return BatchTypes.STRING;
            }
          // fall through
          case 230: break;
          case 87:
            { yybegin(FOR_COLLECTION); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 231: break;
          case 88:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 232: break;
          case 89:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 233: break;
          case 90:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 234: break;
          case 91:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 235: break;
          case 92:
            { tokenOrigin.push(SET); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.VARIABLE;
            }
          // fall through
          case 236: break;
          case 93:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 237: break;
          case 94:
            { tokenOrigin.push(SET_VALUE); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 238: break;
          case 95:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 239: break;
          case 96:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 240: break;
          case 97:
            { yybegin(SET_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 241: break;
          case 98:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 242: break;
          case 99:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 243: break;
          case 100:
            { yybegin(YYINITIAL); return BatchTypes.CLS_ANNOTATION;
            }
          // fall through
          case 244: break;
          case 101:
            { yybegin(FOR); return BatchTypes.FOR_ANNOTATION;
            }
          // fall through
          case 245: break;
          case 102:
            { yybegin(SET); return BatchTypes.SET_ANNOTATION;
            }
          // fall through
          case 246: break;
          case 103:
            { yybegin(YYINITIAL); return BatchTypes.CLS_COMMAND;
            }
          // fall through
          case 247: break;
          case 104:
            { yybegin(FOR); return BatchTypes.FOR_COMMAND;
            }
          // fall through
          case 248: break;
          case 105:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 249: break;
          case 106:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 250: break;
          case 107:
            { yybegin(YYINITIAL); yypushback(1); return BatchTypes.TOGGLE;
            }
          // fall through
          case 251: break;
          case 108:
            { yybegin(FOR); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 252: break;
          case 109:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 253: break;
          case 110:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 254: break;
          case 111:
            { yybegin(SET); yypushback(yylength() - 2); return BatchTypes.EXTENSION;
            }
          // fall through
          case 255: break;
          case 112:
            { yybegin(tokenOrigin.pop()); return BatchTypes.VARIABLE;
            }
          // fall through
          case 256: break;
          case 113:
            { yybegin(tokenOrigin.pop()); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 257: break;
          case 114:
            { yybegin(CALL); return BatchTypes.CALL_ANNOTATION;
            }
          // fall through
          case 258: break;
          case 115:
            { yybegin(DATE); return BatchTypes.DATE_ANNOTATION;
            }
          // fall through
          case 259: break;
          case 116:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 260: break;
          case 117:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_ANNOTATION;
            }
          // fall through
          case 261: break;
          case 118:
            { yybegin(EXIT); return BatchTypes.EXIT_ANNOTATION;
            }
          // fall through
          case 262: break;
          case 119:
            { yybegin(GOTO); return BatchTypes.GOTO_ANNOTATION;
            }
          // fall through
          case 263: break;
          case 120:
            { yybegin(MORE); return BatchTypes.MORE_ANNOTATION;
            }
          // fall through
          case 264: break;
          case 121:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 265: break;
          case 122:
            { yybegin(DATE); return BatchTypes.DATE_COMMAND;
            }
          // fall through
          case 266: break;
          case 123:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 267: break;
          case 124:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 268: break;
          case 125:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 269: break;
          case 126:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 270: break;
          case 127:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 271: break;
          case 128:
            { yybegin(ASSOC); return BatchTypes.ASSOC_ANNOTATION;
            }
          // fall through
          case 272: break;
          case 129:
            { yybegin(BREAK); return BatchTypes.BREAK_ANNOTATION;
            }
          // fall through
          case 273: break;
          case 130:
            { yybegin(COLOR); return BatchTypes.COLOR_ANNOTATION;
            }
          // fall through
          case 274: break;
          case 131:
            { yybegin(SHIFT); return BatchTypes.SHIFT_ANNOTATION;
            }
          // fall through
          case 275: break;
          case 132:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 276: break;
          case 133:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 277: break;
          case 134:
            { yybegin(COLOR); return BatchTypes.COLOR_COMMAND;
            }
          // fall through
          case 278: break;
          case 135:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 279: break;
          case 136:
            { yybegin(FOR); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 280: break;
          case 137:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 281: break;
          case 138:
            { yybegin(ATTRIB); return BatchTypes.ATTRIB_ANNOTATION;
            }
          // fall through
          case 282: break;
          case 139:
            { yybegin(ATTRIB); return BatchTypes.ATTRIB_COMMAND;
            }
          // fall through
          case 283: break;
          case 140:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_ANNOTATION;
            }
          // fall through
          case 284: break;
          case 141:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_ANNOTATION;
            }
          // fall through
          case 285: break;
          case 142:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 286: break;
          case 143:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 287: break;
          case 144:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 288: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
