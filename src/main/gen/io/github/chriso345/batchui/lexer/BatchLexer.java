// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int CALL = 8;
  public static final int COMMAND = 10;
  public static final int ECHO = 12;
  public static final int ECHO_STRING = 14;
  public static final int EXIT = 16;
  public static final int GOTO = 18;
  public static final int IF = 20;
  public static final int IF_ERRORLEVEL = 22;
  public static final int IF_EXIST = 24;
  public static final int IF_STANDARD = 26;
  public static final int LABEL = 28;
  public static final int MORE = 30;
  public static final int REM = 32;
  public static final int SET = 34;
  public static final int SET_LOCAL = 36;
  public static final int SHIFT = 38;
  public static final int SET_VALUE = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  4,  4,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\0\1\4\2\0\1\5\1\6\4\0\1\7\1\10"+
    "\2\0\1\11\11\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\32\1\33\1\34\1\35"+
    "\1\36\1\32\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\32\1\45\2\32\1\0\1\46\4\0\1\21\1\22"+
    "\1\47\1\24\1\25\1\26\1\27\1\30\1\31\2\32"+
    "\1\33\1\34\1\35\1\36\1\50\1\37\1\40\1\51"+
    "\1\42\1\43\1\44\1\32\1\45\2\32\1\0\1\52"+
    "\1\0\1\53\261\0\2\54\115\0\1\55\u0380\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\2\2\1\0\1\1\1\3\1\4\1\5"+
    "\1\3\1\6\1\3\2\1\1\3\1\7\1\10\1\4"+
    "\1\7\1\11\1\12\1\2\2\13\1\14\2\13\1\15"+
    "\1\16\1\2\1\0\1\15\1\13\1\4\1\13\1\17"+
    "\2\13\1\20\1\21\1\5\1\22\1\23\1\2\1\0"+
    "\1\13\1\4\2\13\7\22\1\13\1\24\1\25\1\2"+
    "\1\0\1\13\1\4\2\13\1\24\1\13\1\26\1\4"+
    "\1\27\1\4\1\30\1\31\1\32\4\31\1\1\1\33"+
    "\1\17\1\30\3\17\1\34\4\17\1\35\1\36\1\2"+
    "\1\0\1\17\1\4\1\17\1\35\1\17\4\35\1\17"+
    "\1\37\1\40\1\41\3\40\1\42\1\4\1\43\1\44"+
    "\1\45\1\46\1\47\1\4\1\50\1\51\1\2\1\0"+
    "\1\50\1\4\1\1\1\2\1\0\1\1\1\3\1\52"+
    "\2\53\1\0\1\53\1\1\1\7\1\13\2\15\1\16"+
    "\1\0\1\15\2\22\1\23\1\0\6\22\1\54\3\22"+
    "\2\24\1\25\1\0\2\24\1\26\1\55\7\31\1\34"+
    "\2\35\1\36\1\0\1\56\5\35\2\57\1\60\1\0"+
    "\1\61\1\62\2\50\1\51\1\0\1\50\1\63\1\1"+
    "\1\63\1\0\1\30\1\53\1\64\1\53\1\52\1\7"+
    "\2\15\1\0\1\65\1\66\1\22\1\66\1\0\7\22"+
    "\1\67\1\22\1\70\1\24\1\70\2\0\1\71\1\72"+
    "\3\31\1\35\1\31\1\0\2\50\1\0\1\73\2\63"+
    "\1\64\1\74\1\15\2\66\1\22\1\75\1\76\1\22"+
    "\1\77\1\100\1\101\2\22\2\70\4\31\1\50\1\102"+
    "\2\22\1\103\1\31\1\104\2\22\1\31\2\22\1\31"+
    "\1\105\1\106\2\31\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u0422\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u0508\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u0508\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u0844\0\u08ce\0\u0508\0\u08fc"+
    "\0\u092a\0\u0958\0\u0986\0\u0508\0\u09b4\0\u09e2\0\u0a10\0\u0a3e"+
    "\0\u0a6c\0\u0a3e\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0cf0\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u12b0\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u0508\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u175c\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u0508\0\u0508\0\u1870\0\u189e\0\u18cc"+
    "\0\u18fa\0\u1928\0\u1956\0\u0508\0\u1984\0\u19b2\0\u19e0\0\u1a0e"+
    "\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e"+
    "\0\u1bac\0\u1bda\0\u1c08\0\u1a6a\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u0e32\0\u1e02"+
    "\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72"+
    "\0\u1fa0\0\u1fce\0\u1ffc\0\u1f72\0\u202a\0\u2058\0\u2086\0\u20b4"+
    "\0\u20e2\0\u1506\0\u14aa\0\u2110\0\u213e\0\u0508\0\u0e32\0\u216c"+
    "\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u0ffe\0\u2252\0\u0508\0\u2280"+
    "\0\u0ffe\0\u22ae\0\u0508\0\u22dc\0\u0ffe\0\u230a\0\u2338\0\u0508"+
    "\0\u2366\0\u1984\0\u1a6a\0\u2394\0\u0508\0\u23c2\0\u23f0\0\u241e"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u1cc0"+
    "\0\u258e\0\u0508\0\u25bc\0\u25ea\0\u2618\0\u0eea\0\u2646\0\u2674"+
    "\0\u1f72\0\u26a2\0\u0508\0\u26d0\0\u26fe\0\u0508\0\u272c\0\u216c"+
    "\0\u17b8\0\u1814\0\u1870\0\u05ee\0\u1a0e\0\u1a98\0\u1af4\0\u275a"+
    "\0\u1a6a\0\u1a6a\0\u2788\0\u1a6a\0\u1a6a\0\u1a6a\0\u27b6\0\u27e4"+
    "\0\u1cee\0\u1d4a\0\u2812\0\u2840\0\u1fa0\0\u1ffc\0\u21f6\0\u1a6a"+
    "\0\u286e\0\u289c\0\u1a6a\0\u28ca\0\u0eea\0\u28f8\0\u2926\0\u2954"+
    "\0\u2982\0\u29b0\0\u29de\0\u1a6a\0\u1a6a\0\u2a0c\0\u2a3a\0\u0eea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\1\30\1\25\1\31\1\32\1\25"+
    "\1\33\3\25\1\34\1\35\1\36\1\37\1\40\17\25"+
    "\1\41\11\25\1\42\3\25\1\43\1\44\2\0\2\43"+
    "\1\45\1\43\1\45\3\43\4\45\5\43\1\46\24\43"+
    "\1\45\3\43\1\47\1\50\1\51\1\0\2\47\1\52"+
    "\1\47\1\45\3\47\1\45\1\53\1\54\1\55\32\47"+
    "\1\56\3\47\1\57\1\60\1\61\1\62\1\57\1\63"+
    "\1\64\1\57\1\65\3\57\1\65\1\66\1\67\1\70"+
    "\32\57\1\71\3\57\1\72\1\73\1\51\1\0\2\72"+
    "\1\45\1\72\1\45\3\72\1\74\3\45\32\72\1\45"+
    "\3\72\1\75\1\76\1\77\1\100\2\75\1\101\1\75"+
    "\1\102\3\75\1\102\1\103\1\45\1\104\1\75\1\105"+
    "\1\75\1\106\1\75\1\107\1\75\1\110\1\75\1\111"+
    "\2\75\1\112\4\75\1\113\5\75\1\106\1\75\1\113"+
    "\1\114\1\75\1\111\1\113\1\115\1\116\1\117\1\120"+
    "\2\115\1\121\1\115\1\122\3\115\1\122\1\123\1\45"+
    "\1\124\16\115\1\125\13\115\1\126\4\115\1\127\1\117"+
    "\1\120\2\115\1\121\1\115\1\122\3\115\1\122\1\123"+
    "\1\45\1\124\32\115\1\126\3\115\1\130\1\131\1\51"+
    "\1\0\2\130\1\52\1\130\1\45\1\132\2\133\1\45"+
    "\1\53\1\45\1\55\32\130\1\56\3\130\1\134\1\135"+
    "\1\51\1\0\2\134\1\52\1\134\1\45\3\134\1\45"+
    "\1\53\1\45\1\55\5\134\1\136\1\134\1\137\3\134"+
    "\1\140\1\134\1\141\14\134\1\56\3\134\1\142\1\143"+
    "\1\51\1\0\2\142\1\144\1\142\1\45\1\142\2\145"+
    "\1\45\1\146\1\45\1\147\32\142\1\150\3\142\1\25"+
    "\1\151\1\27\1\30\2\25\1\152\1\25\1\33\3\25"+
    "\1\33\1\153\1\45\1\154\32\25\1\155\3\25\1\156"+
    "\1\157\1\160\1\161\2\156\1\162\1\156\1\163\3\156"+
    "\1\163\1\164\1\165\1\166\5\156\1\167\1\156\1\170"+
    "\3\156\1\171\1\156\1\172\14\156\1\173\3\156\1\72"+
    "\1\174\1\51\1\0\2\72\1\45\1\72\1\45\3\72"+
    "\4\45\32\72\1\45\3\72\1\175\1\176\1\51\1\0"+
    "\2\175\1\52\1\177\1\45\1\200\2\175\1\45\1\53"+
    "\1\45\1\55\1\175\25\201\1\175\3\201\1\56\3\175"+
    "\2\202\1\51\53\202\1\203\1\204\1\51\1\0\2\203"+
    "\1\45\1\203\1\45\3\203\2\45\1\205\1\45\32\203"+
    "\1\45\3\203\1\206\1\207\1\51\1\0\2\206\1\45"+
    "\1\206\1\45\3\206\4\45\32\206\1\45\3\206\1\130"+
    "\1\210\1\51\1\0\2\130\1\52\1\130\1\45\1\211"+
    "\2\130\1\45\1\53\1\45\1\55\32\130\1\56\3\130"+
    "\1\212\1\213\1\214\1\215\1\212\1\216\1\217\1\212"+
    "\1\217\3\212\2\217\1\67\1\217\32\212\1\217\3\212"+
    "\1\142\3\0\1\220\1\142\1\0\1\142\1\0\3\142"+
    "\4\0\32\142\1\0\3\142\1\0\1\221\2\0\1\222"+
    "\53\0\1\51\1\0\1\222\55\0\1\222\51\0\1\142"+
    "\3\0\1\220\1\142\1\0\1\142\1\0\3\142\4\0"+
    "\32\142\1\0\1\223\2\142\4\0\1\222\1\0\1\224"+
    "\53\0\1\222\7\0\1\225\45\0\1\222\10\0\1\224"+
    "\122\0\1\222\12\0\1\224\36\0\1\226\3\0\1\227"+
    "\1\226\1\0\1\226\1\0\3\226\1\230\3\0\20\226"+
    "\1\231\11\226\1\0\3\226\1\142\3\0\1\220\1\142"+
    "\1\0\1\142\1\0\3\142\4\0\5\142\1\232\24\142"+
    "\1\0\3\142\4\0\1\222\45\0\1\224\3\0\1\43"+
    "\3\0\2\43\1\0\1\43\1\0\3\43\4\0\32\43"+
    "\1\0\3\43\1\0\1\44\54\0\1\43\3\0\2\43"+
    "\1\0\1\43\1\0\3\43\4\0\3\43\1\233\23\43"+
    "\1\233\2\43\1\0\3\43\1\47\3\0\2\47\1\0"+
    "\1\47\1\0\3\47\4\0\32\47\1\0\3\47\1\0"+
    "\1\50\56\0\1\51\61\0\1\234\64\0\1\234\57\0"+
    "\1\234\110\0\1\234\3\0\1\235\3\0\1\236\1\235"+
    "\1\0\1\235\1\0\3\235\4\0\32\235\1\0\3\235"+
    "\1\0\1\237\2\0\1\240\53\0\1\51\1\0\1\240"+
    "\55\0\1\240\51\0\1\235\3\0\1\236\1\235\1\0"+
    "\1\235\1\0\3\235\4\0\32\235\1\0\1\241\2\235"+
    "\4\0\1\240\1\0\1\234\53\0\1\240\10\0\1\234"+
    "\44\0\1\240\12\0\1\234\42\0\1\240\45\0\1\234"+
    "\3\0\1\72\3\0\2\72\1\0\1\72\1\0\3\72"+
    "\4\0\32\72\1\0\3\72\1\0\1\73\54\0\1\242"+
    "\3\0\1\243\1\242\1\0\1\242\1\0\3\242\4\0"+
    "\32\242\1\0\3\242\1\0\1\244\2\0\1\245\53\0"+
    "\1\51\1\0\1\245\55\0\1\245\55\0\1\245\1\0"+
    "\1\234\53\0\1\245\10\0\1\234\44\0\1\245\12\0"+
    "\1\234\36\0\1\242\3\0\1\243\1\242\1\0\1\242"+
    "\1\0\3\242\4\0\21\242\1\246\7\242\1\246\1\0"+
    "\2\242\1\246\1\242\3\0\1\243\1\242\1\0\1\242"+
    "\1\0\3\242\4\0\1\242\1\247\30\242\1\0\4\242"+
    "\3\0\1\243\1\242\1\0\1\242\1\0\3\242\4\0"+
    "\3\242\1\250\11\242\1\251\7\242\1\252\1\242\1\250"+
    "\2\242\1\0\4\242\3\0\1\243\1\242\1\0\1\242"+
    "\1\0\3\242\4\0\16\242\1\253\13\242\1\0\4\242"+
    "\3\0\1\243\1\242\1\0\1\242\1\0\3\242\4\0"+
    "\6\242\1\254\23\242\1\0\4\242\3\0\1\243\1\242"+
    "\1\0\1\242\1\0\3\242\4\0\16\242\1\255\13\242"+
    "\1\0\4\242\3\0\1\243\1\242\1\0\1\242\1\0"+
    "\3\242\4\0\5\242\1\256\2\242\1\257\21\242\1\0"+
    "\3\242\4\0\1\245\45\0\1\234\3\0\1\260\3\0"+
    "\1\261\1\260\1\0\1\260\1\0\3\260\4\0\32\260"+
    "\1\0\3\260\1\0\1\262\2\0\1\263\53\0\1\51"+
    "\1\0\1\263\55\0\1\263\55\0\1\263\1\0\1\234"+
    "\53\0\1\263\10\0\1\234\44\0\1\263\12\0\1\234"+
    "\36\0\1\260\3\0\1\261\1\260\1\0\1\260\1\0"+
    "\3\260\4\0\6\260\1\264\6\260\1\265\14\260\1\0"+
    "\3\260\4\0\1\263\45\0\1\234\4\0\1\266\2\0"+
    "\1\263\51\0\1\130\3\0\2\130\1\0\1\130\1\0"+
    "\3\130\4\0\32\130\1\0\3\130\1\0\1\131\54\0"+
    "\1\130\3\0\2\130\1\0\1\130\1\0\3\130\4\0"+
    "\2\130\1\267\27\130\1\0\4\130\3\0\2\130\1\0"+
    "\1\130\1\0\1\130\2\133\4\0\32\130\1\0\3\130"+
    "\1\134\3\0\2\134\1\0\1\134\1\0\3\134\4\0"+
    "\32\134\1\0\3\134\1\0\1\135\54\0\1\134\3\0"+
    "\2\134\1\0\1\134\1\0\3\134\4\0\17\134\1\270"+
    "\1\271\4\134\1\272\4\134\1\0\4\134\3\0\2\134"+
    "\1\0\1\134\1\0\3\134\4\0\5\134\1\273\14\134"+
    "\1\274\7\134\1\0\4\134\3\0\2\134\1\0\1\134"+
    "\1\0\3\134\4\0\5\134\1\273\13\134\1\275\7\134"+
    "\1\275\1\0\2\134\1\275\1\134\3\0\2\134\1\0"+
    "\1\134\1\0\3\134\4\0\5\134\1\273\10\134\1\276"+
    "\13\134\1\0\3\134\1\142\3\0\2\142\1\0\1\142"+
    "\1\0\3\142\4\0\32\142\1\0\3\142\1\0\1\143"+
    "\62\0\1\67\47\0\1\142\3\0\2\142\1\0\1\142"+
    "\1\0\1\142\2\145\4\0\32\142\1\0\3\142\15\0"+
    "\1\67\57\0\1\67\110\0\1\67\4\0\1\277\2\0"+
    "\1\222\55\0\1\222\1\0\1\67\53\0\1\222\10\0"+
    "\1\67\44\0\1\222\12\0\1\67\42\0\1\222\45\0"+
    "\1\67\3\0\1\300\3\0\1\301\1\300\1\0\1\300"+
    "\1\0\3\300\2\0\1\300\1\0\32\300\1\0\3\300"+
    "\1\0\1\302\2\0\1\303\53\0\1\51\1\0\1\303"+
    "\55\0\1\303\55\0\1\303\1\0\1\67\53\0\1\303"+
    "\10\0\1\67\40\0\1\300\3\0\2\300\1\0\1\300"+
    "\1\0\3\300\2\0\1\304\1\0\32\300\1\0\3\300"+
    "\4\0\1\303\12\0\1\67\36\0\1\300\3\0\1\301"+
    "\1\300\1\0\1\300\1\0\3\300\2\0\1\300\1\0"+
    "\17\300\1\305\12\300\1\0\4\300\3\0\1\301\1\300"+
    "\1\0\1\300\1\0\3\300\2\0\1\300\1\0\5\300"+
    "\1\306\14\300\1\307\7\300\1\0\4\300\3\0\1\301"+
    "\1\300\1\0\1\300\1\0\3\300\2\0\1\300\1\0"+
    "\5\300\1\306\13\300\1\310\7\300\1\310\1\0\2\300"+
    "\1\310\1\300\3\0\1\301\1\300\1\0\1\300\1\0"+
    "\3\300\2\0\1\300\1\0\5\300\1\306\10\300\1\311"+
    "\13\300\1\0\3\300\4\0\1\303\45\0\1\67\4\0"+
    "\1\174\54\0\1\175\3\0\2\175\1\0\1\175\1\0"+
    "\3\175\4\0\32\175\1\0\3\175\1\0\1\176\54\0"+
    "\1\175\3\0\2\175\1\0\1\175\1\0\1\175\2\312"+
    "\4\0\32\175\1\0\4\175\3\0\2\175\1\0\1\175"+
    "\1\0\3\175\4\0\22\175\1\177\4\175\3\313\1\0"+
    "\4\175\3\0\2\175\1\0\1\175\1\0\3\175\1\314"+
    "\3\0\1\175\25\201\1\175\3\201\1\0\3\175\2\202"+
    "\1\0\53\202\1\203\1\315\2\0\2\203\1\0\1\203"+
    "\1\0\3\203\2\0\1\316\1\0\32\203\1\0\3\203"+
    "\1\0\1\204\54\0\1\206\3\0\2\206\1\0\1\206"+
    "\1\0\3\206\4\0\32\206\1\0\3\206\1\0\1\207"+
    "\55\0\1\210\54\0\1\130\3\0\2\130\1\0\1\130"+
    "\1\0\1\130\1\317\1\130\4\0\32\130\1\0\3\130"+
    "\1\320\3\0\1\321\1\320\1\0\1\320\1\0\3\320"+
    "\4\0\32\320\1\0\3\320\1\0\1\322\2\0\1\323"+
    "\53\0\1\51\1\0\1\323\55\0\1\323\51\0\1\320"+
    "\3\0\1\321\1\320\1\0\1\320\1\0\3\320\4\0"+
    "\32\320\1\0\1\324\2\320\1\220\1\222\1\0\1\222"+
    "\1\325\1\220\1\222\1\220\1\222\3\220\4\222\26\220"+
    "\1\326\3\220\1\222\3\220\1\0\1\221\54\0\2\222"+
    "\1\0\1\222\1\327\41\222\1\330\7\222\1\142\3\0"+
    "\2\142\1\0\1\142\1\0\1\142\2\331\4\0\32\142"+
    "\1\0\1\331\2\142\1\226\3\0\2\226\1\0\1\226"+
    "\1\0\3\226\4\0\32\226\1\0\3\226\1\227\1\222"+
    "\1\0\1\222\1\226\1\227\1\222\1\227\1\222\3\227"+
    "\4\222\26\227\1\332\3\227\1\222\3\227\14\0\1\333"+
    "\41\0\1\226\3\0\2\226\1\0\1\226\1\0\3\226"+
    "\4\0\5\226\1\334\24\226\1\0\3\226\1\142\3\0"+
    "\2\142\1\0\1\142\1\0\3\142\4\0\14\142\1\335"+
    "\15\142\1\0\3\142\1\43\3\0\2\43\1\0\1\43"+
    "\1\0\3\43\4\0\10\43\1\336\21\43\1\0\3\43"+
    "\1\235\3\0\2\235\1\0\1\235\1\0\3\235\4\0"+
    "\32\235\1\0\3\235\1\236\1\240\1\0\1\240\1\235"+
    "\1\236\1\240\1\236\1\240\3\236\4\240\26\236\1\337"+
    "\3\236\1\240\3\236\1\0\1\237\54\0\2\240\1\0"+
    "\1\240\1\340\41\240\1\341\7\240\1\235\3\0\2\235"+
    "\1\0\1\235\1\0\1\235\2\342\4\0\32\235\1\0"+
    "\1\342\2\235\1\242\3\0\2\242\1\0\1\242\1\0"+
    "\3\242\4\0\32\242\1\0\3\242\1\243\1\245\1\0"+
    "\1\245\1\343\1\243\1\245\1\243\1\245\3\243\4\245"+
    "\26\243\1\344\3\243\1\245\3\243\1\0\1\244\54\0"+
    "\2\245\1\0\1\245\1\345\41\245\1\346\7\245\1\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\21\242"+
    "\1\347\7\242\1\347\1\0\2\242\1\347\1\242\3\0"+
    "\2\242\1\0\1\242\1\0\3\242\4\0\13\242\1\350"+
    "\16\242\1\0\4\242\3\0\2\242\1\0\1\242\1\0"+
    "\3\242\4\0\10\242\1\351\21\242\1\0\4\242\3\0"+
    "\2\242\1\0\1\242\1\0\3\242\4\0\4\242\1\352"+
    "\25\242\1\0\4\242\3\0\2\242\1\0\1\242\1\0"+
    "\3\242\4\0\11\242\1\353\20\242\1\0\1\242\1\353"+
    "\2\242\3\0\2\242\1\0\1\242\1\0\3\242\4\0"+
    "\22\242\1\354\7\242\1\0\4\242\3\0\2\242\1\0"+
    "\1\242\1\0\3\242\4\0\20\242\1\355\11\242\1\0"+
    "\4\242\3\0\2\242\1\0\1\242\1\0\3\242\4\0"+
    "\22\242\1\356\7\242\1\0\4\242\3\0\2\242\1\0"+
    "\1\242\1\0\3\242\4\0\11\242\1\357\20\242\1\0"+
    "\1\242\1\357\1\242\1\260\3\0\2\260\1\0\1\260"+
    "\1\0\3\260\4\0\32\260\1\0\3\260\1\261\1\263"+
    "\1\0\1\263\1\360\1\261\1\263\1\261\1\263\3\261"+
    "\4\263\26\261\1\361\3\261\1\263\3\261\1\0\1\262"+
    "\54\0\2\263\1\0\1\263\1\362\41\263\1\363\7\263"+
    "\1\260\3\0\2\260\1\0\1\260\1\0\3\260\4\0"+
    "\6\260\1\265\23\260\1\0\4\260\1\364\1\365\1\0"+
    "\2\260\1\0\1\260\1\0\3\260\4\0\32\260\1\0"+
    "\3\260\1\0\1\266\54\0\1\134\3\0\2\134\1\0"+
    "\1\134\1\0\3\134\4\0\23\134\1\366\6\134\1\0"+
    "\4\134\3\0\2\134\1\0\1\134\1\0\3\134\4\0"+
    "\20\134\1\367\11\134\1\0\4\134\3\0\2\134\1\0"+
    "\1\134\1\0\3\134\4\0\11\134\1\370\20\134\1\0"+
    "\1\134\1\370\2\134\3\0\2\134\1\0\1\134\1\0"+
    "\3\134\4\0\17\134\1\366\12\134\1\0\4\134\3\0"+
    "\2\134\1\0\1\134\1\0\3\134\4\0\20\134\1\366"+
    "\11\134\1\0\4\134\3\0\2\134\1\0\1\134\1\0"+
    "\3\134\4\0\21\134\1\366\7\134\1\366\1\0\2\134"+
    "\1\366\1\134\3\0\2\134\1\0\1\134\1\0\3\134"+
    "\4\0\22\134\1\366\7\134\1\0\3\134\1\0\1\277"+
    "\54\0\1\300\3\0\2\300\1\0\1\300\1\0\3\300"+
    "\2\0\1\300\1\0\32\300\1\0\3\300\1\301\1\303"+
    "\1\0\1\303\1\371\1\301\1\303\1\301\1\303\3\301"+
    "\2\303\1\301\1\303\26\301\1\372\3\301\1\303\3\301"+
    "\1\0\1\302\54\0\2\303\1\0\1\303\1\373\41\303"+
    "\1\374\7\303\1\300\3\0\2\300\1\0\1\300\1\0"+
    "\3\300\2\0\1\300\1\0\23\300\1\304\6\300\1\0"+
    "\4\300\3\0\2\300\1\0\1\300\1\0\3\300\2\0"+
    "\1\300\1\0\17\300\1\304\12\300\1\0\4\300\3\0"+
    "\2\300\1\0\1\300\1\0\3\300\2\0\1\300\1\0"+
    "\20\300\1\304\11\300\1\0\4\300\3\0\2\300\1\0"+
    "\1\300\1\0\3\300\2\0\1\300\1\0\21\300\1\304"+
    "\7\300\1\304\1\0\2\300\1\304\1\300\3\0\2\300"+
    "\1\0\1\300\1\0\3\300\2\0\1\300\1\0\22\300"+
    "\1\304\7\300\1\0\3\300\1\314\3\0\2\314\1\0"+
    "\1\314\1\0\3\314\4\0\32\314\1\0\3\314\1\0"+
    "\1\315\14\0\1\316\37\0\1\320\3\0\2\320\1\0"+
    "\1\320\1\0\3\320\4\0\32\320\1\0\3\320\1\321"+
    "\1\323\1\0\1\323\1\320\1\321\1\323\1\321\1\323"+
    "\3\321\4\323\26\321\1\375\3\321\1\323\3\321\1\0"+
    "\1\322\54\0\2\323\1\0\1\323\1\376\41\323\1\377"+
    "\7\323\1\320\3\0\2\320\1\0\1\320\1\0\1\320"+
    "\2\u0100\4\0\32\320\1\0\1\u0100\2\320\1\220\1\222"+
    "\1\0\1\222\1\u0101\1\220\1\222\1\220\1\222\3\220"+
    "\4\222\26\220\1\326\3\220\1\222\3\220\2\222\1\0"+
    "\1\222\1\u0102\41\222\1\330\7\222\1\227\1\222\1\0"+
    "\1\222\2\227\1\222\1\227\1\222\3\227\4\222\26\227"+
    "\1\332\3\227\1\222\3\227\1\226\3\0\2\226\1\0"+
    "\1\226\1\0\3\226\4\0\14\226\1\u0103\15\226\1\0"+
    "\3\226\1\43\3\0\2\43\1\0\1\43\1\0\3\43"+
    "\4\0\16\43\1\u0104\13\43\1\0\3\43\1\236\1\240"+
    "\1\0\1\240\2\236\1\240\1\236\1\240\3\236\4\240"+
    "\26\236\1\337\3\236\1\240\3\236\2\240\1\0\1\240"+
    "\1\u0105\41\240\1\341\7\240\1\243\1\245\1\0\1\245"+
    "\1\u0106\1\243\1\245\1\243\1\245\3\243\4\245\26\243"+
    "\1\344\3\243\1\245\3\243\2\245\1\0\1\245\1\u0107"+
    "\41\245\1\346\7\245\1\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\16\242\1\u0108\13\242\1\0\4\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\13\242"+
    "\1\u0109\16\242\1\0\4\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\16\242\1\u010a\13\242\1\0\4\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\13\242"+
    "\1\u010b\16\242\1\0\4\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\22\242\1\u010c\7\242\1\0\4\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\16\242"+
    "\1\u010d\13\242\1\0\4\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\5\242\1\u010e\24\242\1\0\4\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\13\242"+
    "\1\u010f\16\242\1\0\4\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\6\242\1\u0110\23\242\1\0\3\242"+
    "\1\261\1\263\1\0\1\263\1\u0111\1\261\1\263\1\261"+
    "\1\263\3\261\4\263\26\261\1\361\3\261\1\263\3\261"+
    "\2\263\1\0\1\263\1\u0112\41\263\1\363\7\263\1\0"+
    "\1\364\1\365\55\0\1\365\53\0\1\134\3\0\2\134"+
    "\1\0\1\134\1\0\3\134\4\0\16\134\1\u0113\13\134"+
    "\1\0\4\134\3\0\2\134\1\0\1\134\1\0\3\134"+
    "\4\0\21\134\1\u0114\7\134\1\u0114\1\0\2\134\1\u0114"+
    "\1\301\1\303\1\0\1\303\1\u0115\1\301\1\303\1\301"+
    "\1\303\3\301\2\303\1\301\1\303\26\301\1\372\3\301"+
    "\1\303\3\301\2\303\1\0\1\303\1\u0116\41\303\1\374"+
    "\7\303\1\321\1\323\1\0\1\323\2\321\1\323\1\321"+
    "\1\323\3\321\4\323\26\321\1\375\3\321\1\323\3\321"+
    "\2\323\1\0\1\323\1\u0117\41\323\1\377\7\323\1\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\3\242"+
    "\1\u0118\23\242\1\u0118\2\242\1\0\4\242\3\0\2\242"+
    "\1\0\1\242\1\0\3\242\4\0\16\242\1\u0119\13\242"+
    "\1\0\4\242\3\0\2\242\1\0\1\242\1\0\3\242"+
    "\4\0\16\242\1\u011a\13\242\1\0\4\242\3\0\2\242"+
    "\1\0\1\242\1\0\3\242\4\0\22\242\1\u011b\7\242"+
    "\1\0\3\242\1\134\3\0\2\134\1\0\1\134\1\0"+
    "\3\134\4\0\20\134\1\u011c\11\134\1\0\4\134\3\0"+
    "\2\134\1\0\1\134\1\0\3\134\4\0\22\134\1\u011d"+
    "\7\134\1\0\3\134\1\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\3\242\1\u011e\23\242\1\u011e\2\242"+
    "\1\0\4\242\3\0\2\242\1\0\1\242\1\0\3\242"+
    "\4\0\3\242\1\u011f\23\242\1\u011f\2\242\1\0\3\242"+
    "\1\134\3\0\2\134\1\0\1\134\1\0\3\134\4\0"+
    "\13\134\1\u0120\16\134\1\0\3\134\1\242\3\0\2\242"+
    "\1\0\1\242\1\0\3\242\4\0\1\242\1\u0121\30\242"+
    "\1\0\4\242\3\0\2\242\1\0\1\242\1\0\3\242"+
    "\4\0\1\242\1\u0122\30\242\1\0\3\242\1\134\3\0"+
    "\2\134\1\0\1\134\1\0\3\134\4\0\5\134\1\u0123"+
    "\24\134\1\0\3\134\1\242\3\0\2\242\1\0\1\242"+
    "\1\0\3\242\4\0\13\242\1\u0124\16\242\1\0\4\242"+
    "\3\0\2\242\1\0\1\242\1\0\3\242\4\0\13\242"+
    "\1\u0125\16\242\1\0\3\242\1\134\3\0\2\134\1\0"+
    "\1\134\1\0\3\134\4\0\24\134\1\u0126\5\134\1\0"+
    "\4\134\3\0\2\134\1\0\1\134\1\0\3\134\4\0"+
    "\5\134\1\u0127\24\134\1\0\4\134\3\0\2\134\1\0"+
    "\1\134\1\0\3\134\4\0\13\134\1\u0128\16\134\1\0"+
    "\3\134";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10856];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\3\1\1\0\5\1\1\11\6\1\1\11\6\1"+
    "\1\11\5\1\1\0\4\1\1\11\4\1\1\11\3\1"+
    "\1\0\17\1\1\0\40\1\1\0\23\1\1\11\7\1"+
    "\1\0\4\1\1\0\1\1\2\11\2\1\1\0\3\1"+
    "\1\11\3\1\1\0\4\1\1\0\15\1\1\0\17\1"+
    "\1\0\11\1\1\0\1\11\4\1\1\0\3\1\1\11"+
    "\1\0\2\1\1\11\4\1\1\11\1\0\3\1\1\11"+
    "\1\0\13\1\1\11\2\0\6\1\1\11\1\0\1\1"+
    "\1\11\1\0\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 72: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 74: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 5:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 76: break;
          case 6:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 77: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 78: break;
          case 8:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 9:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 80: break;
          case 10:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 81: break;
          case 11:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 82: break;
          case 12:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 83: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 84: break;
          case 14:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 15:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 86: break;
          case 16:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 87: break;
          case 17:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 88: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 89: break;
          case 19:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 20:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 91: break;
          case 21:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 92: break;
          case 22:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 93: break;
          case 23:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 24:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 95: break;
          case 25:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 96: break;
          case 26:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 97: break;
          case 27:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 28:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 99: break;
          case 29:
            { yybegin(COMMAND); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 100: break;
          case 30:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 101: break;
          case 31:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 102: break;
          case 32:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 103: break;
          case 33:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 104: break;
          case 34:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 105: break;
          case 35:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 106: break;
          case 36:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 107: break;
          case 37:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 108: break;
          case 38:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 39:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 40:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 111: break;
          case 41:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 42:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 113: break;
          case 43:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 114: break;
          case 44:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 115: break;
          case 45:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 116: break;
          case 46:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 117: break;
          case 47:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 118: break;
          case 48:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 119: break;
          case 49:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 120: break;
          case 50:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 121: break;
          case 51:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 122: break;
          case 52:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 123: break;
          case 53:
            { yybegin(ASSOC_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 124: break;
          case 54:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 125: break;
          case 55:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 126: break;
          case 56:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 127: break;
          case 57:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 128: break;
          case 58:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 129: break;
          case 59:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 130: break;
          case 60:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 131: break;
          case 61:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 132: break;
          case 62:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 133: break;
          case 63:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 134: break;
          case 64:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 135: break;
          case 65:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 136: break;
          case 66:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 137: break;
          case 67:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 138: break;
          case 68:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 139: break;
          case 69:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 140: break;
          case 70:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 141: break;
          case 71:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
