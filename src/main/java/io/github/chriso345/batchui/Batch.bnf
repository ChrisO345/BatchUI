{
    parserClass = "io.github.chriso345.batchui.parser.BatchParser"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Batch"
    psiImplClassSuffix = "Impl"
    psiPackage = "io.github.chriso345.batchui.psi"
    psiImplPackage = "io.github.chriso345.batchui.psi.impl"

    elementTypeHolderClass = "io.github.chriso345.batchui.psi.BatchTypes"
    elementTypeClass = "io.github.chriso345.batchui.psi.BatchElementType"
    tokenTypeClass = "io.github.chriso345.batchui.psi.BatchTokenType"

    psiImplUtilClass = "io.github.chriso345.batchui.psi.impl.BatchPsiImplUtil"
}

batchFile ::= item_*

// May be needed for reference completions later??
label ::= (LABEL_MARKER? FUNC_LABEL) {
    methods = [
        getLabelMarker
        getFuncLabel
    ]
}

//cmd_terminator ::= (PIPE|AND|LESS|GREATER|DOUBLE_PIPE|DOUBLE_AND|DOUBLE_LESS|DOUBLE_GREATER)

types_ ::= STRING | NUMERIC | PLAINTEXT

private item_ ::= (
    prefix          // ECHO, SET, etc
    | label
    | COMMENT        // REM, ::
    | CRLF
)

prefix ::= (DECORATOR? command)

command ::= command_reference | annotation_reference | COMMENT_REFERENCE

command_reference ::= (
    ECHO_COMMAND echo_arguments?
    | GOTO_COMMAND label?
    | CALL_COMMAND call_arguments?
    | SETLOCAL_COMMAND setlocal_arguments?
    | ENDLOCAL_COMMAND
    | SET_COMMAND set_arguments?
    | SHIFT_COMMAND shift_arguments?
    | EXIT_COMMAND exit_arguments?
) (COMMAND_TERMINATOR command)?

annotation_reference ::= (
    REM_DECORATOR COMMENT?
    | ECHO_ANNOTATION echo_arguments?
) (COMMAND_TERMINATOR command)?

echo_arguments ::= (TOGGLE | (STRING|PLAINTEXT)*)?

call_arguments ::= label? // todo: add extra arguments
set_arguments ::= EXTENSION? VARIABLE ASSIGNMENT types_?
setlocal_arguments ::= SETLOCAL_PARAMETER SETLOCAL_PARAMETER?
shift_arguments ::= EXTENSION
exit_arguments ::= EXTENSION NUMERIC?