// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int CALL = 8;
  public static final int COMMAND = 10;
  public static final int ECHO = 12;
  public static final int ECHO_STRING = 14;
  public static final int EXIT = 16;
  public static final int GOTO = 18;
  public static final int IF = 20;
  public static final int IF_ERRORLEVEL = 22;
  public static final int IF_EXIST = 24;
  public static final int IF_STANDARD = 26;
  public static final int LABEL = 28;
  public static final int MORE = 30;
  public static final int REM = 32;
  public static final int SET = 34;
  public static final int SET_LOCAL = 36;
  public static final int SHIFT = 38;
  public static final int SET_VALUE = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  4,  4,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\0\1\5\2\0\1\6\1\7\4\0\1\10\1\11"+
    "\2\0\1\12\11\13\1\14\1\15\1\11\1\16\1\17"+
    "\1\20\1\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\33\1\34\1\35\1\36"+
    "\1\37\1\33\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\33\1\46\2\33\1\0\1\47\4\0\1\22\1\23"+
    "\1\50\1\25\1\26\1\27\1\30\1\31\1\32\2\33"+
    "\1\34\1\35\1\36\1\37\1\51\1\40\1\41\1\52"+
    "\1\43\1\44\1\45\1\33\1\46\2\33\1\0\1\53"+
    "\1\0\1\54\6\0\1\3\252\0\2\55\115\0\1\56"+
    "\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\2\2\1\1\1\0\1\1\1\3\1\4"+
    "\1\5\1\3\1\6\1\3\2\1\1\3\1\7\1\10"+
    "\1\7\1\4\1\7\1\11\1\12\1\2\1\11\2\13"+
    "\1\14\2\13\1\15\1\16\1\2\1\15\1\0\1\15"+
    "\1\13\1\4\1\13\1\17\2\13\1\20\1\21\1\20"+
    "\1\5\1\22\1\23\1\2\1\22\1\0\1\13\1\4"+
    "\2\13\7\22\1\13\1\24\1\25\1\2\1\24\1\0"+
    "\1\13\1\4\2\13\1\24\1\13\1\26\1\4\1\27"+
    "\2\4\1\30\1\31\1\32\5\31\1\1\1\33\1\1"+
    "\1\17\1\30\3\17\1\34\4\17\1\35\1\36\1\2"+
    "\1\35\1\0\1\17\1\4\1\17\1\35\1\17\4\35"+
    "\1\17\1\37\1\40\1\41\4\40\1\42\1\4\1\43"+
    "\1\4\1\44\1\45\1\46\1\45\1\47\1\4\1\50"+
    "\1\51\1\2\1\50\1\0\1\50\1\4\1\1\1\2"+
    "\1\4\1\0\2\1\1\3\1\52\3\53\1\4\1\53"+
    "\1\1\1\7\1\13\3\15\1\16\1\4\1\0\2\15"+
    "\3\22\1\23\1\4\1\0\7\22\1\54\3\22\3\24"+
    "\1\25\1\4\1\0\3\24\1\26\1\55\7\31\1\34"+
    "\3\35\1\36\1\4\1\0\1\35\1\56\5\35\2\57"+
    "\1\60\1\4\1\61\1\0\1\61\1\62\3\50\1\51"+
    "\1\4\1\0\2\50\1\63\1\1\1\63\1\4\1\63"+
    "\1\0\1\63\1\1\1\30\2\53\1\64\1\53\1\52"+
    "\1\7\2\15\1\4\1\15\1\0\1\15\1\65\1\66"+
    "\1\22\1\66\1\4\1\66\1\0\1\66\10\22\1\67"+
    "\1\22\1\70\1\24\1\70\1\4\1\70\1\0\1\70"+
    "\1\24\1\4\1\71\1\72\3\31\1\35\1\31\1\4"+
    "\1\31\1\0\1\31\1\35\1\60\2\50\1\4\1\50"+
    "\1\0\1\50\1\73\4\63\1\53\1\64\1\74\2\15"+
    "\4\66\1\22\1\75\1\76\1\22\1\77\1\100\1\101"+
    "\2\22\4\70\6\31\2\50\1\102\2\22\1\103\1\31"+
    "\1\104\2\22\1\31\2\22\1\31\1\105\1\106\2\31"+
    "\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u0582\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0582\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\u0a19\0\u0582\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0582\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695"+
    "\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d"+
    "\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985"+
    "\0\u19b4\0\u0582\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace"+
    "\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46"+
    "\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u0582\0\u0582\0\u1d31\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u0582\0\u1e7a\0\u1ea9"+
    "\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021"+
    "\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199"+
    "\0\u21c8\0\u21f7\0\u2226\0\u1ff2\0\u2255\0\u2284\0\u22b3\0\u22e2"+
    "\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a"+
    "\0\u2489\0\u1086\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3"+
    "\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b"+
    "\0\u274a\0\u2630\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u189a"+
    "\0\u180d\0\u2864\0\u2893\0\u0582\0\u28c2\0\u28f1\0\u1086\0\u2920"+
    "\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u12ba"+
    "\0\u2a98\0\u0582\0\u2ac7\0\u28f1\0\u2af6\0\u1318\0\u2b25\0\u12ba"+
    "\0\u2b54\0\u2b83\0\u0582\0\u2bb2\0\u12ba\0\u2be1\0\u2c10\0\u0582"+
    "\0\u2c3f\0\u28f1\0\u2c6e\0\u2c9d\0\u1e7a\0\u1ff2\0\u2ccc\0\u0582"+
    "\0\u2cfb\0\u28f1\0\u2d2a\0\u2021\0\u2d59\0\u2d88\0\u2db7\0\u2de6"+
    "\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u22e2\0\u2f2f"+
    "\0\u0582\0\u2f5e\0\u28f1\0\u2f8d\0\u2311\0\u2fbc\0\u2feb\0\u301a"+
    "\0\u1171\0\u3049\0\u3078\0\u2630\0\u30a7\0\u0582\0\u30d6\0\u28f1"+
    "\0\u3105\0\u265f\0\u3134\0\u3163\0\u3192\0\u0582\0\u31c1\0\u28f1"+
    "\0\u31f0\0\u321f\0\u2920\0\u1c17\0\u1c75\0\u1ca4\0\u1cd3\0\u324e"+
    "\0\u1d31\0\u066d\0\u1f36\0\u1f65\0\u2050\0\u20ae\0\u20dd\0\u210c"+
    "\0\u327d\0\u1ff2\0\u1ff2\0\u32ac\0\u1ff2\0\u1ff2\0\u1ff2\0\u32db"+
    "\0\u330a\0\u2340\0\u239e\0\u23cd\0\u23fc\0\u3339\0\u3368\0\u268e"+
    "\0\u26ec\0\u271b\0\u274a\0\u29dc\0\u2a0b\0\u1ff2\0\u3397\0\u33c6"+
    "\0\u1ff2\0\u33f5\0\u1171\0\u3424\0\u3453\0\u3482\0\u34b1\0\u34e0"+
    "\0\u350f\0\u1ff2\0\u1ff2\0\u353e\0\u356d\0\u1171";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\1\30\1\31\1\25\1\32\1\33"+
    "\1\25\1\34\3\25\1\35\1\36\1\37\1\40\1\41"+
    "\17\25\1\42\11\25\1\43\3\25\1\44\1\45\1\0"+
    "\1\46\1\0\2\44\1\47\1\44\1\47\3\44\4\47"+
    "\5\44\1\50\24\44\1\47\3\44\1\51\1\52\1\53"+
    "\1\54\1\0\2\51\1\55\1\51\1\47\3\51\1\47"+
    "\1\56\1\57\1\60\32\51\1\61\3\51\1\62\1\63"+
    "\1\64\1\65\1\66\1\62\1\67\1\70\1\62\1\71"+
    "\3\62\1\71\1\72\1\73\1\74\32\62\1\75\3\62"+
    "\1\76\1\77\1\53\1\100\1\0\2\76\1\47\1\76"+
    "\1\47\3\76\1\101\3\47\32\76\1\47\3\76\1\102"+
    "\1\103\1\104\1\105\1\106\2\102\1\107\1\102\1\110"+
    "\3\102\1\110\1\111\1\47\1\112\1\102\1\113\1\102"+
    "\1\114\1\102\1\115\1\102\1\116\1\102\1\117\2\102"+
    "\1\120\4\102\1\121\5\102\1\114\1\102\1\121\1\122"+
    "\1\102\1\117\1\121\1\123\1\124\1\125\1\126\1\127"+
    "\2\123\1\130\1\123\1\131\3\123\1\131\1\132\1\47"+
    "\1\133\16\123\1\134\13\123\1\135\4\123\1\136\1\125"+
    "\1\126\1\127\2\123\1\130\1\123\1\131\3\123\1\131"+
    "\1\132\1\47\1\133\32\123\1\135\3\123\1\137\1\140"+
    "\1\53\1\141\1\0\2\137\1\55\1\137\1\47\1\142"+
    "\2\143\1\47\1\56\1\47\1\60\32\137\1\61\3\137"+
    "\1\144\1\145\1\53\1\146\1\0\2\144\1\55\1\144"+
    "\1\47\3\144\1\47\1\56\1\47\1\60\5\144\1\147"+
    "\1\144\1\150\3\144\1\151\1\144\1\152\14\144\1\61"+
    "\3\144\1\153\1\154\1\53\1\155\1\0\2\153\1\156"+
    "\1\153\1\47\1\153\2\157\1\47\1\160\1\47\1\161"+
    "\32\153\1\162\3\153\1\25\1\163\1\27\1\30\1\31"+
    "\2\25\1\164\1\25\1\34\3\25\1\34\1\165\1\47"+
    "\1\166\32\25\1\167\3\25\1\170\1\171\1\172\1\173"+
    "\1\174\2\170\1\175\1\170\1\176\3\170\1\176\1\177"+
    "\1\200\1\201\5\170\1\202\1\170\1\203\3\170\1\204"+
    "\1\170\1\205\14\170\1\206\3\170\1\76\1\207\1\53"+
    "\1\100\1\0\2\76\1\47\1\76\1\47\3\76\4\47"+
    "\32\76\1\47\3\76\1\210\1\211\1\53\1\212\1\0"+
    "\2\210\1\55\1\213\1\47\1\214\2\210\1\47\1\56"+
    "\1\47\1\60\1\210\25\215\1\210\3\215\1\61\3\210"+
    "\2\216\1\53\54\216\1\217\1\220\1\53\1\221\1\0"+
    "\2\217\1\47\1\217\1\47\3\217\2\47\1\222\1\47"+
    "\32\217\1\47\3\217\1\223\1\224\1\53\1\225\1\0"+
    "\2\223\1\47\1\223\1\47\3\223\4\47\32\223\1\47"+
    "\3\223\1\137\1\226\1\53\1\141\1\0\2\137\1\55"+
    "\1\137\1\47\1\227\2\137\1\47\1\56\1\47\1\60"+
    "\32\137\1\61\3\137\1\230\1\231\1\232\1\233\1\234"+
    "\1\230\1\235\1\236\1\230\1\236\3\230\2\236\1\73"+
    "\1\236\32\230\1\236\3\230\1\153\1\47\1\0\1\155"+
    "\1\0\1\237\1\153\1\47\1\153\1\47\3\153\4\47"+
    "\32\153\1\47\3\153\1\47\1\240\3\0\1\241\51\47"+
    "\2\0\1\53\2\0\1\242\51\0\1\155\2\0\1\155"+
    "\1\0\1\243\1\155\1\0\1\155\1\0\3\155\4\0"+
    "\32\155\1\0\3\155\5\0\1\242\51\0\1\153\1\47"+
    "\1\0\1\155\1\0\1\237\1\153\1\47\1\153\1\47"+
    "\3\153\4\47\32\153\1\47\1\244\2\153\2\47\3\0"+
    "\1\241\1\47\1\245\51\47\3\0\1\241\53\47\3\0"+
    "\1\241\7\47\1\246\43\47\3\0\1\241\10\47\1\245"+
    "\42\47\3\0\54\47\3\0\1\241\12\47\1\245\36\47"+
    "\1\247\1\47\1\0\1\250\1\0\1\251\1\247\1\47"+
    "\1\247\1\47\3\247\1\252\3\47\20\247\1\253\11\247"+
    "\1\47\3\247\1\153\1\47\1\0\1\155\1\0\1\237"+
    "\1\153\1\47\1\153\1\47\3\153\4\47\5\153\1\254"+
    "\24\153\1\47\3\153\2\47\3\0\1\241\45\47\1\245"+
    "\3\47\1\44\1\47\1\0\1\46\1\0\2\44\1\47"+
    "\1\44\1\47\3\44\4\47\32\44\1\47\3\44\1\47"+
    "\1\45\3\0\52\47\1\46\2\0\1\46\1\0\2\46"+
    "\1\0\1\46\1\0\3\46\4\0\32\46\1\0\3\46"+
    "\1\44\1\47\1\0\1\46\1\0\2\44\1\47\1\44"+
    "\1\47\3\44\4\47\3\44\1\255\23\44\1\255\2\44"+
    "\1\47\3\44\1\51\1\47\1\0\1\54\1\0\2\51"+
    "\1\47\1\51\1\47\3\51\4\47\32\51\1\47\3\51"+
    "\1\47\1\52\3\0\52\47\2\0\1\53\54\0\1\54"+
    "\2\0\1\54\1\0\2\54\1\0\1\54\1\0\3\54"+
    "\4\0\32\54\1\0\3\54\2\47\3\0\2\47\1\256"+
    "\51\47\3\0\11\47\1\256\42\47\3\0\13\47\1\256"+
    "\40\47\3\0\46\47\1\256\3\47\1\257\1\47\1\0"+
    "\1\260\1\0\1\261\1\257\1\47\1\257\1\47\3\257"+
    "\4\47\32\257\1\47\3\257\1\47\1\262\3\0\1\263"+
    "\51\47\2\0\1\53\2\0\1\264\51\0\1\260\2\0"+
    "\1\260\1\0\1\265\1\260\1\0\1\260\1\0\3\260"+
    "\4\0\32\260\1\0\3\260\5\0\1\264\51\0\1\257"+
    "\1\47\1\0\1\260\1\0\1\261\1\257\1\47\1\257"+
    "\1\47\3\257\4\47\32\257\1\47\1\266\2\257\2\47"+
    "\3\0\1\263\1\47\1\256\51\47\3\0\1\263\53\47"+
    "\3\0\1\263\10\47\1\256\42\47\3\0\1\263\12\47"+
    "\1\256\40\47\3\0\1\263\45\47\1\256\3\47\1\76"+
    "\1\47\1\0\1\100\1\0\2\76\1\47\1\76\1\47"+
    "\3\76\4\47\32\76\1\47\3\76\1\47\1\77\3\0"+
    "\52\47\1\100\2\0\1\100\1\0\2\100\1\0\1\100"+
    "\1\0\3\100\4\0\32\100\1\0\3\100\1\267\1\47"+
    "\1\0\1\270\1\0\1\271\1\267\1\47\1\267\1\47"+
    "\3\267\4\47\32\267\1\47\3\267\1\47\1\272\3\0"+
    "\1\273\51\47\2\0\1\53\2\0\1\274\51\0\1\270"+
    "\2\0\1\270\1\0\1\275\1\270\1\0\1\270\1\0"+
    "\3\270\4\0\32\270\1\0\3\270\5\0\1\274\51\0"+
    "\2\47\3\0\1\273\1\47\1\256\51\47\3\0\1\273"+
    "\53\47\3\0\1\273\10\47\1\256\42\47\3\0\1\273"+
    "\12\47\1\256\36\47\1\267\1\47\1\0\1\270\1\0"+
    "\1\271\1\267\1\47\1\267\1\47\3\267\4\47\21\267"+
    "\1\276\7\267\1\276\1\47\2\267\1\276\1\267\1\47"+
    "\1\0\1\270\1\0\1\271\1\267\1\47\1\267\1\47"+
    "\3\267\4\47\1\267\1\277\30\267\1\47\4\267\1\47"+
    "\1\0\1\270\1\0\1\271\1\267\1\47\1\267\1\47"+
    "\3\267\4\47\3\267\1\300\11\267\1\301\7\267\1\302"+
    "\1\267\1\300\2\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\1\271\1\267\1\47\1\267\1\47\3\267\4\47"+
    "\16\267\1\303\13\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\1\271\1\267\1\47\1\267\1\47\3\267\4\47"+
    "\6\267\1\304\23\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\1\271\1\267\1\47\1\267\1\47\3\267\4\47"+
    "\16\267\1\305\13\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\1\271\1\267\1\47\1\267\1\47\3\267\4\47"+
    "\5\267\1\306\2\267\1\307\21\267\1\47\3\267\2\47"+
    "\3\0\1\273\45\47\1\256\3\47\1\310\1\47\1\0"+
    "\1\311\1\0\1\312\1\310\1\47\1\310\1\47\3\310"+
    "\4\47\32\310\1\47\3\310\1\47\1\313\3\0\1\314"+
    "\51\47\2\0\1\53\2\0\1\315\51\0\1\311\2\0"+
    "\1\311\1\0\1\316\1\311\1\0\1\311\1\0\3\311"+
    "\4\0\32\311\1\0\3\311\5\0\1\315\51\0\2\47"+
    "\3\0\1\314\1\47\1\256\51\47\3\0\1\314\53\47"+
    "\3\0\1\314\10\47\1\256\42\47\3\0\1\314\12\47"+
    "\1\256\36\47\1\310\1\47\1\0\1\311\1\0\1\312"+
    "\1\310\1\47\1\310\1\47\3\310\4\47\6\310\1\317"+
    "\6\310\1\320\14\310\1\47\3\310\2\47\3\0\1\314"+
    "\45\47\1\256\4\47\1\321\3\0\1\314\51\47\1\137"+
    "\1\47\1\0\1\141\1\0\2\137\1\47\1\137\1\47"+
    "\3\137\4\47\32\137\1\47\3\137\1\47\1\140\3\0"+
    "\52\47\1\141\2\0\1\141\1\0\2\141\1\0\1\141"+
    "\1\0\3\141\4\0\32\141\1\0\3\141\1\137\1\47"+
    "\1\0\1\141\1\0\2\137\1\47\1\137\1\47\3\137"+
    "\4\47\2\137\1\322\27\137\1\47\4\137\1\47\1\0"+
    "\1\141\1\0\2\137\1\47\1\137\1\47\1\137\2\143"+
    "\4\47\32\137\1\47\3\137\1\144\1\47\1\0\1\146"+
    "\1\0\2\144\1\47\1\144\1\47\3\144\4\47\32\144"+
    "\1\47\3\144\1\47\1\145\3\0\52\47\1\146\2\0"+
    "\1\146\1\0\2\146\1\0\1\146\1\0\3\146\4\0"+
    "\32\146\1\0\3\146\1\144\1\47\1\0\1\146\1\0"+
    "\2\144\1\47\1\144\1\47\3\144\4\47\17\144\1\323"+
    "\1\324\4\144\1\325\4\144\1\47\4\144\1\47\1\0"+
    "\1\146\1\0\2\144\1\47\1\144\1\47\3\144\4\47"+
    "\5\144\1\326\14\144\1\327\7\144\1\47\4\144\1\47"+
    "\1\0\1\146\1\0\2\144\1\47\1\144\1\47\3\144"+
    "\4\47\5\144\1\326\13\144\1\330\7\144\1\330\1\47"+
    "\2\144\1\330\1\144\1\47\1\0\1\146\1\0\2\144"+
    "\1\47\1\144\1\47\3\144\4\47\5\144\1\326\10\144"+
    "\1\331\13\144\1\47\3\144\1\153\1\47\1\0\1\155"+
    "\1\0\2\153\1\47\1\153\1\47\3\153\4\47\32\153"+
    "\1\47\3\153\1\47\1\154\3\0\52\47\1\155\2\0"+
    "\1\155\1\0\2\155\1\0\1\155\1\0\3\155\4\0"+
    "\32\155\1\0\3\155\2\47\3\0\2\47\1\73\47\47"+
    "\1\153\1\47\1\0\1\155\1\0\2\153\1\47\1\153"+
    "\1\47\1\153\2\157\4\47\32\153\1\47\3\153\2\47"+
    "\3\0\11\47\1\73\42\47\3\0\13\47\1\73\40\47"+
    "\3\0\46\47\1\73\4\47\1\332\3\0\1\241\53\47"+
    "\3\0\1\241\1\47\1\73\51\47\3\0\1\241\10\47"+
    "\1\73\42\47\3\0\1\241\12\47\1\73\40\47\3\0"+
    "\1\241\45\47\1\73\3\47\1\333\1\47\1\0\1\334"+
    "\1\0\1\335\1\333\1\47\1\333\1\47\3\333\2\47"+
    "\1\333\1\47\32\333\1\47\3\333\1\47\1\336\3\0"+
    "\1\337\51\47\2\0\1\53\2\0\1\340\51\0\1\334"+
    "\2\0\1\334\1\0\1\341\1\334\1\0\1\334\1\0"+
    "\3\334\2\0\1\334\1\0\32\334\1\0\3\334\5\0"+
    "\1\340\51\0\2\47\3\0\1\337\1\47\1\73\51\47"+
    "\3\0\1\337\53\47\3\0\1\337\10\47\1\73\40\47"+
    "\1\333\1\47\1\0\1\334\1\0\2\333\1\47\1\333"+
    "\1\47\3\333\2\47\1\342\1\47\32\333\1\47\3\333"+
    "\2\47\3\0\1\337\12\47\1\73\36\47\1\333\1\47"+
    "\1\0\1\334\1\0\1\335\1\333\1\47\1\333\1\47"+
    "\3\333\2\47\1\333\1\47\17\333\1\343\12\333\1\47"+
    "\4\333\1\47\1\0\1\334\1\0\1\335\1\333\1\47"+
    "\1\333\1\47\3\333\2\47\1\333\1\47\5\333\1\344"+
    "\14\333\1\345\7\333\1\47\4\333\1\47\1\0\1\334"+
    "\1\0\1\335\1\333\1\47\1\333\1\47\3\333\2\47"+
    "\1\333\1\47\5\333\1\344\13\333\1\346\7\333\1\346"+
    "\1\47\2\333\1\346\1\333\1\47\1\0\1\334\1\0"+
    "\1\335\1\333\1\47\1\333\1\47\3\333\2\47\1\333"+
    "\1\47\5\333\1\344\10\333\1\347\13\333\1\47\3\333"+
    "\2\47\3\0\1\337\45\47\1\73\4\47\1\207\3\0"+
    "\52\47\1\210\1\47\1\0\1\212\1\0\2\210\1\47"+
    "\1\210\1\47\3\210\4\47\32\210\1\47\3\210\1\47"+
    "\1\211\3\0\52\47\1\212\2\0\1\212\1\0\2\212"+
    "\1\0\1\212\1\0\3\212\4\0\32\212\1\0\3\212"+
    "\1\210\1\47\1\0\1\212\1\0\2\210\1\47\1\210"+
    "\1\47\1\210\2\350\4\47\32\210\1\47\4\210\1\47"+
    "\1\0\1\212\1\0\2\210\1\47\1\210\1\47\3\210"+
    "\4\47\22\210\1\213\4\210\3\351\1\47\4\210\1\47"+
    "\1\0\1\212\1\0\2\210\1\47\1\210\1\47\3\210"+
    "\1\352\3\47\1\210\25\215\1\210\3\215\1\47\3\210"+
    "\2\216\1\0\54\216\1\217\1\353\1\0\1\221\1\0"+
    "\2\217\1\47\1\217\1\47\3\217\2\47\1\354\1\47"+
    "\32\217\1\47\3\217\1\47\1\220\3\0\52\47\1\221"+
    "\1\355\1\0\1\221\1\0\2\221\1\0\1\221\1\0"+
    "\3\221\2\0\1\356\1\0\32\221\1\0\3\221\1\223"+
    "\1\47\1\0\1\225\1\0\2\223\1\47\1\223\1\47"+
    "\3\223\4\47\32\223\1\47\3\223\1\47\1\224\3\0"+
    "\52\47\1\225\2\0\1\225\1\0\2\225\1\0\1\225"+
    "\1\0\3\225\4\0\32\225\1\0\3\225\1\47\1\226"+
    "\3\0\52\47\1\137\1\47\1\0\1\141\1\0\2\137"+
    "\1\47\1\137\1\47\1\137\1\357\1\137\4\47\32\137"+
    "\1\47\3\137\1\360\1\47\1\0\1\361\1\0\1\362"+
    "\1\360\1\47\1\360\1\47\3\360\4\47\32\360\1\47"+
    "\3\360\1\47\1\363\3\0\1\364\51\47\2\0\1\53"+
    "\2\0\1\365\51\0\1\361\2\0\1\361\1\0\1\366"+
    "\1\361\1\0\1\361\1\0\3\361\4\0\32\361\1\0"+
    "\3\361\5\0\1\365\51\0\1\360\1\47\1\0\1\361"+
    "\1\0\1\362\1\360\1\47\1\360\1\47\3\360\4\47"+
    "\32\360\1\47\1\367\2\360\2\47\3\0\1\364\51\47"+
    "\1\237\1\241\1\0\1\243\1\242\1\370\1\237\1\241"+
    "\1\237\1\241\3\237\4\241\26\237\1\371\3\237\1\241"+
    "\3\237\1\47\1\240\3\0\52\47\2\241\1\0\2\242"+
    "\1\372\41\241\1\373\7\241\2\242\1\0\2\242\1\374"+
    "\41\242\1\375\7\242\1\243\1\242\1\0\1\243\1\242"+
    "\1\376\1\243\1\242\1\243\1\242\3\243\4\242\26\243"+
    "\1\377\3\243\1\242\3\243\1\153\1\47\1\0\1\155"+
    "\1\0\2\153\1\47\1\153\1\47\1\153\2\u0100\4\47"+
    "\32\153\1\47\1\u0100\2\153\1\247\1\47\1\0\1\250"+
    "\1\0\2\247\1\47\1\247\1\47\3\247\4\47\32\247"+
    "\1\47\3\247\1\250\2\0\1\250\1\0\2\250\1\0"+
    "\1\250\1\0\3\250\4\0\32\250\1\0\3\250\1\251"+
    "\1\241\1\0\1\u0101\1\242\1\247\1\251\1\241\1\251"+
    "\1\241\3\251\4\241\26\251\1\u0102\3\251\1\241\3\251"+
    "\2\47\3\0\10\47\1\u0103\41\47\1\247\1\47\1\0"+
    "\1\250\1\0\2\247\1\47\1\247\1\47\3\247\4\47"+
    "\5\247\1\u0104\24\247\1\47\3\247\1\153\1\47\1\0"+
    "\1\155\1\0\2\153\1\47\1\153\1\47\3\153\4\47"+
    "\14\153\1\u0105\15\153\1\47\3\153\1\44\1\47\1\0"+
    "\1\46\1\0\2\44\1\47\1\44\1\47\3\44\4\47"+
    "\10\44\1\u0106\21\44\1\47\3\44\1\257\1\47\1\0"+
    "\1\260\1\0\2\257\1\47\1\257\1\47\3\257\4\47"+
    "\32\257\1\47\3\257\1\260\2\0\1\260\1\0\2\260"+
    "\1\0\1\260\1\0\3\260\4\0\32\260\1\0\3\260"+
    "\1\261\1\263\1\0\1\265\1\264\1\257\1\261\1\263"+
    "\1\261\1\263\3\261\4\263\26\261\1\u0107\3\261\1\263"+
    "\3\261\1\47\1\262\3\0\52\47\2\263\1\0\2\264"+
    "\1\u0108\41\263\1\u0109\7\263\2\264\1\0\2\264\1\u010a"+
    "\41\264\1\u010b\7\264\1\265\1\264\1\0\1\265\1\264"+
    "\1\260\1\265\1\264\1\265\1\264\3\265\4\264\26\265"+
    "\1\u010c\3\265\1\264\3\265\1\257\1\47\1\0\1\260"+
    "\1\0\2\257\1\47\1\257\1\47\1\257\2\u010d\4\47"+
    "\32\257\1\47\1\u010d\2\257\1\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\32\267"+
    "\1\47\3\267\1\270\2\0\1\270\1\0\2\270\1\0"+
    "\1\270\1\0\3\270\4\0\32\270\1\0\3\270\1\271"+
    "\1\273\1\0\1\275\1\274\1\u010e\1\271\1\273\1\271"+
    "\1\273\3\271\4\273\26\271\1\u010f\3\271\1\273\3\271"+
    "\1\47\1\272\3\0\52\47\2\273\1\0\2\274\1\u0110"+
    "\41\273\1\u0111\7\273\2\274\1\0\2\274\1\u0112\41\274"+
    "\1\u0113\7\274\1\275\1\274\1\0\1\275\1\274\1\u0114"+
    "\1\275\1\274\1\275\1\274\3\275\4\274\26\275\1\u0115"+
    "\3\275\1\274\3\275\1\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\21\267\1\u0116"+
    "\7\267\1\u0116\1\47\2\267\1\u0116\1\267\1\47\1\0"+
    "\1\270\1\0\2\267\1\47\1\267\1\47\3\267\4\47"+
    "\13\267\1\u0117\16\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\10\267"+
    "\1\u0118\21\267\1\47\4\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\4\267\1\u0119"+
    "\25\267\1\47\4\267\1\47\1\0\1\270\1\0\2\267"+
    "\1\47\1\267\1\47\3\267\4\47\11\267\1\u011a\20\267"+
    "\1\47\1\267\1\u011a\2\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\22\267\1\u011b"+
    "\7\267\1\47\4\267\1\47\1\0\1\270\1\0\2\267"+
    "\1\47\1\267\1\47\3\267\4\47\20\267\1\u011c\11\267"+
    "\1\47\4\267\1\47\1\0\1\270\1\0\2\267\1\47"+
    "\1\267\1\47\3\267\4\47\22\267\1\u011d\7\267\1\47"+
    "\4\267\1\47\1\0\1\270\1\0\2\267\1\47\1\267"+
    "\1\47\3\267\4\47\11\267\1\u011e\20\267\1\47\1\267"+
    "\1\u011e\1\267\1\310\1\47\1\0\1\311\1\0\2\310"+
    "\1\47\1\310\1\47\3\310\4\47\32\310\1\47\3\310"+
    "\1\311\2\0\1\311\1\0\2\311\1\0\1\311\1\0"+
    "\3\311\4\0\32\311\1\0\3\311\1\312\1\314\1\0"+
    "\1\316\1\315\1\u011f\1\312\1\314\1\312\1\314\3\312"+
    "\4\314\26\312\1\u0120\3\312\1\314\3\312\1\47\1\313"+
    "\3\0\52\47\2\314\1\0\2\315\1\u0121\41\314\1\u0122"+
    "\7\314\2\315\1\0\2\315\1\u0123\41\315\1\u0124\7\315"+
    "\1\316\1\315\1\0\1\316\1\315\1\u0125\1\316\1\315"+
    "\1\316\1\315\3\316\4\315\26\316\1\u0126\3\316\1\315"+
    "\3\316\1\310\1\47\1\0\1\311\1\0\2\310\1\47"+
    "\1\310\1\47\3\310\4\47\6\310\1\320\23\310\1\47"+
    "\4\310\1\u0127\1\u0128\1\311\1\0\2\310\1\47\1\310"+
    "\1\47\3\310\4\47\32\310\1\47\3\310\1\47\1\321"+
    "\3\0\52\47\1\144\1\47\1\0\1\146\1\0\2\144"+
    "\1\47\1\144\1\47\3\144\4\47\23\144\1\u0129\6\144"+
    "\1\47\4\144\1\47\1\0\1\146\1\0\2\144\1\47"+
    "\1\144\1\47\3\144\4\47\20\144\1\u012a\11\144\1\47"+
    "\4\144\1\47\1\0\1\146\1\0\2\144\1\47\1\144"+
    "\1\47\3\144\4\47\11\144\1\u012b\20\144\1\47\1\144"+
    "\1\u012b\2\144\1\47\1\0\1\146\1\0\2\144\1\47"+
    "\1\144\1\47\3\144\4\47\17\144\1\u0129\12\144\1\47"+
    "\4\144\1\47\1\0\1\146\1\0\2\144\1\47\1\144"+
    "\1\47\3\144\4\47\20\144\1\u0129\11\144\1\47\4\144"+
    "\1\47\1\0\1\146\1\0\2\144\1\47\1\144\1\47"+
    "\3\144\4\47\21\144\1\u0129\7\144\1\u0129\1\47\2\144"+
    "\1\u0129\1\144\1\47\1\0\1\146\1\0\2\144\1\47"+
    "\1\144\1\47\3\144\4\47\22\144\1\u0129\7\144\1\47"+
    "\3\144\1\47\1\332\3\0\52\47\1\333\1\47\1\0"+
    "\1\334\1\0\2\333\1\47\1\333\1\47\3\333\2\47"+
    "\1\333\1\47\32\333\1\47\3\333\1\334\2\0\1\334"+
    "\1\0\2\334\1\0\1\334\1\0\3\334\2\0\1\334"+
    "\1\0\32\334\1\0\3\334\1\335\1\337\1\0\1\341"+
    "\1\340\1\u012c\1\335\1\337\1\335\1\337\3\335\2\337"+
    "\1\335\1\337\26\335\1\u012d\3\335\1\337\3\335\1\47"+
    "\1\336\3\0\52\47\2\337\1\0\2\340\1\u012e\41\337"+
    "\1\u012f\7\337\2\340\1\0\2\340\1\u0130\41\340\1\u0131"+
    "\7\340\1\341\1\340\1\0\1\341\1\340\1\u0132\1\341"+
    "\1\340\1\341\1\340\3\341\2\340\1\341\1\340\26\341"+
    "\1\u0133\3\341\1\340\3\341\1\333\1\47\1\0\1\334"+
    "\1\0\2\333\1\47\1\333\1\47\3\333\2\47\1\333"+
    "\1\47\23\333\1\342\6\333\1\47\4\333\1\47\1\0"+
    "\1\334\1\0\2\333\1\47\1\333\1\47\3\333\2\47"+
    "\1\333\1\47\17\333\1\342\12\333\1\47\4\333\1\47"+
    "\1\0\1\334\1\0\2\333\1\47\1\333\1\47\3\333"+
    "\2\47\1\333\1\47\20\333\1\342\11\333\1\47\4\333"+
    "\1\47\1\0\1\334\1\0\2\333\1\47\1\333\1\47"+
    "\3\333\2\47\1\333\1\47\21\333\1\342\7\333\1\342"+
    "\1\47\2\333\1\342\1\333\1\47\1\0\1\334\1\0"+
    "\2\333\1\47\1\333\1\47\3\333\2\47\1\333\1\47"+
    "\22\333\1\342\7\333\1\47\3\333\1\352\1\47\1\0"+
    "\1\u0134\1\0\2\352\1\47\1\352\1\47\3\352\4\47"+
    "\32\352\1\47\3\352\1\47\1\353\3\0\12\47\1\354"+
    "\37\47\1\0\1\355\15\0\1\356\116\0\1\360\1\47"+
    "\1\0\1\361\1\0\2\360\1\47\1\360\1\47\3\360"+
    "\4\47\32\360\1\47\3\360\1\361\2\0\1\361\1\0"+
    "\2\361\1\0\1\361\1\0\3\361\4\0\32\361\1\0"+
    "\3\361\1\362\1\364\1\0\1\366\1\365\1\360\1\362"+
    "\1\364\1\362\1\364\3\362\4\364\26\362\1\u0135\3\362"+
    "\1\364\3\362\1\47\1\363\3\0\52\47\2\364\1\0"+
    "\2\365\1\u0136\41\364\1\u0137\7\364\2\365\1\0\2\365"+
    "\1\u0138\41\365\1\u0139\7\365\1\366\1\365\1\0\1\366"+
    "\1\365\1\361\1\366\1\365\1\366\1\365\3\366\4\365"+
    "\26\366\1\u013a\3\366\1\365\3\366\1\360\1\47\1\0"+
    "\1\361\1\0\2\360\1\47\1\360\1\47\1\360\2\u013b"+
    "\4\47\32\360\1\47\1\u013b\2\360\1\237\1\241\1\0"+
    "\1\243\1\242\1\u013c\1\237\1\241\1\237\1\241\3\237"+
    "\4\241\26\237\1\371\3\237\1\241\3\237\2\241\1\0"+
    "\2\242\1\u013d\41\241\1\373\7\241\2\242\1\0\2\242"+
    "\1\u013e\41\242\1\375\7\242\1\243\1\242\1\0\1\243"+
    "\1\242\1\u013f\1\243\1\242\1\243\1\242\3\243\4\242"+
    "\26\243\1\377\3\243\1\242\3\243\1\u0101\1\242\1\0"+
    "\1\u0101\1\242\1\250\1\u0101\1\242\1\u0101\1\242\3\u0101"+
    "\4\242\26\u0101\1\u0140\3\u0101\1\242\3\u0101\1\251\1\241"+
    "\1\0\1\u0101\1\242\2\251\1\241\1\251\1\241\3\251"+
    "\4\241\26\251\1\u0102\3\251\1\241\3\251\1\247\1\47"+
    "\1\0\1\250\1\0\2\247\1\47\1\247\1\47\3\247"+
    "\4\47\14\247\1\u0141\15\247\1\47\3\247\1\44\1\47"+
    "\1\0\1\46\1\0\2\44\1\47\1\44\1\47\3\44"+
    "\4\47\16\44\1\u0142\13\44\1\47\3\44\1\261\1\263"+
    "\1\0\1\265\1\264\2\261\1\263\1\261\1\263\3\261"+
    "\4\263\26\261\1\u0107\3\261\1\263\3\261\2\263\1\0"+
    "\2\264\1\u0143\41\263\1\u0109\7\263\2\264\1\0\2\264"+
    "\1\u0144\41\264\1\u010b\7\264\1\265\1\264\1\0\1\265"+
    "\1\264\2\265\1\264\1\265\1\264\3\265\4\264\26\265"+
    "\1\u010c\3\265\1\264\3\265\1\271\1\273\1\0\1\275"+
    "\1\274\1\u0145\1\271\1\273\1\271\1\273\3\271\4\273"+
    "\26\271\1\u010f\3\271\1\273\3\271\2\273\1\0\2\274"+
    "\1\u0146\41\273\1\u0111\7\273\2\274\1\0\2\274\1\u0147"+
    "\41\274\1\u0113\7\274\1\275\1\274\1\0\1\275\1\274"+
    "\1\u0148\1\275\1\274\1\275\1\274\3\275\4\274\26\275"+
    "\1\u0115\3\275\1\274\3\275\1\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\16\267"+
    "\1\u0149\13\267\1\47\4\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\13\267\1\u014a"+
    "\16\267\1\47\4\267\1\47\1\0\1\270\1\0\2\267"+
    "\1\47\1\267\1\47\3\267\4\47\16\267\1\u014b\13\267"+
    "\1\47\4\267\1\47\1\0\1\270\1\0\2\267\1\47"+
    "\1\267\1\47\3\267\4\47\13\267\1\u014c\16\267\1\47"+
    "\4\267\1\47\1\0\1\270\1\0\2\267\1\47\1\267"+
    "\1\47\3\267\4\47\22\267\1\u014d\7\267\1\47\4\267"+
    "\1\47\1\0\1\270\1\0\2\267\1\47\1\267\1\47"+
    "\3\267\4\47\16\267\1\u014e\13\267\1\47\4\267\1\47"+
    "\1\0\1\270\1\0\2\267\1\47\1\267\1\47\3\267"+
    "\4\47\5\267\1\u014f\24\267\1\47\4\267\1\47\1\0"+
    "\1\270\1\0\2\267\1\47\1\267\1\47\3\267\4\47"+
    "\13\267\1\u0150\16\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\6\267"+
    "\1\u0151\23\267\1\47\3\267\1\312\1\314\1\0\1\316"+
    "\1\315\1\u0152\1\312\1\314\1\312\1\314\3\312\4\314"+
    "\26\312\1\u0120\3\312\1\314\3\312\2\314\1\0\2\315"+
    "\1\u0153\41\314\1\u0122\7\314\2\315\1\0\2\315\1\u0154"+
    "\41\315\1\u0124\7\315\1\316\1\315\1\0\1\316\1\315"+
    "\1\u0155\1\316\1\315\1\316\1\315\3\316\4\315\26\316"+
    "\1\u0126\3\316\1\315\3\316\1\47\1\u0127\1\u0128\2\0"+
    "\52\47\2\0\1\u0128\54\0\1\144\1\47\1\0\1\146"+
    "\1\0\2\144\1\47\1\144\1\47\3\144\4\47\16\144"+
    "\1\u0156\13\144\1\47\4\144\1\47\1\0\1\146\1\0"+
    "\2\144\1\47\1\144\1\47\3\144\4\47\21\144\1\u0157"+
    "\7\144\1\u0157\1\47\2\144\1\u0157\1\335\1\337\1\0"+
    "\1\341\1\340\1\u0158\1\335\1\337\1\335\1\337\3\335"+
    "\2\337\1\335\1\337\26\335\1\u012d\3\335\1\337\3\335"+
    "\2\337\1\0\2\340\1\u0159\41\337\1\u012f\7\337\2\340"+
    "\1\0\2\340\1\u015a\41\340\1\u0131\7\340\1\341\1\340"+
    "\1\0\1\341\1\340\1\u015b\1\341\1\340\1\341\1\340"+
    "\3\341\2\340\1\341\1\340\26\341\1\u0133\3\341\1\340"+
    "\3\341\1\u0134\2\0\1\u0134\1\0\2\u0134\1\0\1\u0134"+
    "\1\0\3\u0134\4\0\32\u0134\1\0\3\u0134\1\362\1\364"+
    "\1\0\1\366\1\365\2\362\1\364\1\362\1\364\3\362"+
    "\4\364\26\362\1\u0135\3\362\1\364\3\362\2\364\1\0"+
    "\2\365\1\u015c\41\364\1\u0137\7\364\2\365\1\0\2\365"+
    "\1\u015d\41\365\1\u0139\7\365\1\366\1\365\1\0\1\366"+
    "\1\365\2\366\1\365\1\366\1\365\3\366\4\365\26\366"+
    "\1\u013a\3\366\1\365\3\366\1\u0101\1\242\1\0\1\u0101"+
    "\1\242\2\u0101\1\242\1\u0101\1\242\3\u0101\4\242\26\u0101"+
    "\1\u0140\3\u0101\1\242\3\u0101\1\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\3\267"+
    "\1\u015e\23\267\1\u015e\2\267\1\47\4\267\1\47\1\0"+
    "\1\270\1\0\2\267\1\47\1\267\1\47\3\267\4\47"+
    "\16\267\1\u015f\13\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\16\267"+
    "\1\u0160\13\267\1\47\4\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\22\267\1\u0161"+
    "\7\267\1\47\3\267\1\144\1\47\1\0\1\146\1\0"+
    "\2\144\1\47\1\144\1\47\3\144\4\47\20\144\1\u0162"+
    "\11\144\1\47\4\144\1\47\1\0\1\146\1\0\2\144"+
    "\1\47\1\144\1\47\3\144\4\47\22\144\1\u0163\7\144"+
    "\1\47\3\144\1\267\1\47\1\0\1\270\1\0\2\267"+
    "\1\47\1\267\1\47\3\267\4\47\3\267\1\u0164\23\267"+
    "\1\u0164\2\267\1\47\4\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\3\267\1\u0165"+
    "\23\267\1\u0165\2\267\1\47\3\267\1\144\1\47\1\0"+
    "\1\146\1\0\2\144\1\47\1\144\1\47\3\144\4\47"+
    "\13\144\1\u0166\16\144\1\47\3\144\1\267\1\47\1\0"+
    "\1\270\1\0\2\267\1\47\1\267\1\47\3\267\4\47"+
    "\1\267\1\u0167\30\267\1\47\4\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\1\267"+
    "\1\u0168\30\267\1\47\3\267\1\144\1\47\1\0\1\146"+
    "\1\0\2\144\1\47\1\144\1\47\3\144\4\47\5\144"+
    "\1\u0169\24\144\1\47\3\144\1\267\1\47\1\0\1\270"+
    "\1\0\2\267\1\47\1\267\1\47\3\267\4\47\13\267"+
    "\1\u016a\16\267\1\47\4\267\1\47\1\0\1\270\1\0"+
    "\2\267\1\47\1\267\1\47\3\267\4\47\13\267\1\u016b"+
    "\16\267\1\47\3\267\1\144\1\47\1\0\1\146\1\0"+
    "\2\144\1\47\1\144\1\47\3\144\4\47\24\144\1\u016c"+
    "\5\144\1\47\4\144\1\47\1\0\1\146\1\0\2\144"+
    "\1\47\1\144\1\47\3\144\4\47\5\144\1\u016d\24\144"+
    "\1\47\4\144\1\47\1\0\1\146\1\0\2\144\1\47"+
    "\1\144\1\47\3\144\4\47\13\144\1\u016e\16\144\1\47"+
    "\3\144";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13724];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\4\1\1\0\34\1\1\0\17\1\1\0\20\1"+
    "\1\0\44\1\1\0\37\1\1\0\5\1\1\0\21\1"+
    "\1\0\7\1\1\0\20\1\1\0\22\1\1\0\14\1"+
    "\1\0\1\11\6\1\1\0\6\1\1\11\1\0\14\1"+
    "\1\11\1\0\6\1\1\11\1\0\17\1\1\11\1\0"+
    "\13\1\1\11\1\0\6\1\1\11\1\0\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 72: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 74: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 5:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 76: break;
          case 6:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 77: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 78: break;
          case 8:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 9:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 80: break;
          case 10:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 81: break;
          case 11:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 82: break;
          case 12:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 83: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 84: break;
          case 14:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 15:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 86: break;
          case 16:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 87: break;
          case 17:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 88: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 89: break;
          case 19:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 20:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 91: break;
          case 21:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 92: break;
          case 22:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 93: break;
          case 23:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 24:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 95: break;
          case 25:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 96: break;
          case 26:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 97: break;
          case 27:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 28:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 99: break;
          case 29:
            { yybegin(COMMAND); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 100: break;
          case 30:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 101: break;
          case 31:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 102: break;
          case 32:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 103: break;
          case 33:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 104: break;
          case 34:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 105: break;
          case 35:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 106: break;
          case 36:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 107: break;
          case 37:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 108: break;
          case 38:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 39:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 40:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 111: break;
          case 41:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 42:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 113: break;
          case 43:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 114: break;
          case 44:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 115: break;
          case 45:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 116: break;
          case 46:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 117: break;
          case 47:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 118: break;
          case 48:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 119: break;
          case 49:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 120: break;
          case 50:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 121: break;
          case 51:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 122: break;
          case 52:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 123: break;
          case 53:
            { yybegin(ASSOC_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 124: break;
          case 54:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 125: break;
          case 55:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 126: break;
          case 56:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 127: break;
          case 57:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 128: break;
          case 58:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 129: break;
          case 59:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 130: break;
          case 60:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 131: break;
          case 61:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 132: break;
          case 62:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 133: break;
          case 63:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 134: break;
          case 64:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 135: break;
          case 65:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 136: break;
          case 66:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 137: break;
          case 67:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 138: break;
          case 68:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 139: break;
          case 69:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 140: break;
          case 70:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 141: break;
          case 71:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
