// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int CALL = 8;
  public static final int COMMAND = 10;
  public static final int ECHO = 12;
  public static final int ECHO_STRING = 14;
  public static final int EXIT = 16;
  public static final int GOTO = 18;
  public static final int IF = 20;
  public static final int IF_ERRORLEVEL = 22;
  public static final int IF_EXIST = 24;
  public static final int IF_STANDARD = 26;
  public static final int LABEL = 28;
  public static final int MORE = 30;
  public static final int REM = 32;
  public static final int SET = 34;
  public static final int SET_LOCAL = 36;
  public static final int SHIFT = 38;
  public static final int SET_VALUE = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  4,  4,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\0\1\4\2\0\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\1\13\1\11\1\0\1\14\11\15\1\16"+
    "\1\17\1\13\1\20\1\21\1\22\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\35\1\36\1\37\1\40\1\41\1\35\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\35\1\50\2\35\1\0"+
    "\1\51\4\0\1\52\1\25\1\53\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\35\1\36\1\37\1\40\1\41"+
    "\1\54\1\42\1\43\1\55\1\45\1\46\1\47\1\35"+
    "\1\50\2\35\1\0\1\56\1\0\1\57\261\0\2\60"+
    "\115\0\1\61\u0380\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\2\2\1\0\1\1\1\3\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\2\1\1\3\1\10"+
    "\1\11\1\4\1\10\1\12\1\13\1\2\2\14\1\15"+
    "\2\14\1\16\1\17\1\2\1\0\1\16\1\14\1\4"+
    "\1\14\1\20\2\14\1\21\1\22\1\6\1\23\1\24"+
    "\1\2\1\0\1\14\1\4\2\14\7\23\1\14\1\25"+
    "\1\26\1\2\1\0\1\14\1\4\2\14\1\25\1\14"+
    "\1\27\1\4\1\30\1\4\1\31\1\32\1\33\4\32"+
    "\1\14\1\34\1\20\1\4\1\35\3\20\1\14\1\36"+
    "\4\20\1\14\1\37\1\2\1\0\1\20\2\4\1\20"+
    "\1\4\1\20\4\14\1\20\1\40\1\41\1\42\1\4"+
    "\2\41\1\43\1\4\1\44\2\4\1\45\1\46\1\47"+
    "\1\50\1\4\1\51\1\52\1\2\1\0\1\51\1\4"+
    "\1\53\2\1\1\2\1\0\1\1\1\3\2\0\1\54"+
    "\2\55\1\0\1\55\1\1\1\10\1\14\2\16\1\17"+
    "\1\0\1\16\2\23\1\24\1\0\7\23\1\56\3\23"+
    "\2\25\1\26\1\0\2\25\1\27\1\57\7\32\1\14"+
    "\1\36\1\14\1\37\2\0\1\60\5\14\1\61\1\41"+
    "\1\61\1\62\2\0\1\63\1\64\1\65\2\51\1\52"+
    "\1\0\1\51\1\53\1\66\1\1\1\66\1\0\1\31"+
    "\1\67\1\66\1\67\1\0\1\55\1\70\1\55\1\54"+
    "\1\10\2\16\1\0\1\71\1\72\1\23\1\72\1\0"+
    "\10\23\1\73\1\23\1\74\1\25\1\74\2\0\1\75"+
    "\1\76\2\32\1\66\1\14\1\32\1\14\1\32\1\0"+
    "\1\32\1\67\1\0\1\60\1\61\1\77\2\51\1\0"+
    "\1\53\3\66\1\70\1\100\1\16\2\72\1\23\1\101"+
    "\1\102\1\103\1\23\1\104\1\105\1\106\2\23\2\74"+
    "\2\32\1\66\3\32\1\51\1\107\2\23\1\110\1\32"+
    "\1\111\2\23\1\32\2\23\1\32\1\112\1\113\2\32"+
    "\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u047e\0\u047e\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u05aa\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u05aa\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u092e\0\u09c4"+
    "\0\u05aa\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u05aa\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0b54\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0e42\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u14e6"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a"+
    "\0\u189c\0\u18ce\0\u1900\0\u05aa\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1a90\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u05aa\0\u1c20\0\u1c52\0\u05aa"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u05aa\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u1eaa"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u0fa0\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\u05aa\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u17a2\0\u2648"+
    "\0\u173e\0\u267a\0\u26ac\0\u26de\0\u05aa\0\u186a\0\u0fa0\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u1b26\0\u283c\0\u05aa"+
    "\0\u286e\0\u1b26\0\u1c20\0\u1c20\0\u1c52\0\u28a0\0\u28d2\0\u05aa"+
    "\0\u2904\0\u1b26\0\u2936\0\u2968\0\u05aa\0\u299a\0\u1db0\0\u1eaa"+
    "\0\u29cc\0\u05aa\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8"+
    "\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2166\0\u2c24\0\u05aa"+
    "\0\u2c56\0\u2c88\0\u2cba\0\u1068\0\u2cec\0\u2d1e\0\u1194\0\u2d50"+
    "\0\u1194\0\u2d82\0\u05aa\0\u2db4\0\u1c20\0\u251c\0\u2de6\0\u1194"+
    "\0\u2648\0\u05aa\0\u2e18\0\u05aa\0\u2e4a\0\u2710\0\u1b58\0\u1bbc"+
    "\0\u1c52\0\u1c84\0\u06a4\0\u1e46\0\u1edc\0\u1f40\0\u2e7c\0\u1eaa"+
    "\0\u1eaa\0\u1eaa\0\u2eae\0\u1eaa\0\u1eaa\0\u1eaa\0\u2ee0\0\u2f12"+
    "\0\u2198\0\u21fc\0\u2f44\0\u2f76\0\u2422\0\u2486\0\u24ea\0\u251c"+
    "\0\u27a6\0\u1eaa\0\u2fa8\0\u2fda\0\u1eaa\0\u300c\0\u1068\0\u303e"+
    "\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u1eaa\0\u1eaa\0\u316a"+
    "\0\u319c\0\u1068";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\1\30\1\25\1\31\1\32\1\33"+
    "\1\34\1\25\2\35\3\25\1\36\1\37\1\40\1\41"+
    "\1\42\17\25\1\43\12\25\1\44\3\25\1\45\1\46"+
    "\2\0\2\45\3\47\1\45\2\47\3\45\4\47\5\45"+
    "\1\50\25\45\1\47\3\45\1\51\1\52\1\53\1\0"+
    "\2\51\1\54\2\47\1\51\2\47\3\51\1\47\1\55"+
    "\1\56\1\57\33\51\1\60\3\51\1\61\1\62\1\63"+
    "\1\64\1\61\1\65\1\66\2\67\1\61\2\67\3\61"+
    "\1\67\1\70\1\71\1\72\33\61\1\73\3\61\1\74"+
    "\1\75\1\53\1\0\2\74\3\47\1\74\2\47\3\74"+
    "\1\76\3\47\33\74\1\47\3\74\1\77\1\100\1\101"+
    "\1\102\2\77\1\103\2\104\1\77\2\104\3\77\1\104"+
    "\1\105\1\47\1\106\1\77\1\107\1\77\1\110\1\77"+
    "\1\111\1\77\1\112\1\77\1\113\2\77\1\114\4\77"+
    "\1\115\5\77\1\107\1\110\1\77\1\115\1\116\1\77"+
    "\1\113\1\115\1\117\1\120\1\121\1\122\2\117\1\123"+
    "\2\124\1\117\2\124\3\117\1\124\1\125\1\47\1\126"+
    "\16\117\1\127\14\117\1\130\4\117\1\131\1\121\1\122"+
    "\2\117\1\123\2\124\1\117\2\124\3\117\1\124\1\125"+
    "\1\47\1\126\33\117\1\130\3\117\1\132\1\133\1\53"+
    "\1\0\2\132\1\54\2\47\1\132\2\47\1\134\2\135"+
    "\1\47\1\55\1\47\1\57\33\132\1\60\3\132\1\136"+
    "\1\137\1\53\1\0\2\136\3\47\1\136\2\47\3\136"+
    "\4\47\5\136\1\140\1\136\1\141\3\136\1\142\1\136"+
    "\1\143\15\136\1\47\3\136\1\144\1\145\1\53\1\0"+
    "\2\144\1\146\1\147\1\47\1\144\2\47\1\144\2\150"+
    "\1\47\1\151\1\47\1\152\33\144\1\153\3\144\1\154"+
    "\1\155\1\27\1\30\2\154\1\156\1\33\1\35\1\154"+
    "\2\35\3\154\1\35\1\157\1\47\1\160\33\154\1\161"+
    "\3\154\1\162\1\163\1\164\1\165\2\162\1\166\1\167"+
    "\1\170\1\162\2\170\3\162\1\170\1\171\1\172\1\173"+
    "\5\162\1\174\1\162\1\175\3\162\1\176\1\162\1\177"+
    "\15\162\1\200\3\162\1\74\1\201\1\53\1\0\2\74"+
    "\3\47\1\74\2\47\3\74\4\47\33\74\1\47\3\74"+
    "\1\202\1\203\1\53\1\0\2\202\1\54\2\47\1\202"+
    "\1\204\1\47\1\205\2\202\1\47\1\55\1\47\1\57"+
    "\1\202\25\206\1\202\4\206\1\60\3\202\2\207\1\53"+
    "\57\207\1\210\1\211\1\53\1\0\2\210\3\47\1\210"+
    "\1\212\1\47\1\213\2\210\2\47\1\214\1\47\33\210"+
    "\1\47\3\210\1\215\1\216\1\53\1\0\2\215\1\54"+
    "\2\47\1\215\2\47\3\215\1\47\1\55\1\47\1\57"+
    "\33\215\1\60\3\215\1\132\1\217\1\53\1\0\2\132"+
    "\1\54\2\47\1\132\2\47\1\220\2\132\1\47\1\55"+
    "\1\47\1\57\33\132\1\60\3\132\1\221\1\222\1\223"+
    "\1\224\1\221\1\225\3\226\1\221\2\226\1\221\2\227"+
    "\2\226\1\71\1\226\33\221\1\226\3\221\1\230\3\0"+
    "\1\231\1\230\3\0\1\230\2\0\3\230\4\0\33\230"+
    "\1\0\3\230\1\0\1\232\2\0\1\233\57\0\1\53"+
    "\1\0\1\233\61\0\1\233\55\0\1\230\3\0\1\231"+
    "\1\230\3\0\1\230\2\0\3\230\4\0\33\230\1\0"+
    "\1\234\2\230\4\0\1\233\1\0\1\235\53\0\4\236"+
    "\1\237\55\236\4\0\1\233\12\0\1\240\46\0\1\233"+
    "\13\0\1\235\127\0\1\233\15\0\1\235\37\0\1\241"+
    "\3\0\1\242\1\241\3\0\1\241\2\0\3\241\1\243"+
    "\3\0\20\241\1\244\12\241\1\0\3\241\1\230\3\0"+
    "\1\231\1\230\3\0\1\230\2\0\3\230\4\0\5\230"+
    "\1\245\25\230\1\0\3\230\4\0\1\233\51\0\1\235"+
    "\3\0\1\45\3\0\2\45\3\0\1\45\2\0\3\45"+
    "\4\0\33\45\1\0\3\45\1\0\1\46\60\0\1\45"+
    "\3\0\2\45\3\0\1\45\2\0\3\45\4\0\3\45"+
    "\1\246\24\45\1\246\2\45\1\0\3\45\1\51\3\0"+
    "\2\51\3\0\1\51\2\0\3\51\4\0\33\51\1\0"+
    "\3\51\1\0\1\52\62\0\1\53\65\0\1\247\73\0"+
    "\1\247\63\0\1\247\115\0\1\247\3\0\1\250\3\0"+
    "\1\251\1\250\3\0\1\250\2\0\3\250\4\0\33\250"+
    "\1\0\3\250\1\0\1\252\2\0\1\253\57\0\1\53"+
    "\1\0\1\253\61\0\1\253\55\0\1\250\3\0\1\251"+
    "\1\250\3\0\1\250\2\0\3\250\4\0\33\250\1\0"+
    "\1\254\2\250\4\0\1\253\1\0\1\247\57\0\1\253"+
    "\13\0\1\247\45\0\1\253\15\0\1\247\43\0\1\253"+
    "\51\0\1\247\3\0\1\74\3\0\2\74\3\0\1\74"+
    "\2\0\3\74\4\0\33\74\1\0\3\74\1\0\1\75"+
    "\60\0\1\255\3\0\1\256\1\255\3\0\1\255\2\0"+
    "\3\255\4\0\33\255\1\0\3\255\1\0\1\257\2\0"+
    "\1\260\57\0\1\53\1\0\1\260\61\0\1\260\61\0"+
    "\1\260\1\0\1\247\57\0\1\260\13\0\1\247\45\0"+
    "\1\260\15\0\1\247\37\0\1\255\3\0\1\256\1\255"+
    "\3\0\1\255\2\0\3\255\4\0\21\255\1\261\10\255"+
    "\1\261\1\0\2\255\1\261\1\255\3\0\1\256\1\255"+
    "\3\0\1\255\2\0\3\255\4\0\1\255\1\262\25\255"+
    "\1\262\3\255\1\0\4\255\3\0\1\256\1\255\3\0"+
    "\1\255\2\0\3\255\4\0\3\255\1\263\7\255\1\264"+
    "\1\255\1\265\7\255\1\266\2\255\1\263\2\255\1\0"+
    "\4\255\3\0\1\256\1\255\3\0\1\255\2\0\3\255"+
    "\4\0\16\255\1\267\14\255\1\0\4\255\3\0\1\256"+
    "\1\255\3\0\1\255\2\0\3\255\4\0\6\255\1\270"+
    "\24\255\1\0\4\255\3\0\1\256\1\255\3\0\1\255"+
    "\2\0\3\255\4\0\16\255\1\271\14\255\1\0\4\255"+
    "\3\0\1\256\1\255\3\0\1\255\2\0\3\255\4\0"+
    "\5\255\1\272\2\255\1\273\22\255\1\0\3\255\4\0"+
    "\1\260\51\0\1\247\3\0\1\274\3\0\1\275\1\274"+
    "\3\0\1\274\2\0\3\274\4\0\33\274\1\0\3\274"+
    "\1\0\1\276\2\0\1\277\57\0\1\53\1\0\1\277"+
    "\61\0\1\277\61\0\1\277\1\0\1\247\57\0\1\277"+
    "\13\0\1\247\45\0\1\277\15\0\1\247\37\0\1\274"+
    "\3\0\1\275\1\274\3\0\1\274\2\0\3\274\4\0"+
    "\6\274\1\300\6\274\1\301\15\274\1\0\3\274\4\0"+
    "\1\277\51\0\1\247\4\0\1\302\2\0\1\277\55\0"+
    "\1\132\3\0\2\132\3\0\1\132\2\0\3\132\4\0"+
    "\33\132\1\0\3\132\1\0\1\133\60\0\1\132\3\0"+
    "\2\132\3\0\1\132\2\0\3\132\4\0\2\132\1\303"+
    "\30\132\1\0\4\132\3\0\2\132\3\0\1\132\2\0"+
    "\1\132\2\135\4\0\33\132\1\0\3\132\1\136\3\0"+
    "\2\136\3\0\1\136\2\0\3\136\4\0\33\136\1\0"+
    "\3\136\1\0\1\137\60\0\1\136\3\0\2\136\3\0"+
    "\1\136\2\0\3\136\4\0\17\136\1\304\1\305\4\136"+
    "\1\306\5\136\1\0\4\136\3\0\2\136\3\0\1\136"+
    "\2\0\3\136\4\0\5\136\1\307\14\136\1\310\10\136"+
    "\1\0\4\136\3\0\2\136\3\0\1\136\2\0\3\136"+
    "\4\0\5\136\1\307\13\136\1\311\10\136\1\311\1\0"+
    "\2\136\1\311\1\136\3\0\2\136\3\0\1\136\2\0"+
    "\3\136\4\0\5\136\1\307\10\136\1\312\14\136\1\0"+
    "\3\136\1\144\3\0\2\144\3\0\1\144\2\0\3\144"+
    "\4\0\33\144\1\0\3\144\1\0\1\145\66\0\1\71"+
    "\53\0\62\236\1\144\3\0\2\144\3\0\1\144\2\0"+
    "\1\144\2\150\4\0\33\144\1\0\3\144\20\0\1\71"+
    "\63\0\1\71\115\0\1\71\3\0\1\144\3\0\1\313"+
    "\1\144\3\0\1\144\2\0\3\144\4\0\33\144\1\0"+
    "\3\144\1\0\1\314\2\0\1\233\61\0\1\233\1\0"+
    "\1\71\57\0\1\233\13\0\1\71\45\0\1\233\15\0"+
    "\1\71\43\0\1\233\51\0\1\71\3\0\1\144\3\0"+
    "\1\315\1\144\3\0\1\144\2\0\3\144\4\0\33\144"+
    "\1\0\3\144\1\0\1\316\2\0\1\317\57\0\1\53"+
    "\1\0\1\317\61\0\1\317\61\0\1\317\1\0\1\71"+
    "\53\0\4\236\1\320\55\236\4\0\1\317\13\0\1\71"+
    "\62\0\1\321\44\0\1\317\15\0\1\71\37\0\1\144"+
    "\3\0\1\315\1\144\3\0\1\144\2\0\3\144\4\0"+
    "\17\144\1\322\13\144\1\0\4\144\3\0\1\315\1\144"+
    "\3\0\1\144\2\0\3\144\4\0\5\144\1\323\14\144"+
    "\1\324\10\144\1\0\4\144\3\0\1\315\1\144\3\0"+
    "\1\144\2\0\3\144\4\0\5\144\1\323\13\144\1\325"+
    "\10\144\1\325\1\0\2\144\1\325\1\144\3\0\1\315"+
    "\1\144\3\0\1\144\2\0\3\144\4\0\5\144\1\323"+
    "\10\144\1\326\14\144\1\0\3\144\4\0\1\317\51\0"+
    "\1\71\4\0\1\201\60\0\1\202\3\0\2\202\3\0"+
    "\1\202\2\0\3\202\4\0\33\202\1\0\3\202\1\0"+
    "\1\203\75\0\2\327\43\0\1\202\3\0\2\202\3\0"+
    "\1\202\2\0\3\202\4\0\22\202\1\330\5\202\3\331"+
    "\1\0\4\202\3\0\2\202\3\0\1\202\2\0\3\202"+
    "\1\332\3\0\1\202\25\206\1\202\4\206\1\0\3\202"+
    "\2\207\1\0\57\207\1\210\1\333\2\0\2\210\3\0"+
    "\1\210\1\334\1\0\3\210\2\0\1\335\1\0\33\210"+
    "\1\0\3\210\1\0\1\211\101\0\1\214\40\0\1\210"+
    "\1\333\2\0\2\210\3\0\1\210\1\334\1\0\3\210"+
    "\2\0\1\335\1\0\27\210\1\336\1\210\1\336\1\210"+
    "\1\0\3\210\1\215\3\0\2\215\3\0\1\215\2\0"+
    "\3\215\4\0\33\215\1\0\3\215\1\0\1\216\61\0"+
    "\1\217\60\0\1\132\3\0\2\132\3\0\1\132\2\0"+
    "\1\132\1\337\1\132\4\0\33\132\1\0\3\132\1\340"+
    "\3\0\1\341\1\340\3\0\1\340\2\0\3\340\4\0"+
    "\33\340\1\0\3\340\1\0\1\342\2\0\1\343\57\0"+
    "\1\53\1\0\1\343\61\0\1\343\55\0\1\340\3\0"+
    "\1\341\1\340\3\0\1\340\2\0\3\340\4\0\33\340"+
    "\1\0\1\344\3\340\3\0\1\341\1\340\3\0\1\340"+
    "\2\0\1\340\2\345\4\0\33\340\1\0\3\340\1\230"+
    "\3\0\2\230\3\0\1\230\2\0\3\230\4\0\33\230"+
    "\1\0\3\230\1\231\1\233\1\0\1\233\1\346\1\231"+
    "\3\233\1\231\2\233\3\231\4\233\26\231\1\347\4\231"+
    "\1\233\3\231\1\0\1\232\60\0\2\233\1\0\1\233"+
    "\1\350\44\233\1\351\10\233\1\230\3\0\2\230\3\0"+
    "\1\230\2\0\1\230\2\352\4\0\33\230\1\0\1\352"+
    "\2\230\10\236\1\353\51\236\2\237\1\236\1\237\1\354"+
    "\3\237\1\355\40\237\1\356\10\237\1\241\3\0\2\241"+
    "\3\0\1\241\2\0\3\241\4\0\33\241\1\0\3\241"+
    "\1\242\1\233\1\0\1\233\1\241\1\242\3\233\1\242"+
    "\2\233\3\242\4\233\26\242\1\357\4\242\1\233\3\242"+
    "\17\0\1\360\42\0\1\241\3\0\2\241\3\0\1\241"+
    "\2\0\3\241\4\0\5\241\1\361\25\241\1\0\3\241"+
    "\1\230\3\0\2\230\3\0\1\230\2\0\3\230\4\0"+
    "\14\230\1\362\16\230\1\0\3\230\1\45\3\0\2\45"+
    "\3\0\1\45\2\0\3\45\4\0\10\45\1\363\22\45"+
    "\1\0\3\45\1\250\3\0\2\250\3\0\1\250\2\0"+
    "\3\250\4\0\33\250\1\0\3\250\1\251\1\253\1\0"+
    "\1\253\1\250\1\251\3\253\1\251\2\253\3\251\4\253"+
    "\26\251\1\364\4\251\1\253\3\251\1\0\1\252\60\0"+
    "\2\253\1\0\1\253\1\365\44\253\1\366\10\253\1\250"+
    "\3\0\2\250\3\0\1\250\2\0\1\250\2\367\4\0"+
    "\33\250\1\0\1\367\2\250\1\255\3\0\2\255\3\0"+
    "\1\255\2\0\3\255\4\0\33\255\1\0\3\255\1\256"+
    "\1\260\1\0\1\260\1\370\1\256\3\260\1\256\2\260"+
    "\3\256\4\260\26\256\1\371\4\256\1\260\3\256\1\0"+
    "\1\257\60\0\2\260\1\0\1\260\1\372\44\260\1\373"+
    "\10\260\1\255\3\0\2\255\3\0\1\255\2\0\3\255"+
    "\4\0\21\255\1\374\10\255\1\374\1\0\2\255\1\374"+
    "\1\255\3\0\2\255\3\0\1\255\2\0\3\255\4\0"+
    "\13\255\1\375\17\255\1\0\4\255\3\0\2\255\3\0"+
    "\1\255\2\0\3\255\4\0\10\255\1\376\22\255\1\0"+
    "\4\255\3\0\2\255\3\0\1\255\2\0\3\255\4\0"+
    "\21\255\1\377\10\255\1\377\1\0\2\255\1\377\1\255"+
    "\3\0\2\255\3\0\1\255\2\0\3\255\4\0\4\255"+
    "\1\u0100\26\255\1\0\4\255\3\0\2\255\3\0\1\255"+
    "\2\0\3\255\4\0\11\255\1\u0101\21\255\1\0\1\255"+
    "\1\u0101\2\255\3\0\2\255\3\0\1\255\2\0\3\255"+
    "\4\0\22\255\1\u0102\10\255\1\0\4\255\3\0\2\255"+
    "\3\0\1\255\2\0\3\255\4\0\20\255\1\u0103\12\255"+
    "\1\0\4\255\3\0\2\255\3\0\1\255\2\0\3\255"+
    "\4\0\22\255\1\u0104\10\255\1\0\4\255\3\0\2\255"+
    "\3\0\1\255\2\0\3\255\4\0\11\255\1\u0105\21\255"+
    "\1\0\1\255\1\u0105\1\255\1\274\3\0\2\274\3\0"+
    "\1\274\2\0\3\274\4\0\33\274\1\0\3\274\1\275"+
    "\1\277\1\0\1\277\1\u0106\1\275\3\277\1\275\2\277"+
    "\3\275\4\277\26\275\1\u0107\4\275\1\277\3\275\1\0"+
    "\1\276\60\0\2\277\1\0\1\277\1\u0108\44\277\1\u0109"+
    "\10\277\1\274\3\0\2\274\3\0\1\274\2\0\3\274"+
    "\4\0\6\274\1\301\24\274\1\0\4\274\1\u010a\1\u010b"+
    "\1\0\2\274\3\0\1\274\2\0\3\274\4\0\33\274"+
    "\1\0\3\274\1\0\1\302\60\0\1\136\3\0\2\136"+
    "\3\0\1\136\2\0\3\136\4\0\23\136\1\u010c\7\136"+
    "\1\0\4\136\3\0\2\136\3\0\1\136\2\0\3\136"+
    "\4\0\20\136\1\u010d\12\136\1\0\4\136\3\0\2\136"+
    "\3\0\1\136\2\0\3\136\4\0\11\136\1\u010e\21\136"+
    "\1\0\1\136\1\u010e\2\136\3\0\2\136\3\0\1\136"+
    "\2\0\3\136\4\0\17\136\1\u010c\13\136\1\0\4\136"+
    "\3\0\2\136\3\0\1\136\2\0\3\136\4\0\20\136"+
    "\1\u010c\12\136\1\0\4\136\3\0\2\136\3\0\1\136"+
    "\2\0\3\136\4\0\21\136\1\u010c\10\136\1\u010c\1\0"+
    "\2\136\1\u010c\1\136\3\0\2\136\3\0\1\136\2\0"+
    "\3\136\4\0\22\136\1\u010c\10\136\1\0\3\136\1\313"+
    "\1\233\1\0\1\233\1\u010f\1\313\3\233\1\313\2\233"+
    "\3\313\4\233\26\313\1\u0110\4\313\1\233\3\313\1\0"+
    "\1\314\60\0\1\315\1\317\1\0\1\317\1\u0111\1\315"+
    "\3\317\1\315\2\317\3\315\4\317\26\315\1\u0112\4\315"+
    "\1\317\3\315\1\0\1\316\60\0\2\317\1\0\1\317"+
    "\1\u0113\44\317\1\u0114\10\317\2\320\1\236\1\320\1\u0115"+
    "\3\320\1\u0116\40\320\1\u0117\10\320\1\144\3\0\2\144"+
    "\3\0\1\144\2\0\3\144\4\0\23\144\1\u0118\7\144"+
    "\1\0\4\144\3\0\2\144\3\0\1\144\2\0\3\144"+
    "\4\0\17\144\1\u0118\13\144\1\0\4\144\3\0\2\144"+
    "\3\0\1\144\2\0\3\144\4\0\20\144\1\u0118\12\144"+
    "\1\0\4\144\3\0\2\144\3\0\1\144\2\0\3\144"+
    "\4\0\21\144\1\u0118\10\144\1\u0118\1\0\2\144\1\u0118"+
    "\1\144\3\0\2\144\3\0\1\144\2\0\3\144\4\0"+
    "\22\144\1\u0118\10\144\1\0\3\144\1\202\3\0\2\202"+
    "\3\0\1\202\2\0\1\202\2\u0119\4\0\33\202\1\0"+
    "\3\202\1\332\3\0\2\332\3\0\1\332\2\0\3\332"+
    "\4\0\33\332\1\0\3\332\1\0\1\333\7\0\2\334"+
    "\1\0\1\334\4\0\1\335\61\0\1\u011a\40\0\1\340"+
    "\3\0\2\340\3\0\1\340\2\0\3\340\4\0\33\340"+
    "\1\0\3\340\1\341\1\343\1\0\1\343\1\340\1\341"+
    "\3\343\1\341\2\343\3\341\4\343\26\341\1\u011b\4\341"+
    "\1\343\3\341\1\0\1\342\60\0\2\343\1\0\1\343"+
    "\1\u011c\44\343\1\u011d\10\343\1\340\3\0\2\340\3\0"+
    "\1\340\2\0\1\340\2\u011e\4\0\33\340\1\0\1\u011e"+
    "\3\340\3\0\2\340\3\0\1\340\2\0\1\340\2\345"+
    "\4\0\33\340\1\0\3\340\1\231\1\233\1\0\1\233"+
    "\1\u011f\1\231\3\233\1\231\2\233\3\231\4\233\26\231"+
    "\1\347\4\231\1\233\3\231\2\233\1\0\1\233\1\u0120"+
    "\44\233\1\351\10\233\2\237\1\236\1\237\1\u0121\3\237"+
    "\1\355\40\237\1\356\10\237\1\242\1\233\1\0\1\233"+
    "\2\242\3\233\1\242\2\233\3\242\4\233\26\242\1\357"+
    "\4\242\1\233\3\242\1\241\3\0\2\241\3\0\1\241"+
    "\2\0\3\241\4\0\14\241\1\u0122\16\241\1\0\3\241"+
    "\1\45\3\0\2\45\3\0\1\45\2\0\3\45\4\0"+
    "\16\45\1\u0123\14\45\1\0\3\45\1\251\1\253\1\0"+
    "\1\253\2\251\3\253\1\251\2\253\3\251\4\253\26\251"+
    "\1\364\4\251\1\253\3\251\2\253\1\0\1\253\1\u0124"+
    "\44\253\1\366\10\253\1\256\1\260\1\0\1\260\1\u0125"+
    "\1\256\3\260\1\256\2\260\3\256\4\260\26\256\1\371"+
    "\4\256\1\260\3\256\2\260\1\0\1\260\1\u0126\44\260"+
    "\1\373\10\260\1\255\3\0\2\255\3\0\1\255\2\0"+
    "\3\255\4\0\16\255\1\u0127\14\255\1\0\4\255\3\0"+
    "\2\255\3\0\1\255\2\0\3\255\4\0\13\255\1\u0128"+
    "\17\255\1\0\4\255\3\0\2\255\3\0\1\255\2\0"+
    "\3\255\4\0\16\255\1\u0129\14\255\1\0\4\255\3\0"+
    "\2\255\3\0\1\255\2\0\3\255\4\0\5\255\1\u012a"+
    "\25\255\1\0\4\255\3\0\2\255\3\0\1\255\2\0"+
    "\3\255\4\0\13\255\1\u012b\17\255\1\0\4\255\3\0"+
    "\2\255\3\0\1\255\2\0\3\255\4\0\22\255\1\u012c"+
    "\10\255\1\0\4\255\3\0\2\255\3\0\1\255\2\0"+
    "\3\255\4\0\16\255\1\u012d\14\255\1\0\4\255\3\0"+
    "\2\255\3\0\1\255\2\0\3\255\4\0\5\255\1\u012e"+
    "\25\255\1\0\4\255\3\0\2\255\3\0\1\255\2\0"+
    "\3\255\4\0\13\255\1\u012f\17\255\1\0\4\255\3\0"+
    "\2\255\3\0\1\255\2\0\3\255\4\0\6\255\1\u0130"+
    "\24\255\1\0\3\255\1\275\1\277\1\0\1\277\1\u0131"+
    "\1\275\3\277\1\275\2\277\3\275\4\277\26\275\1\u0107"+
    "\4\275\1\277\3\275\2\277\1\0\1\277\1\u0132\44\277"+
    "\1\u0109\10\277\1\0\1\u010a\1\u010b\61\0\1\u010b\57\0"+
    "\1\136\3\0\2\136\3\0\1\136\2\0\3\136\4\0"+
    "\16\136\1\u0133\14\136\1\0\4\136\3\0\2\136\3\0"+
    "\1\136\2\0\3\136\4\0\21\136\1\u0134\10\136\1\u0134"+
    "\1\0\2\136\1\u0134\1\313\1\233\1\0\1\233\1\u0135"+
    "\1\313\3\233\1\313\2\233\3\313\4\233\26\313\1\u0110"+
    "\4\313\1\233\3\313\1\315\1\317\1\0\1\317\1\u0136"+
    "\1\315\3\317\1\315\2\317\3\315\4\317\26\315\1\u0112"+
    "\4\315\1\317\3\315\2\317\1\0\1\317\1\u0137\44\317"+
    "\1\u0114\10\317\2\320\1\236\1\320\1\u0138\3\320\1\u0116"+
    "\40\320\1\u0117\10\320\1\341\1\343\1\0\1\343\2\341"+
    "\3\343\1\341\2\343\3\341\4\343\26\341\1\u011b\4\341"+
    "\1\343\3\341\2\343\1\0\1\343\1\u0139\44\343\1\u011d"+
    "\10\343\1\255\3\0\2\255\3\0\1\255\2\0\3\255"+
    "\4\0\3\255\1\u013a\24\255\1\u013a\2\255\1\0\4\255"+
    "\3\0\2\255\3\0\1\255\2\0\3\255\4\0\16\255"+
    "\1\u013b\14\255\1\0\4\255\3\0\2\255\3\0\1\255"+
    "\2\0\3\255\4\0\16\255\1\u013c\14\255\1\0\4\255"+
    "\3\0\2\255\3\0\1\255\2\0\3\255\4\0\22\255"+
    "\1\u013d\10\255\1\0\3\255\1\136\3\0\2\136\3\0"+
    "\1\136\2\0\3\136\4\0\20\136\1\u013e\12\136\1\0"+
    "\4\136\3\0\2\136\3\0\1\136\2\0\3\136\4\0"+
    "\22\136\1\u013f\10\136\1\0\3\136\1\255\3\0\2\255"+
    "\3\0\1\255\2\0\3\255\4\0\3\255\1\u0140\24\255"+
    "\1\u0140\2\255\1\0\4\255\3\0\2\255\3\0\1\255"+
    "\2\0\3\255\4\0\3\255\1\u0141\24\255\1\u0141\2\255"+
    "\1\0\3\255\1\136\3\0\2\136\3\0\1\136\2\0"+
    "\3\136\4\0\13\136\1\u0142\17\136\1\0\3\136\1\255"+
    "\3\0\2\255\3\0\1\255\2\0\3\255\4\0\1\255"+
    "\1\u0143\25\255\1\u0143\3\255\1\0\4\255\3\0\2\255"+
    "\3\0\1\255\2\0\3\255\4\0\1\255\1\u0144\25\255"+
    "\1\u0144\3\255\1\0\3\255\1\136\3\0\2\136\3\0"+
    "\1\136\2\0\3\136\4\0\5\136\1\u0145\25\136\1\0"+
    "\3\136\1\255\3\0\2\255\3\0\1\255\2\0\3\255"+
    "\4\0\13\255\1\u0146\17\255\1\0\4\255\3\0\2\255"+
    "\3\0\1\255\2\0\3\255\4\0\13\255\1\u0147\17\255"+
    "\1\0\3\255\1\136\3\0\2\136\3\0\1\136\2\0"+
    "\3\136\4\0\24\136\1\u0148\6\136\1\0\4\136\3\0"+
    "\2\136\3\0\1\136\2\0\3\136\4\0\5\136\1\u0149"+
    "\25\136\1\0\4\136\3\0\2\136\3\0\1\136\2\0"+
    "\3\136\4\0\13\136\1\u014a\17\136\1\0\3\136";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12750];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\3\1\1\0\7\1\1\11\6\1\1\11\6\1"+
    "\1\11\5\1\1\0\4\1\1\11\4\1\1\11\3\1"+
    "\1\0\17\1\1\0\42\1\1\0\26\1\1\11\7\1"+
    "\1\0\6\1\1\0\1\1\1\11\2\0\1\11\2\1"+
    "\1\0\3\1\1\11\3\1\1\0\4\1\1\0\16\1"+
    "\1\0\17\1\2\0\1\11\11\1\2\0\1\11\5\1"+
    "\1\0\4\1\1\11\1\0\4\1\1\0\1\1\1\11"+
    "\4\1\1\11\1\0\3\1\1\11\1\0\14\1\1\11"+
    "\2\0\10\1\1\11\1\0\2\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\0\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 77: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 78: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 79: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 80: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 81: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 82: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 83: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 84: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 86: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 88: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 89: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 90: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 92: break;
          case 17:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 93: break;
          case 18:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 19:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 95: break;
          case 20:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 96: break;
          case 21:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 97: break;
          case 22:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 23:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 99: break;
          case 24:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 100: break;
          case 25:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 101: break;
          case 26:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 102: break;
          case 27:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 103: break;
          case 28:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 104: break;
          case 29:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 105: break;
          case 30:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 106: break;
          case 31:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 107: break;
          case 32:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 108: break;
          case 33:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 109: break;
          case 34:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 35:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 111: break;
          case 36:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 37:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 113: break;
          case 38:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 114: break;
          case 39:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 115: break;
          case 40:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 116: break;
          case 41:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 117: break;
          case 42:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 118: break;
          case 43:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 119: break;
          case 44:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 120: break;
          case 45:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 121: break;
          case 46:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 122: break;
          case 47:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 123: break;
          case 48:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 124: break;
          case 49:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 125: break;
          case 50:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 126: break;
          case 51:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 127: break;
          case 52:
            { yybegin(SET); return BatchTypes.EXTENSION;
            }
          // fall through
          case 128: break;
          case 53:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 129: break;
          case 54:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 130: break;
          case 55:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 131: break;
          case 56:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 132: break;
          case 57:
            { yybegin(ASSOC_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 133: break;
          case 58:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 134: break;
          case 59:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 135: break;
          case 60:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 136: break;
          case 61:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 137: break;
          case 62:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 138: break;
          case 63:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 139: break;
          case 64:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 140: break;
          case 65:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 141: break;
          case 66:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 142: break;
          case 67:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 143: break;
          case 68:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 144: break;
          case 69:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 145: break;
          case 70:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 146: break;
          case 71:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 147: break;
          case 72:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 148: break;
          case 73:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 149: break;
          case 74:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 150: break;
          case 75:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 151: break;
          case 76:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
