// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int BREAK = 8;
  public static final int CALL = 10;
  public static final int COMMAND = 12;
  public static final int ECHO = 14;
  public static final int ECHO_STRING = 16;
  public static final int EXIT = 18;
  public static final int GOTO = 20;
  public static final int IF = 22;
  public static final int IF_ERRORLEVEL = 24;
  public static final int IF_EXIST = 26;
  public static final int IF_STANDARD = 28;
  public static final int LABEL = 30;
  public static final int MORE = 32;
  public static final int REM = 34;
  public static final int SET = 36;
  public static final int SET_LOCAL = 38;
  public static final int SHIFT = 40;
  public static final int SET_VALUE = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  5,  5, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\0\1\4\2\0\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\1\13\1\11\1\0\1\14\11\15\1\16"+
    "\1\17\1\13\1\20\1\21\1\22\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\35\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\35\1\51\2\35"+
    "\1\0\1\52\4\0\1\53\1\25\1\54\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\55\1\43\1\44\1\56\1\46\1\47"+
    "\1\50\1\35\1\51\2\35\1\0\1\57\1\0\1\60"+
    "\261\0\2\61\115\0\1\62\u02aa\0\1\63\u01d5\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\1\1\2\2\1\0\1\1\1\3\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\2\1\1\3\1\10"+
    "\1\11\1\4\1\10\1\12\1\13\1\2\2\14\1\15"+
    "\2\14\1\16\1\17\1\2\1\0\1\16\1\14\1\4"+
    "\1\14\1\20\2\14\1\4\1\21\1\4\1\22\1\23"+
    "\1\6\1\24\1\25\1\2\1\0\1\14\1\4\2\14"+
    "\10\24\1\14\1\26\1\27\1\2\1\0\1\14\1\4"+
    "\2\14\1\26\1\14\1\30\1\31\1\4\1\32\1\33"+
    "\1\34\4\33\1\14\1\35\1\20\1\4\1\36\3\20"+
    "\1\14\1\37\4\20\1\14\1\40\1\2\1\0\1\20"+
    "\2\4\1\20\1\4\1\20\4\14\1\20\1\41\1\42"+
    "\1\43\1\4\2\42\1\44\1\4\1\45\2\4\1\46"+
    "\1\47\1\50\1\51\1\4\1\52\1\53\1\2\1\0"+
    "\1\52\1\4\1\54\2\1\1\2\1\0\1\1\1\3"+
    "\2\0\1\55\2\56\1\0\1\56\1\1\1\10\1\14"+
    "\2\16\1\17\1\0\1\16\1\4\1\57\2\24\1\25"+
    "\1\0\10\24\1\60\3\24\2\26\1\27\1\0\2\26"+
    "\1\30\1\61\7\33\1\14\1\37\1\14\1\40\2\0"+
    "\1\62\5\14\1\63\1\42\1\63\1\64\2\0\1\65"+
    "\1\66\1\67\2\52\1\53\1\0\1\52\1\54\1\70"+
    "\1\1\1\70\1\0\1\32\1\71\1\70\1\71\1\0"+
    "\1\56\1\72\1\56\1\55\1\10\2\16\1\0\1\73"+
    "\1\74\1\24\1\74\1\0\11\24\1\75\1\24\1\76"+
    "\1\26\1\76\2\0\1\77\1\100\2\33\1\70\1\14"+
    "\1\33\1\14\1\33\1\0\1\33\1\71\1\0\1\62"+
    "\1\63\1\101\2\52\1\0\1\54\3\70\1\72\1\102"+
    "\1\16\2\74\2\24\1\103\1\104\1\105\1\24\1\106"+
    "\1\107\1\110\2\24\2\76\2\33\1\70\3\33\1\52"+
    "\1\111\1\112\2\24\1\113\1\33\1\114\2\24\1\33"+
    "\2\24\1\33\1\115\1\116\2\33\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u04e0\0\u04e0\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0618"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u0618\0\u08bc"+
    "\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u09c0"+
    "\0\u0a5c\0\u0618\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0618\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0c98"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u0fd8\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u168c\0\u1728\0\u175c\0\u1790\0\u17c4"+
    "\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964"+
    "\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u0618"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1c70\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u0618\0\u1e10\0\u1e44\0\u0618\0\u1e78\0\u1eac\0\u1ee0\0\u1f14"+
    "\0\u1f48\0\u1f7c\0\u0618\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u0af8\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u20e8\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8"+
    "\0\u252c\0\u0af8\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u0618"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u1964\0\u2908\0\u18fc"+
    "\0\u293c\0\u2970\0\u29a4\0\u0618\0\u1a34\0\u0af8\0\u29d8\0\u2a0c"+
    "\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u1d0c\0\u2b10\0\u0618\0\u2b44"+
    "\0\u1d0c\0\u1e10\0\u1e10\0\u1e44\0\u2b78\0\u2bac\0\u0618\0\u2be0"+
    "\0\u1d0c\0\u2c14\0\u2c48\0\u0618\0\u2c7c\0\u1fb0\0\u20e8\0\u2cb0"+
    "\0\u0618\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u23f4\0\u2f54\0\u0618"+
    "\0\u2f88\0\u2fbc\0\u2ff0\0\u11e0\0\u3024\0\u3058\0\u1318\0\u308c"+
    "\0\u1318\0\u30c0\0\u0618\0\u30f4\0\u1e10\0\u27d0\0\u3128\0\u1318"+
    "\0\u2908\0\u0618\0\u315c\0\u0618\0\u3190\0\u29d8\0\u1d40\0\u1da8"+
    "\0\u1e44\0\u1e78\0\u071c\0\u204c\0\u211c\0\u2184\0\u31c4\0\u31f8"+
    "\0\u20e8\0\u20e8\0\u20e8\0\u322c\0\u20e8\0\u20e8\0\u20e8\0\u3260"+
    "\0\u3294\0\u2428\0\u2490\0\u32c8\0\u32fc\0\u26cc\0\u2734\0\u279c"+
    "\0\u27d0\0\u2a74\0\u20e8\0\u20e8\0\u3330\0\u3364\0\u20e8\0\u3398"+
    "\0\u11e0\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u20e8"+
    "\0\u20e8\0\u3504\0\u3538\0\u11e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\1\30\1\31\1\26\1\32\1\33\1\34"+
    "\1\35\1\26\2\36\3\26\1\37\1\40\1\41\1\42"+
    "\1\43\20\26\1\44\12\26\1\45\4\26\1\46\1\47"+
    "\2\0\2\46\3\50\1\46\2\50\3\46\4\50\5\46"+
    "\1\51\26\46\1\50\4\46\1\52\1\53\1\54\1\0"+
    "\2\52\1\55\2\50\1\52\2\50\3\52\1\50\1\56"+
    "\1\57\1\60\34\52\1\61\4\52\1\62\1\63\1\64"+
    "\1\65\1\62\1\66\1\67\2\70\1\62\2\70\3\62"+
    "\1\70\1\71\1\72\1\73\34\62\1\74\4\62\1\75"+
    "\1\76\1\54\1\0\2\75\1\55\2\50\1\75\2\50"+
    "\3\75\1\50\1\56\1\50\1\60\17\75\1\77\14\75"+
    "\1\61\4\75\1\100\1\101\1\54\1\0\2\100\3\50"+
    "\1\100\2\50\3\100\1\102\3\50\34\100\1\50\4\100"+
    "\1\103\1\104\1\105\1\106\2\103\1\107\2\110\1\103"+
    "\2\110\3\103\1\110\1\111\1\50\1\112\1\103\1\113"+
    "\1\114\1\115\1\103\1\116\1\103\1\117\1\103\1\120"+
    "\3\103\1\121\4\103\1\122\5\103\1\113\1\115\1\103"+
    "\1\122\1\123\1\103\1\120\1\122\1\103\1\124\1\125"+
    "\1\126\1\127\2\124\1\130\2\131\1\124\2\131\3\124"+
    "\1\131\1\132\1\50\1\133\17\124\1\134\14\124\1\135"+
    "\5\124\1\136\1\126\1\127\2\124\1\130\2\131\1\124"+
    "\2\131\3\124\1\131\1\132\1\50\1\133\34\124\1\135"+
    "\4\124\1\75\1\137\1\54\1\0\2\75\1\55\2\50"+
    "\1\75\2\50\1\140\2\141\1\50\1\56\1\50\1\60"+
    "\34\75\1\61\4\75\1\142\1\143\1\54\1\0\2\142"+
    "\3\50\1\142\2\50\3\142\4\50\5\142\1\144\1\142"+
    "\1\145\4\142\1\146\1\142\1\147\15\142\1\50\4\142"+
    "\1\150\1\151\1\54\1\0\2\150\1\152\1\153\1\50"+
    "\1\150\2\50\1\150\2\154\1\50\1\155\1\50\1\156"+
    "\34\150\1\157\4\150\1\160\1\161\1\30\1\31\2\160"+
    "\1\162\1\34\1\36\1\160\2\36\3\160\1\36\1\163"+
    "\1\50\1\164\34\160\1\165\4\160\1\166\1\167\1\170"+
    "\1\171\2\166\1\172\1\173\1\174\1\166\2\174\3\166"+
    "\1\174\1\175\1\176\1\177\5\166\1\200\1\166\1\201"+
    "\4\166\1\202\1\166\1\203\15\166\1\204\4\166\1\100"+
    "\1\205\1\54\1\0\2\100\3\50\1\100\2\50\3\100"+
    "\4\50\34\100\1\50\4\100\1\206\1\207\1\54\1\0"+
    "\2\206\1\55\2\50\1\206\1\210\1\50\1\211\2\206"+
    "\1\50\1\56\1\50\1\60\1\206\26\212\1\206\4\212"+
    "\1\61\4\206\2\213\1\54\61\213\1\214\1\215\1\54"+
    "\1\0\2\214\3\50\1\214\1\216\1\50\1\217\2\214"+
    "\2\50\1\220\1\50\34\214\1\50\4\214\1\221\1\222"+
    "\1\54\1\0\2\221\1\55\2\50\1\221\2\50\3\221"+
    "\1\50\1\56\1\50\1\60\34\221\1\61\4\221\1\75"+
    "\1\223\1\54\1\0\2\75\1\55\2\50\1\75\2\50"+
    "\1\224\2\75\1\50\1\56\1\50\1\60\34\75\1\61"+
    "\4\75\1\225\1\226\1\227\1\230\1\225\1\231\3\232"+
    "\1\225\2\232\1\225\2\233\2\232\1\72\1\232\34\225"+
    "\1\232\4\225\1\234\3\0\1\235\1\234\3\0\1\234"+
    "\2\0\3\234\4\0\34\234\1\0\4\234\1\0\1\236"+
    "\2\0\1\237\61\0\1\54\1\0\1\237\63\0\1\237"+
    "\57\0\1\234\3\0\1\235\1\234\3\0\1\234\2\0"+
    "\3\234\4\0\34\234\1\0\1\240\3\234\4\0\1\237"+
    "\1\0\1\241\55\0\4\242\1\243\57\242\4\0\1\237"+
    "\12\0\1\244\50\0\1\237\13\0\1\241\133\0\1\237"+
    "\15\0\1\241\41\0\1\245\3\0\1\246\1\245\3\0"+
    "\1\245\2\0\3\245\1\247\3\0\21\245\1\250\12\245"+
    "\1\0\4\245\1\234\3\0\1\235\1\234\3\0\1\234"+
    "\2\0\3\234\4\0\5\234\1\251\26\234\1\0\4\234"+
    "\4\0\1\237\52\0\1\241\4\0\1\46\3\0\2\46"+
    "\3\0\1\46\2\0\3\46\4\0\34\46\1\0\4\46"+
    "\1\0\1\47\62\0\1\46\3\0\2\46\3\0\1\46"+
    "\2\0\3\46\4\0\3\46\1\252\25\46\1\252\2\46"+
    "\1\0\4\46\1\52\3\0\2\52\3\0\1\52\2\0"+
    "\3\52\4\0\34\52\1\0\4\52\1\0\1\53\64\0"+
    "\1\54\67\0\1\253\75\0\1\253\65\0\1\253\120\0"+
    "\1\253\4\0\1\254\3\0\1\255\1\254\3\0\1\254"+
    "\2\0\3\254\4\0\34\254\1\0\4\254\1\0\1\256"+
    "\2\0\1\257\61\0\1\54\1\0\1\257\63\0\1\257"+
    "\57\0\1\254\3\0\1\255\1\254\3\0\1\254\2\0"+
    "\3\254\4\0\34\254\1\0\1\260\3\254\4\0\1\257"+
    "\1\0\1\253\61\0\1\257\13\0\1\253\47\0\1\257"+
    "\15\0\1\253\45\0\1\257\52\0\1\253\4\0\1\75"+
    "\3\0\2\75\3\0\1\75\2\0\3\75\4\0\34\75"+
    "\1\0\4\75\1\0\1\76\62\0\1\75\3\0\2\75"+
    "\3\0\1\75\2\0\3\75\4\0\6\75\1\261\7\75"+
    "\1\262\15\75\1\0\4\75\1\100\3\0\2\100\3\0"+
    "\1\100\2\0\3\100\4\0\34\100\1\0\4\100\1\0"+
    "\1\101\62\0\1\263\3\0\1\264\1\263\3\0\1\263"+
    "\2\0\3\263\4\0\34\263\1\0\4\263\1\0\1\265"+
    "\2\0\1\266\61\0\1\54\1\0\1\266\63\0\1\266"+
    "\63\0\1\266\1\0\1\253\61\0\1\266\13\0\1\253"+
    "\47\0\1\266\15\0\1\253\41\0\1\263\3\0\1\264"+
    "\1\263\3\0\1\263\2\0\3\263\4\0\22\263\1\267"+
    "\10\263\1\267\1\0\2\263\1\267\2\263\3\0\1\264"+
    "\1\263\3\0\1\263\2\0\3\263\4\0\21\263\1\270"+
    "\12\263\1\0\5\263\3\0\1\264\1\263\3\0\1\263"+
    "\2\0\3\263\4\0\1\263\1\271\26\263\1\271\3\263"+
    "\1\0\5\263\3\0\1\264\1\263\3\0\1\263\2\0"+
    "\3\263\4\0\3\263\1\272\10\263\1\273\1\263\1\274"+
    "\7\263\1\275\2\263\1\272\2\263\1\0\5\263\3\0"+
    "\1\264\1\263\3\0\1\263\2\0\3\263\4\0\17\263"+
    "\1\276\14\263\1\0\5\263\3\0\1\264\1\263\3\0"+
    "\1\263\2\0\3\263\4\0\6\263\1\277\25\263\1\0"+
    "\5\263\3\0\1\264\1\263\3\0\1\263\2\0\3\263"+
    "\4\0\17\263\1\300\14\263\1\0\5\263\3\0\1\264"+
    "\1\263\3\0\1\263\2\0\3\263\4\0\5\263\1\301"+
    "\2\263\1\302\23\263\1\0\4\263\4\0\1\266\52\0"+
    "\1\253\4\0\1\303\3\0\1\304\1\303\3\0\1\303"+
    "\2\0\3\303\4\0\34\303\1\0\4\303\1\0\1\305"+
    "\2\0\1\306\61\0\1\54\1\0\1\306\63\0\1\306"+
    "\63\0\1\306\1\0\1\253\61\0\1\306\13\0\1\253"+
    "\47\0\1\306\15\0\1\253\41\0\1\303\3\0\1\304"+
    "\1\303\3\0\1\303\2\0\3\303\4\0\6\303\1\307"+
    "\7\303\1\310\15\303\1\0\4\303\4\0\1\306\52\0"+
    "\1\253\5\0\1\311\2\0\1\306\60\0\1\137\62\0"+
    "\1\75\3\0\2\75\3\0\1\75\2\0\3\75\4\0"+
    "\2\75\1\312\31\75\1\0\5\75\3\0\2\75\3\0"+
    "\1\75\2\0\1\75\2\141\4\0\34\75\1\0\4\75"+
    "\1\142\3\0\2\142\3\0\1\142\2\0\3\142\4\0"+
    "\34\142\1\0\4\142\1\0\1\143\62\0\1\142\3\0"+
    "\2\142\3\0\1\142\2\0\3\142\4\0\20\142\1\313"+
    "\1\314\4\142\1\315\5\142\1\0\5\142\3\0\2\142"+
    "\3\0\1\142\2\0\3\142\4\0\5\142\1\316\15\142"+
    "\1\317\10\142\1\0\5\142\3\0\2\142\3\0\1\142"+
    "\2\0\3\142\4\0\5\142\1\316\14\142\1\320\10\142"+
    "\1\320\1\0\2\142\1\320\2\142\3\0\2\142\3\0"+
    "\1\142\2\0\3\142\4\0\5\142\1\316\11\142\1\321"+
    "\14\142\1\0\4\142\1\150\3\0\2\150\3\0\1\150"+
    "\2\0\3\150\4\0\34\150\1\0\4\150\1\0\1\151"+
    "\70\0\1\72\55\0\64\242\1\150\3\0\2\150\3\0"+
    "\1\150\2\0\1\150\2\154\4\0\34\150\1\0\4\150"+
    "\20\0\1\72\65\0\1\72\120\0\1\72\4\0\1\150"+
    "\3\0\1\322\1\150\3\0\1\150\2\0\3\150\4\0"+
    "\34\150\1\0\4\150\1\0\1\323\2\0\1\237\63\0"+
    "\1\237\1\0\1\72\61\0\1\237\13\0\1\72\47\0"+
    "\1\237\15\0\1\72\45\0\1\237\52\0\1\72\4\0"+
    "\1\150\3\0\1\324\1\150\3\0\1\150\2\0\3\150"+
    "\4\0\34\150\1\0\4\150\1\0\1\325\2\0\1\326"+
    "\61\0\1\54\1\0\1\326\63\0\1\326\63\0\1\326"+
    "\1\0\1\72\55\0\4\242\1\327\57\242\4\0\1\326"+
    "\13\0\1\72\64\0\1\330\46\0\1\326\15\0\1\72"+
    "\41\0\1\150\3\0\1\324\1\150\3\0\1\150\2\0"+
    "\3\150\4\0\20\150\1\331\13\150\1\0\5\150\3\0"+
    "\1\324\1\150\3\0\1\150\2\0\3\150\4\0\5\150"+
    "\1\332\15\150\1\333\10\150\1\0\5\150\3\0\1\324"+
    "\1\150\3\0\1\150\2\0\3\150\4\0\5\150\1\332"+
    "\14\150\1\334\10\150\1\334\1\0\2\150\1\334\2\150"+
    "\3\0\1\324\1\150\3\0\1\150\2\0\3\150\4\0"+
    "\5\150\1\332\11\150\1\335\14\150\1\0\4\150\4\0"+
    "\1\326\52\0\1\72\5\0\1\205\62\0\1\206\3\0"+
    "\2\206\3\0\1\206\2\0\3\206\4\0\34\206\1\0"+
    "\4\206\1\0\1\207\77\0\2\336\45\0\1\206\3\0"+
    "\2\206\3\0\1\206\2\0\3\206\4\0\23\206\1\337"+
    "\5\206\3\340\1\0\5\206\3\0\2\206\3\0\1\206"+
    "\2\0\3\206\1\341\3\0\1\206\26\212\1\206\4\212"+
    "\1\0\4\206\2\213\1\0\61\213\1\214\1\342\2\0"+
    "\2\214\3\0\1\214\1\343\1\0\3\214\2\0\1\344"+
    "\1\0\34\214\1\0\4\214\1\0\1\215\103\0\1\220"+
    "\42\0\1\214\1\342\2\0\2\214\3\0\1\214\1\343"+
    "\1\0\3\214\2\0\1\344\1\0\30\214\1\345\1\214"+
    "\1\345\1\214\1\0\4\214\1\221\3\0\2\221\3\0"+
    "\1\221\2\0\3\221\4\0\34\221\1\0\4\221\1\0"+
    "\1\222\63\0\1\223\62\0\1\75\3\0\2\75\3\0"+
    "\1\75\2\0\1\75\1\346\1\75\4\0\34\75\1\0"+
    "\4\75\1\347\3\0\1\350\1\347\3\0\1\347\2\0"+
    "\3\347\4\0\34\347\1\0\4\347\1\0\1\351\2\0"+
    "\1\352\61\0\1\54\1\0\1\352\63\0\1\352\57\0"+
    "\1\347\3\0\1\350\1\347\3\0\1\347\2\0\3\347"+
    "\4\0\34\347\1\0\1\353\4\347\3\0\1\350\1\347"+
    "\3\0\1\347\2\0\1\347\2\354\4\0\34\347\1\0"+
    "\4\347\1\234\3\0\2\234\3\0\1\234\2\0\3\234"+
    "\4\0\34\234\1\0\4\234\1\235\1\237\1\0\1\237"+
    "\1\355\1\235\3\237\1\235\2\237\3\235\4\237\27\235"+
    "\1\356\4\235\1\237\4\235\1\0\1\236\62\0\2\237"+
    "\1\0\1\237\1\357\45\237\1\360\11\237\1\234\3\0"+
    "\2\234\3\0\1\234\2\0\1\234\2\361\4\0\34\234"+
    "\1\0\1\361\3\234\10\242\1\362\53\242\2\243\1\242"+
    "\1\243\1\363\3\243\1\364\41\243\1\365\11\243\1\245"+
    "\3\0\2\245\3\0\1\245\2\0\3\245\4\0\34\245"+
    "\1\0\4\245\1\246\1\237\1\0\1\237\1\245\1\246"+
    "\3\237\1\246\2\237\3\246\4\237\27\246\1\366\4\246"+
    "\1\237\4\246\17\0\1\367\44\0\1\245\3\0\2\245"+
    "\3\0\1\245\2\0\3\245\4\0\5\245\1\370\26\245"+
    "\1\0\4\245\1\234\3\0\2\234\3\0\1\234\2\0"+
    "\3\234\4\0\15\234\1\371\16\234\1\0\4\234\1\46"+
    "\3\0\2\46\3\0\1\46\2\0\3\46\4\0\10\46"+
    "\1\372\23\46\1\0\4\46\1\254\3\0\2\254\3\0"+
    "\1\254\2\0\3\254\4\0\34\254\1\0\4\254\1\255"+
    "\1\257\1\0\1\257\1\254\1\255\3\257\1\255\2\257"+
    "\3\255\4\257\27\255\1\373\4\255\1\257\4\255\1\0"+
    "\1\256\62\0\2\257\1\0\1\257\1\374\45\257\1\375"+
    "\11\257\1\254\3\0\2\254\3\0\1\254\2\0\1\254"+
    "\2\376\4\0\34\254\1\0\1\376\3\254\1\75\3\0"+
    "\2\75\3\0\1\75\2\0\3\75\4\0\6\75\1\262"+
    "\25\75\1\0\4\75\1\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\34\263\1\0\4\263\1\264\1\266"+
    "\1\0\1\266\1\377\1\264\3\266\1\264\2\266\3\264"+
    "\4\266\27\264\1\u0100\4\264\1\266\4\264\1\0\1\265"+
    "\62\0\2\266\1\0\1\266\1\u0101\45\266\1\u0102\11\266"+
    "\1\263\3\0\2\263\3\0\1\263\2\0\3\263\4\0"+
    "\22\263\1\u0103\10\263\1\u0103\1\0\2\263\1\u0103\2\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\5\263"+
    "\1\u0104\26\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\14\263\1\u0105\17\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\10\263"+
    "\1\u0106\23\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\22\263\1\u0107\10\263\1\u0107\1\0"+
    "\2\263\1\u0107\2\263\3\0\2\263\3\0\1\263\2\0"+
    "\3\263\4\0\4\263\1\u0108\27\263\1\0\5\263\3\0"+
    "\2\263\3\0\1\263\2\0\3\263\4\0\11\263\1\u0109"+
    "\22\263\1\0\1\263\1\u0109\3\263\3\0\2\263\3\0"+
    "\1\263\2\0\3\263\4\0\23\263\1\u010a\10\263\1\0"+
    "\5\263\3\0\2\263\3\0\1\263\2\0\3\263\4\0"+
    "\21\263\1\u010b\12\263\1\0\5\263\3\0\2\263\3\0"+
    "\1\263\2\0\3\263\4\0\23\263\1\u010c\10\263\1\0"+
    "\5\263\3\0\2\263\3\0\1\263\2\0\3\263\4\0"+
    "\11\263\1\u010d\22\263\1\0\1\263\1\u010d\2\263\1\303"+
    "\3\0\2\303\3\0\1\303\2\0\3\303\4\0\34\303"+
    "\1\0\4\303\1\304\1\306\1\0\1\306\1\u010e\1\304"+
    "\3\306\1\304\2\306\3\304\4\306\27\304\1\u010f\4\304"+
    "\1\306\4\304\1\0\1\305\62\0\2\306\1\0\1\306"+
    "\1\u0110\45\306\1\u0111\11\306\1\303\3\0\2\303\3\0"+
    "\1\303\2\0\3\303\4\0\6\303\1\310\25\303\1\0"+
    "\5\303\1\u0112\1\u0113\1\0\2\303\3\0\1\303\2\0"+
    "\3\303\4\0\34\303\1\0\4\303\1\0\1\311\62\0"+
    "\1\142\3\0\2\142\3\0\1\142\2\0\3\142\4\0"+
    "\24\142\1\u0114\7\142\1\0\5\142\3\0\2\142\3\0"+
    "\1\142\2\0\3\142\4\0\21\142\1\u0115\12\142\1\0"+
    "\5\142\3\0\2\142\3\0\1\142\2\0\3\142\4\0"+
    "\11\142\1\u0116\22\142\1\0\1\142\1\u0116\3\142\3\0"+
    "\2\142\3\0\1\142\2\0\3\142\4\0\20\142\1\u0114"+
    "\13\142\1\0\5\142\3\0\2\142\3\0\1\142\2\0"+
    "\3\142\4\0\21\142\1\u0114\12\142\1\0\5\142\3\0"+
    "\2\142\3\0\1\142\2\0\3\142\4\0\22\142\1\u0114"+
    "\10\142\1\u0114\1\0\2\142\1\u0114\2\142\3\0\2\142"+
    "\3\0\1\142\2\0\3\142\4\0\23\142\1\u0114\10\142"+
    "\1\0\4\142\1\322\1\237\1\0\1\237\1\u0117\1\322"+
    "\3\237\1\322\2\237\3\322\4\237\27\322\1\u0118\4\322"+
    "\1\237\4\322\1\0\1\323\62\0\1\324\1\326\1\0"+
    "\1\326\1\u0119\1\324\3\326\1\324\2\326\3\324\4\326"+
    "\27\324\1\u011a\4\324\1\326\4\324\1\0\1\325\62\0"+
    "\2\326\1\0\1\326\1\u011b\45\326\1\u011c\11\326\2\327"+
    "\1\242\1\327\1\u011d\3\327\1\u011e\41\327\1\u011f\11\327"+
    "\1\150\3\0\2\150\3\0\1\150\2\0\3\150\4\0"+
    "\24\150\1\u0120\7\150\1\0\5\150\3\0\2\150\3\0"+
    "\1\150\2\0\3\150\4\0\20\150\1\u0120\13\150\1\0"+
    "\5\150\3\0\2\150\3\0\1\150\2\0\3\150\4\0"+
    "\21\150\1\u0120\12\150\1\0\5\150\3\0\2\150\3\0"+
    "\1\150\2\0\3\150\4\0\22\150\1\u0120\10\150\1\u0120"+
    "\1\0\2\150\1\u0120\2\150\3\0\2\150\3\0\1\150"+
    "\2\0\3\150\4\0\23\150\1\u0120\10\150\1\0\4\150"+
    "\1\206\3\0\2\206\3\0\1\206\2\0\1\206\2\u0121"+
    "\4\0\34\206\1\0\4\206\1\341\3\0\2\341\3\0"+
    "\1\341\2\0\3\341\4\0\34\341\1\0\4\341\1\0"+
    "\1\342\7\0\2\343\1\0\1\343\4\0\1\344\63\0"+
    "\1\u0122\42\0\1\347\3\0\2\347\3\0\1\347\2\0"+
    "\3\347\4\0\34\347\1\0\4\347\1\350\1\352\1\0"+
    "\1\352\1\347\1\350\3\352\1\350\2\352\3\350\4\352"+
    "\27\350\1\u0123\4\350\1\352\4\350\1\0\1\351\62\0"+
    "\2\352\1\0\1\352\1\u0124\45\352\1\u0125\11\352\1\347"+
    "\3\0\2\347\3\0\1\347\2\0\1\347\2\u0126\4\0"+
    "\34\347\1\0\1\u0126\4\347\3\0\2\347\3\0\1\347"+
    "\2\0\1\347\2\354\4\0\34\347\1\0\4\347\1\235"+
    "\1\237\1\0\1\237\1\u0127\1\235\3\237\1\235\2\237"+
    "\3\235\4\237\27\235\1\356\4\235\1\237\4\235\2\237"+
    "\1\0\1\237\1\u0128\45\237\1\360\11\237\2\243\1\242"+
    "\1\243\1\u0129\3\243\1\364\41\243\1\365\11\243\1\246"+
    "\1\237\1\0\1\237\2\246\3\237\1\246\2\237\3\246"+
    "\4\237\27\246\1\366\4\246\1\237\4\246\1\245\3\0"+
    "\2\245\3\0\1\245\2\0\3\245\4\0\15\245\1\u012a"+
    "\16\245\1\0\4\245\1\46\3\0\2\46\3\0\1\46"+
    "\2\0\3\46\4\0\17\46\1\u012b\14\46\1\0\4\46"+
    "\1\255\1\257\1\0\1\257\2\255\3\257\1\255\2\257"+
    "\3\255\4\257\27\255\1\373\4\255\1\257\4\255\2\257"+
    "\1\0\1\257\1\u012c\45\257\1\375\11\257\1\264\1\266"+
    "\1\0\1\266\1\u012d\1\264\3\266\1\264\2\266\3\264"+
    "\4\266\27\264\1\u0100\4\264\1\266\4\264\2\266\1\0"+
    "\1\266\1\u012e\45\266\1\u0102\11\266\1\263\3\0\2\263"+
    "\3\0\1\263\2\0\3\263\4\0\17\263\1\u012f\14\263"+
    "\1\0\5\263\3\0\2\263\3\0\1\263\2\0\3\263"+
    "\4\0\1\263\1\u0130\26\263\1\u0130\3\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\14\263"+
    "\1\u0131\17\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\17\263\1\u0132\14\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\5\263"+
    "\1\u0133\26\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\14\263\1\u0134\17\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\23\263"+
    "\1\u0135\10\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\17\263\1\u0136\14\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\5\263"+
    "\1\u0137\26\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\14\263\1\u0138\17\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\6\263"+
    "\1\u0139\25\263\1\0\4\263\1\304\1\306\1\0\1\306"+
    "\1\u013a\1\304\3\306\1\304\2\306\3\304\4\306\27\304"+
    "\1\u010f\4\304\1\306\4\304\2\306\1\0\1\306\1\u013b"+
    "\45\306\1\u0111\11\306\1\0\1\u0112\1\u0113\63\0\1\u0113"+
    "\61\0\1\142\3\0\2\142\3\0\1\142\2\0\3\142"+
    "\4\0\17\142\1\u013c\14\142\1\0\5\142\3\0\2\142"+
    "\3\0\1\142\2\0\3\142\4\0\22\142\1\u013d\10\142"+
    "\1\u013d\1\0\2\142\1\u013d\1\142\1\322\1\237\1\0"+
    "\1\237\1\u013e\1\322\3\237\1\322\2\237\3\322\4\237"+
    "\27\322\1\u0118\4\322\1\237\4\322\1\324\1\326\1\0"+
    "\1\326\1\u013f\1\324\3\326\1\324\2\326\3\324\4\326"+
    "\27\324\1\u011a\4\324\1\326\4\324\2\326\1\0\1\326"+
    "\1\u0140\45\326\1\u011c\11\326\2\327\1\242\1\327\1\u0141"+
    "\3\327\1\u011e\41\327\1\u011f\11\327\1\350\1\352\1\0"+
    "\1\352\2\350\3\352\1\350\2\352\3\350\4\352\27\350"+
    "\1\u0123\4\350\1\352\4\350\2\352\1\0\1\352\1\u0142"+
    "\45\352\1\u0125\11\352\1\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\3\263\1\u0143\25\263\1\u0143\2\263"+
    "\1\0\5\263\3\0\2\263\3\0\1\263\2\0\3\263"+
    "\4\0\13\263\1\u0144\20\263\1\0\3\263\1\u0144\1\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\17\263"+
    "\1\u0145\14\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\17\263\1\u0146\14\263\1\0\5\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\23\263"+
    "\1\u0147\10\263\1\0\4\263\1\142\3\0\2\142\3\0"+
    "\1\142\2\0\3\142\4\0\21\142\1\u0148\12\142\1\0"+
    "\5\142\3\0\2\142\3\0\1\142\2\0\3\142\4\0"+
    "\23\142\1\u0149\10\142\1\0\4\142\1\263\3\0\2\263"+
    "\3\0\1\263\2\0\3\263\4\0\3\263\1\u014a\25\263"+
    "\1\u014a\2\263\1\0\5\263\3\0\2\263\3\0\1\263"+
    "\2\0\3\263\4\0\3\263\1\u014b\25\263\1\u014b\2\263"+
    "\1\0\4\263\1\142\3\0\2\142\3\0\1\142\2\0"+
    "\3\142\4\0\14\142\1\u014c\17\142\1\0\4\142\1\263"+
    "\3\0\2\263\3\0\1\263\2\0\3\263\4\0\1\263"+
    "\1\u014d\26\263\1\u014d\3\263\1\0\5\263\3\0\2\263"+
    "\3\0\1\263\2\0\3\263\4\0\1\263\1\u014e\26\263"+
    "\1\u014e\3\263\1\0\4\263\1\142\3\0\2\142\3\0"+
    "\1\142\2\0\3\142\4\0\5\142\1\u014f\26\142\1\0"+
    "\4\142\1\263\3\0\2\263\3\0\1\263\2\0\3\263"+
    "\4\0\14\263\1\u0150\17\263\1\0\5\263\3\0\2\263"+
    "\3\0\1\263\2\0\3\263\4\0\14\263\1\u0151\17\263"+
    "\1\0\4\263\1\142\3\0\2\142\3\0\1\142\2\0"+
    "\3\142\4\0\25\142\1\u0152\6\142\1\0\5\142\3\0"+
    "\2\142\3\0\1\142\2\0\3\142\4\0\5\142\1\u0153"+
    "\26\142\1\0\5\142\3\0\2\142\3\0\1\142\2\0"+
    "\3\142\4\0\14\142\1\u0154\17\142\1\0\4\142";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13676];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\3\1\1\0\7\1\1\11\6\1\1\11\6\1"+
    "\1\11\5\1\1\0\4\1\1\11\7\1\1\11\3\1"+
    "\1\0\20\1\1\0\41\1\1\0\26\1\1\11\7\1"+
    "\1\0\6\1\1\0\1\1\1\11\2\0\1\11\2\1"+
    "\1\0\3\1\1\11\3\1\1\0\6\1\1\0\17\1"+
    "\1\0\17\1\2\0\1\11\11\1\2\0\1\11\5\1"+
    "\1\0\4\1\1\11\1\0\4\1\1\0\1\1\1\11"+
    "\4\1\1\11\1\0\3\1\1\11\1\0\15\1\1\11"+
    "\2\0\10\1\1\11\1\0\2\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 80: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 81: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 82: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 83: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 84: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 85: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 86: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 87: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 88: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 89: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 91: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 92: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 93: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 95: break;
          case 17:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 96: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 97: break;
          case 19:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 20:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 99: break;
          case 21:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 100: break;
          case 22:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 101: break;
          case 23:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 102: break;
          case 24:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 103: break;
          case 25:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 104: break;
          case 26:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 105: break;
          case 27:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 106: break;
          case 28:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 107: break;
          case 29:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 108: break;
          case 30:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 109: break;
          case 31:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 110: break;
          case 32:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 33:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 34:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 113: break;
          case 35:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 114: break;
          case 36:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 115: break;
          case 37:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 116: break;
          case 38:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 117: break;
          case 39:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 118: break;
          case 40:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 119: break;
          case 41:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 42:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 121: break;
          case 43:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 122: break;
          case 44:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 123: break;
          case 45:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 124: break;
          case 46:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 125: break;
          case 47:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 126: break;
          case 48:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 127: break;
          case 49:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 128: break;
          case 50:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 129: break;
          case 51:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 130: break;
          case 52:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 131: break;
          case 53:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 132: break;
          case 54:
            { yybegin(SET); return BatchTypes.EXTENSION;
            }
          // fall through
          case 133: break;
          case 55:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 134: break;
          case 56:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 135: break;
          case 57:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 136: break;
          case 58:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 137: break;
          case 59:
            { yybegin(ASSOC_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 138: break;
          case 60:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 139: break;
          case 61:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 140: break;
          case 62:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 141: break;
          case 63:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 142: break;
          case 64:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 143: break;
          case 65:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 144: break;
          case 66:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 145: break;
          case 67:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 146: break;
          case 68:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 147: break;
          case 69:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 148: break;
          case 70:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 149: break;
          case 71:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 150: break;
          case 72:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 151: break;
          case 73:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 152: break;
          case 74:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 153: break;
          case 75:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 154: break;
          case 76:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 155: break;
          case 77:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 156: break;
          case 78:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 157: break;
          case 79:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
