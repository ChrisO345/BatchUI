// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int BREAK = 8;
  public static final int CALL = 10;
  public static final int CHDIR = 12;
  public static final int COMMAND = 14;
  public static final int DATE = 16;
  public static final int ECHO = 18;
  public static final int ECHO_STRING = 20;
  public static final int EXIT = 22;
  public static final int FOR = 24;
  public static final int FOR_COLLECTION = 26;
  public static final int GOTO = 28;
  public static final int IF = 30;
  public static final int IF_ERRORLEVEL = 32;
  public static final int IF_EXIST = 34;
  public static final int IF_STANDARD = 36;
  public static final int LABEL = 38;
  public static final int MORE = 40;
  public static final int REM = 42;
  public static final int SET = 44;
  public static final int SET_LOCAL = 46;
  public static final int SHIFT = 48;
  public static final int SET_VALUE = 50;
  public static final int TOKEN = 52;
  public static final int BAD_WHITESPACE = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13,  5,  5, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\11\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\41\1\56\2\41"+
    "\1\0\1\57\2\0\1\60\1\0\1\61\1\31\1\62"+
    "\1\63\1\34\1\64\1\36\1\37\1\40\1\41\1\42"+
    "\1\65\1\44\1\45\1\46\1\66\1\50\1\67\1\70"+
    "\1\53\1\54\1\55\1\41\1\56\2\41\1\0\1\71"+
    "\1\0\1\72\53\0\1\60\12\0\1\60\4\0\1\60"+
    "\5\0\27\60\1\0\37\60\1\0\70\60\2\73\115\60"+
    "\1\74\u0142\60\4\0\14\60\16\0\5\60\7\0\1\60"+
    "\1\0\1\60\21\0\165\60\1\0\2\60\2\0\4\60"+
    "\1\0\1\60\6\0\1\60\1\0\3\60\1\0\1\60"+
    "\1\0\24\60\1\0\123\60\1\0\213\60\1\0\255\60"+
    "\1\0\46\60\2\0\1\60\6\0\51\60\10\0\55\60"+
    "\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60"+
    "\10\0\33\60\4\0\4\60\35\0\13\60\5\0\100\60"+
    "\12\75\4\0\146\60\1\0\10\60\2\0\12\60\1\0"+
    "\6\60\12\75\3\60\2\0\1\60\20\0\73\60\2\0"+
    "\145\60\16\0\12\75\54\60\4\0\1\60\2\0\1\60"+
    "\2\0\56\60\22\0\34\60\4\0\13\60\65\0\25\60"+
    "\1\0\10\60\25\0\17\60\1\0\201\60\2\0\12\75"+
    "\1\0\23\60\1\0\10\60\2\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\1\60\3\0\4\60\2\0\11\60"+
    "\2\0\2\60\2\0\4\60\10\0\1\60\4\0\2\60"+
    "\1\0\5\60\2\0\12\75\2\60\12\0\1\60\1\0"+
    "\1\60\2\0\3\60\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0"+
    "\2\60\2\0\1\60\1\0\5\60\4\0\2\60\2\0"+
    "\3\60\3\0\1\60\7\0\4\60\1\0\1\60\7\0"+
    "\12\75\6\60\13\0\3\60\1\0\11\60\1\0\3\60"+
    "\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\12\60\1\0\3\60\1\0\3\60\2\0\1\60"+
    "\17\0\4\60\2\0\12\75\11\0\7\60\1\0\3\60"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\5\60\2\0\11\60\2\0\2\60"+
    "\2\0\3\60\10\0\2\60\4\0\2\60\1\0\5\60"+
    "\2\0\12\75\1\0\1\60\20\0\2\60\1\0\6\60"+
    "\3\0\3\60\1\0\4\60\3\0\2\60\1\0\1\60"+
    "\1\0\2\60\3\0\2\60\3\0\3\60\3\0\14\60"+
    "\4\0\5\60\3\0\3\60\1\0\4\60\2\0\1\60"+
    "\6\0\1\60\16\0\12\75\20\0\15\60\1\0\3\60"+
    "\1\0\27\60\1\0\20\60\3\0\10\60\1\0\3\60"+
    "\1\0\4\60\7\0\2\60\1\0\3\60\5\0\4\60"+
    "\2\0\12\75\20\0\4\60\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\11\60"+
    "\1\0\3\60\1\0\4\60\7\0\2\60\7\0\1\60"+
    "\1\0\4\60\2\0\12\75\1\0\2\60\15\0\4\60"+
    "\1\0\10\60\1\0\3\60\1\0\63\60\1\0\3\60"+
    "\1\0\5\60\5\0\4\60\7\0\5\60\2\0\12\75"+
    "\12\0\6\60\2\0\2\60\1\0\22\60\3\0\30\60"+
    "\1\0\11\60\1\0\1\60\2\0\7\60\3\0\1\60"+
    "\4\0\6\60\1\0\1\60\1\0\10\60\6\0\12\75"+
    "\2\0\2\60\15\0\72\60\5\0\17\60\1\0\12\75"+
    "\47\0\2\60\1\0\1\60\1\0\5\60\1\0\30\60"+
    "\1\0\1\60\1\0\27\60\2\0\5\60\1\0\1\60"+
    "\1\0\6\60\2\0\12\75\2\0\4\60\40\0\1\60"+
    "\27\0\2\60\6\0\12\75\13\0\1\60\1\0\1\60"+
    "\1\0\1\60\4\0\12\60\1\0\44\60\4\0\24\60"+
    "\1\0\22\60\1\0\44\60\11\0\1\60\71\0\100\60"+
    "\12\75\6\0\100\60\12\75\4\60\2\0\46\60\1\0"+
    "\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0"+
    "\51\60\1\0\4\60\2\0\41\60\1\0\4\60\2\0"+
    "\7\60\1\0\1\60\1\0\4\60\2\0\17\60\1\0"+
    "\71\60\1\0\4\60\2\0\103\60\2\0\3\60\40\0"+
    "\20\60\20\0\126\60\2\0\6\60\3\0\u016c\60\2\0"+
    "\21\60\1\0\32\60\5\0\113\60\3\0\13\60\7\0"+
    "\15\60\1\0\7\60\13\0\25\60\13\0\24\60\14\0"+
    "\15\60\1\0\3\60\1\0\2\60\14\0\124\60\3\0"+
    "\1\60\4\0\2\60\2\0\12\75\41\0\3\60\2\0"+
    "\12\75\6\0\131\60\7\0\53\60\5\0\106\60\12\0"+
    "\37\60\1\0\14\60\4\0\14\60\12\0\12\75\36\60"+
    "\2\0\5\60\13\0\54\60\4\0\32\60\6\0\12\75"+
    "\46\0\34\60\4\0\77\60\1\0\35\60\2\0\1\60"+
    "\12\75\6\0\12\75\15\0\1\60\10\0\17\60\101\0"+
    "\114\60\4\0\12\75\21\0\11\60\14\0\60\60\12\75"+
    "\72\60\14\0\70\60\10\0\12\75\3\0\3\60\12\75"+
    "\44\60\2\0\11\60\7\0\53\60\2\0\3\60\20\0"+
    "\3\60\1\0\47\60\5\0\372\60\1\0\33\60\2\0"+
    "\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0"+
    "\65\60\1\0\7\60\1\0\1\60\3\0\3\60\1\0"+
    "\7\60\3\0\4\60\2\0\6\60\4\0\15\60\5\0"+
    "\3\60\1\0\7\60\102\0\2\60\23\0\1\60\34\0"+
    "\1\60\15\0\1\60\20\0\15\60\63\0\41\60\21\0"+
    "\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0"+
    "\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\76\3\60\1\0\13\60\2\0\4\60\5\0\5\60"+
    "\4\0\1\60\21\0\51\60\u022d\0\64\60\26\0\57\60"+
    "\1\0\57\60\1\0\205\60\6\0\11\60\14\0\46\60"+
    "\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\30\60\11\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\40\60\57\0\1\60\325\0\3\60"+
    "\31\0\17\60\1\0\5\60\2\0\5\60\4\0\126\60"+
    "\2\0\2\60\2\0\3\60\1\0\132\60\1\0\4\60"+
    "\5\0\53\60\1\0\136\60\21\0\33\60\65\0\306\60"+
    "\112\0\360\60\20\0\215\60\103\0\56\60\2\0\15\60"+
    "\3\0\20\60\12\75\2\60\24\0\63\60\1\0\12\60"+
    "\1\0\163\60\45\0\11\60\2\0\147\60\2\0\65\60"+
    "\2\0\5\60\60\0\61\60\30\0\64\60\14\0\106\60"+
    "\12\0\12\75\6\0\30\60\3\0\1\60\1\0\3\60"+
    "\12\75\44\60\2\0\44\60\14\0\35\60\3\0\101\60"+
    "\16\0\1\60\12\75\6\0\20\60\12\75\5\60\1\0"+
    "\67\60\11\0\16\60\2\0\12\75\6\0\27\60\3\0"+
    "\111\60\30\0\3\60\2\0\20\60\2\0\5\60\12\0"+
    "\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0"+
    "\7\60\1\0\53\60\1\0\14\60\10\0\173\60\1\0"+
    "\2\60\2\0\12\75\6\0\244\60\14\0\27\60\4\0"+
    "\61\60\u0104\0\156\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\14\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0"+
    "\153\60\22\0\100\60\2\0\66\60\50\0\14\60\4\0"+
    "\20\60\20\0\20\60\3\0\2\60\30\0\3\60\40\0"+
    "\5\60\1\0\207\60\23\0\12\75\7\0\32\60\4\0"+
    "\1\60\1\0\32\60\13\0\131\60\3\0\6\60\2\0"+
    "\6\60\2\0\6\60\2\0\3\60\43\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0"+
    "\16\60\42\0\173\60\105\0\65\60\210\0\1\60\202\0"+
    "\35\60\3\0\61\60\17\0\1\60\37\0\40\60\15\0"+
    "\36\60\5\0\53\60\5\0\36\60\2\0\44\60\4\0"+
    "\10\60\1\0\5\60\52\0\236\60\2\0\12\75\6\0"+
    "\44\60\4\0\44\60\4\0\50\60\10\0\64\60\234\0"+
    "\67\60\11\0\26\60\12\0\10\60\230\0\6\60\2\0"+
    "\1\60\1\0\54\60\1\0\2\60\3\0\1\60\2\0"+
    "\27\60\12\0\27\60\11\0\37\60\101\0\23\60\1\0"+
    "\2\60\12\0\26\60\12\0\32\60\106\0\70\60\6\0"+
    "\2\60\100\0\4\60\1\0\2\60\5\0\10\60\1\0"+
    "\3\60\1\0\35\60\2\0\3\60\4\0\1\60\40\0"+
    "\35\60\3\0\35\60\43\0\10\60\1\0\36\60\31\0"+
    "\66\60\12\0\26\60\12\0\23\60\15\0\22\60\156\0"+
    "\111\60\67\0\63\60\15\0\63\60\15\0\50\60\10\0"+
    "\12\75\306\0\35\60\12\0\1\60\10\0\41\60\217\0"+
    "\27\60\11\0\107\60\37\0\12\75\17\0\74\60\25\0"+
    "\31\60\7\0\12\75\6\0\65\60\1\0\12\75\4\0"+
    "\3\60\11\0\44\60\2\0\1\60\11\0\105\60\4\0"+
    "\4\60\3\0\12\75\1\60\1\0\1\60\43\0\22\60"+
    "\1\0\45\60\6\0\1\60\101\0\7\60\1\0\1\60"+
    "\1\0\4\60\1\0\17\60\1\0\12\60\7\0\73\60"+
    "\5\0\12\75\6\0\4\60\1\0\10\60\2\0\2\60"+
    "\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\1\0\12\60\2\0\2\60\2\0\3\60\2\0\1\60"+
    "\6\0\1\60\5\0\7\60\2\0\7\60\3\0\5\60"+
    "\213\0\113\60\5\0\12\75\4\0\2\60\40\0\106\60"+
    "\1\0\1\60\10\0\12\75\246\0\66\60\2\0\11\60"+
    "\27\0\6\60\42\0\101\60\3\0\1\60\13\0\12\75"+
    "\46\0\71\60\7\0\12\75\66\0\33\60\2\0\17\60"+
    "\4\0\12\75\306\0\73\60\145\0\100\60\12\75\25\0"+
    "\1\60\240\0\10\60\2\0\56\60\2\0\10\60\1\0"+
    "\2\60\33\0\77\60\10\0\1\60\10\0\112\60\3\0"+
    "\1\60\42\0\71\60\7\0\11\60\1\0\55\60\1\0"+
    "\11\60\17\0\12\75\30\0\36\60\2\0\26\60\1\0"+
    "\16\60\111\0\7\60\1\0\2\60\1\0\54\60\3\0"+
    "\1\60\1\0\2\60\1\0\11\60\10\0\12\75\6\0"+
    "\6\60\1\0\2\60\1\0\45\60\1\0\2\60\1\0"+
    "\6\60\7\0\12\75\u0136\0\27\60\11\0\232\60\146\0"+
    "\157\60\21\0\304\60\274\0\57\60\321\0\107\60\271\0"+
    "\71\60\7\0\37\60\1\0\12\75\146\0\36\60\2\0"+
    "\5\60\13\0\67\60\11\0\4\60\14\0\12\75\11\0"+
    "\25\60\5\0\23\60\260\0\100\60\200\0\113\60\4\0"+
    "\71\60\7\0\21\60\100\0\2\60\1\0\1\60\34\0"+
    "\370\60\10\0\363\60\15\0\37\60\61\0\3\60\21\0"+
    "\4\60\10\0\u018c\60\4\0\153\60\5\0\15\60\3\0"+
    "\11\60\7\0\12\60\3\0\2\60\306\0\5\60\3\0"+
    "\6\60\10\0\10\60\2\0\7\60\36\0\4\60\224\0"+
    "\3\60\273\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0"+
    "\1\60\1\0\7\60\1\0\101\60\1\0\4\60\2\0"+
    "\10\60\1\0\7\60\1\0\34\60\1\0\4\60\1\0"+
    "\5\60\1\0\1\60\3\0\7\60\1\0\u0154\60\2\0"+
    "\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\10\60\2\0\62\75\67\60"+
    "\4\0\62\60\10\0\1\60\16\0\1\60\26\0\5\60"+
    "\1\0\17\60\120\0\7\60\1\0\21\60\2\0\7\60"+
    "\1\0\2\60\1\0\5\60\325\0\55\60\3\0\16\60"+
    "\2\0\12\75\4\0\1\60\u0171\0\60\60\12\75\6\0"+
    "\305\60\13\0\7\60\51\0\114\60\4\0\12\75\246\0"+
    "\4\60\1\0\33\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\12\60\1\0\4\60\1\0\1\60\1\0"+
    "\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\2\60\1\0\1\60\2\0\4\60\1\0"+
    "\7\60\1\0\4\60\1\0\4\60\1\0\1\60\1\0"+
    "\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\164\0\32\60\6\0\32\60\6\0\32\60\166\0"+
    "\327\60\51\0\65\60\13\0\336\60\2\0\u0182\60\16\0"+
    "\u0131\60\37\0\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\33\0\1\1\2\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\3\1\1\3\1\10"+
    "\1\11\12\10\1\12\1\13\2\14\1\15\2\14\1\16"+
    "\1\17\3\16\1\20\1\4\1\21\1\4\1\22\1\23"+
    "\1\6\1\24\1\25\4\24\1\26\14\10\1\27\2\4"+
    "\1\30\1\31\3\30\1\32\1\33\1\4\1\34\1\35"+
    "\1\36\3\35\1\4\7\35\1\37\2\40\3\37\1\41"+
    "\1\42\1\43\7\42\1\14\1\44\1\20\1\45\3\20"+
    "\1\46\1\47\2\46\1\50\2\46\1\51\1\4\4\46"+
    "\1\52\1\53\1\54\1\4\2\53\1\55\1\4\1\56"+
    "\3\4\1\57\1\60\1\61\1\62\1\4\1\63\1\64"+
    "\3\63\1\65\1\66\2\67\2\66\4\67\1\70\1\0"+
    "\1\71\1\1\1\72\1\1\1\3\1\0\1\1\1\0"+
    "\1\73\1\74\1\0\1\74\1\75\1\1\3\10\1\76"+
    "\10\10\1\77\1\100\4\10\1\14\1\0\1\16\1\101"+
    "\1\16\1\0\1\16\1\4\1\102\1\0\1\103\1\24"+
    "\1\0\1\24\1\104\1\0\1\105\1\10\1\0\4\10"+
    "\1\106\10\10\1\107\1\110\4\10\1\111\2\4\1\0"+
    "\1\112\1\30\1\0\3\30\1\113\1\0\1\114\2\35"+
    "\1\0\1\35\1\0\1\115\1\116\1\35\1\117\1\35"+
    "\1\120\3\35\1\0\1\121\1\37\1\122\1\37\1\0"+
    "\1\37\1\0\1\123\1\42\1\0\11\42\1\71\2\46"+
    "\1\123\2\46\1\124\5\46\1\125\1\53\1\125\1\126"+
    "\1\127\1\0\2\130\1\4\1\131\1\132\1\0\1\133"+
    "\1\63\1\134\1\63\1\0\1\63\3\66\1\67\1\71"+
    "\1\0\1\71\1\0\1\71\1\135\1\136\1\74\1\73"+
    "\11\10\1\137\3\10\1\140\1\10\1\16\2\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\105\1\0\1\105\1\0"+
    "\1\105\11\10\1\141\3\10\1\142\1\10\1\4\1\112"+
    "\1\0\1\112\1\0\1\112\1\0\1\143\1\144\1\114"+
    "\1\0\1\114\1\145\1\0\1\114\5\35\1\121\1\0"+
    "\1\121\1\0\1\121\1\123\1\0\1\123\1\0\1\123"+
    "\1\42\1\146\2\42\2\71\2\123\1\124\1\125\1\147"+
    "\3\150\1\133\1\0\1\133\1\0\1\133\1\151\1\152"+
    "\2\71\1\136\2\10\1\153\1\10\1\154\1\155\1\156"+
    "\1\10\1\157\1\160\1\10\1\161\2\10\2\16\2\103"+
    "\2\105\2\10\1\162\1\10\1\163\1\164\1\165\1\10"+
    "\1\166\1\167\1\10\1\170\2\10\2\4\2\112\2\114"+
    "\1\35\1\0\3\35\2\121\2\123\3\42\2\133\1\171"+
    "\1\172\2\10\1\173\1\174\1\175\2\10\1\176\1\4"+
    "\1\35\1\177\1\0\2\35\2\42\1\200\4\10\1\34"+
    "\1\35\1\177\2\35\2\42\4\10\1\34\1\177\1\0"+
    "\1\35\1\42\1\201\1\202\1\203\1\204\1\34\2\177"+
    "\1\42\1\0\1\42\1\177\1\205";

  private static int [] zzUnpackAction() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\u089d\0\u089d\0\u08dc\0\u091b\0\u089d"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u089d\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u089d\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u089d\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u089d\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u06a5\0\u2d48"+
    "\0\u06a5\0\u2d87\0\u089d\0\u2dc6\0\u2e05\0\u2e44\0\u089d\0\u2e83"+
    "\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u0a95"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234"+
    "\0\u0a95\0\u0a95\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u089d\0\u336f"+
    "\0\u33ae\0\u0f03\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u103e\0\u34e9"+
    "\0\u1179\0\u3528\0\u3567\0\u35a6\0\u1179\0\u35e5\0\u0a95\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u0a95\0\u379e\0\u37dd"+
    "\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u0a95\0\u0a95"+
    "\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u103e\0\u3a92\0\u3ad1\0\u3b10"+
    "\0\u16e3\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u103e\0\u3c8a"+
    "\0\u191a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u1a55\0\u1a55\0\u191a"+
    "\0\u3dc5\0\u191a\0\u3e04\0\u191a\0\u3e43\0\u3e82\0\u3ec1\0\u3f00"+
    "\0\u1c4d\0\u3f3f\0\u1c4d\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u1dc7"+
    "\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u21b7\0\u432f\0\u436e\0\u21b7\0\u43ad"+
    "\0\u43ec\0\u089d\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u25a7"+
    "\0\u4566\0\u2529\0\u45a5\0\u089d\0\u45e4\0\u089d\0\u27de\0\u4623"+
    "\0\u089d\0\u103e\0\u4662\0\u2919\0\u46a1\0\u2919\0\u46e0\0\u471f"+
    "\0\u475e\0\u479d\0\u47dc\0\u481b\0\u089d\0\u089d\0\u485a\0\u0762"+
    "\0\u4899\0\u081f\0\u2e44\0\u089d\0\u48d8\0\u09d8\0\u4917\0\u4956"+
    "\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u0a95"+
    "\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u089d\0\u4c89\0\u4cc8"+
    "\0\u089d\0\u4d07\0\u11f7\0\u4d46\0\u1236\0\u089d\0\u4d85\0\u1332"+
    "\0\u4dc4\0\u1371\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e"+
    "\0\u4f7d\0\u4fbc\0\u4ffb\0\u0a95\0\u503a\0\u5079\0\u50b8\0\u50f7"+
    "\0\u5136\0\u5175\0\u089d\0\u51b4\0\u1761\0\u51f3\0\u17a0\0\u5232"+
    "\0\u5271\0\u089d\0\u089d\0\u52b0\0\u1998\0\u191a\0\u52ef\0\u1a16"+
    "\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u089d\0\u5469\0\u1d0a"+
    "\0\u54a8\0\u1d88\0\u089d\0\u54e7\0\u1e45\0\u5526\0\u1e84\0\u5565"+
    "\0\u1dc7\0\u55a4\0\u55e3\0\u2235\0\u2274\0\u22f2\0\u2331\0\u21b7"+
    "\0\u4566\0\u089d\0\u26a3\0\u5622\0\u089d\0\u089d\0\u5661\0\u2997"+
    "\0\u56a0\0\u2a15\0\u2a93\0\u2a93\0\u2d09\0\u2dc6\0\u2e83\0\u56df"+
    "\0\u571e\0\u0a95\0\u575d\0\u0a95\0\u0a95\0\u0a95\0\u579c\0\u0a95"+
    "\0\u0a95\0\u57db\0\u0a95\0\u581a\0\u5859\0\u336f\0\u342c\0\u34e9"+
    "\0\u3567\0\u35e5\0\u3663\0\u5898\0\u58d7\0\u0a95\0\u5916\0\u0a95"+
    "\0\u0a95\0\u0a95\0\u5955\0\u0a95\0\u0a95\0\u5994\0\u0a95\0\u59d3"+
    "\0\u5a12\0\u5a51\0\u5a90\0\u3b10\0\u3b8e\0\u3c8a\0\u3d47\0\u5acf"+
    "\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u3f00\0\u3fbd\0\u403b\0\u40b9"+
    "\0\u5c0a\0\u5c49\0\u5c88\0\u4662\0\u471f\0\u0a95\0\u0a95\0\u5cc7"+
    "\0\u5d06\0\u0a95\0\u0a95\0\u0a95\0\u5d45\0\u5d84\0\u0a95\0\u5dc3"+
    "\0\u5e02\0\u089d\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u1dc7"+
    "\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\u60b7\0\u5e41\0\u60f6"+
    "\0\u6135\0\u6174\0\u61b3\0\u61f2\0\u6231\0\u6270\0\u62af\0\u62ee"+
    "\0\u632d\0\u636c\0\u63ab\0\u63ea\0\u0a95\0\u0a95\0\u0a95\0\u0a95"+
    "\0\u103e\0\u6429\0\u191a\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u1dc7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\34\1\35\1\36\1\0\1\34\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\34\2\45\4\34\1\46\1\45"+
    "\1\47\1\50\1\51\1\52\21\53\1\54\5\53\2\34"+
    "\6\53\1\54\1\53\1\55\5\34\1\56\1\57\2\0"+
    "\3\56\1\45\1\56\2\45\1\56\2\45\4\56\5\45"+
    "\1\56\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\56\1\67\3\56\1\70\5\56\1\71\6\56\1\60"+
    "\1\62\1\63\1\65\3\56\1\71\1\45\1\56\1\67"+
    "\1\71\2\56\1\72\1\73\1\36\1\0\3\72\1\74"+
    "\1\72\2\45\1\72\2\45\4\72\2\45\1\75\1\76"+
    "\1\77\42\72\1\100\5\72\1\101\1\102\1\36\1\0"+
    "\1\101\1\103\1\104\1\74\1\105\2\45\1\101\2\45"+
    "\4\101\2\45\1\75\1\106\1\77\42\101\1\100\5\101"+
    "\1\107\1\110\1\36\1\0\3\107\1\74\1\107\2\45"+
    "\1\107\2\45\4\107\2\45\1\75\1\45\1\77\17\107"+
    "\1\111\22\107\1\100\5\107\1\112\1\113\1\36\1\0"+
    "\3\112\1\45\1\112\2\45\1\112\2\45\4\112\1\114"+
    "\4\45\42\112\1\45\5\112\1\115\1\116\1\36\1\0"+
    "\1\115\1\117\1\115\1\74\1\120\2\45\1\115\2\45"+
    "\1\115\1\121\2\115\2\45\1\75\1\45\1\77\1\115"+
    "\27\122\2\115\10\122\1\100\5\115\1\56\1\123\1\36"+
    "\1\0\1\56\1\124\1\56\1\74\1\125\2\45\1\56"+
    "\2\45\4\56\2\45\1\75\1\45\1\77\1\56\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\1\56\1\135"+
    "\3\56\1\136\5\56\1\137\6\56\1\126\1\130\1\131"+
    "\1\133\3\56\1\137\1\100\1\56\1\135\1\137\2\56"+
    "\1\107\1\140\1\36\1\0\3\107\1\74\1\107\2\45"+
    "\1\107\2\45\1\107\1\141\2\142\2\45\1\75\1\45"+
    "\1\77\42\107\1\100\5\107\1\143\1\144\1\36\1\0"+
    "\1\143\1\145\1\143\1\74\1\146\2\45\1\143\2\45"+
    "\4\143\2\45\1\75\1\45\1\77\17\143\1\147\22\143"+
    "\1\100\6\143\1\150\1\36\1\0\1\143\1\145\1\143"+
    "\1\74\1\146\2\45\1\143\2\45\4\143\2\45\1\75"+
    "\1\45\1\77\42\143\1\100\5\143\1\107\1\151\1\36"+
    "\1\0\3\107\1\74\1\107\2\45\1\107\2\45\1\107"+
    "\1\152\2\153\2\45\1\75\1\45\1\77\42\107\1\100"+
    "\5\107\1\154\1\155\1\36\1\0\1\154\1\156\1\157"+
    "\1\74\1\160\1\161\1\45\1\154\2\45\1\154\1\162"+
    "\2\154\2\45\1\75\1\45\1\77\4\154\1\163\1\164"+
    "\3\154\1\165\11\154\1\166\1\167\1\170\6\154\1\163"+
    "\4\154\1\166\1\100\1\154\1\165\1\166\2\154\1\171"+
    "\1\172\1\173\1\0\1\171\1\174\1\175\1\45\1\176"+
    "\1\45\1\177\1\171\2\45\4\171\5\45\42\171\1\45"+
    "\5\171\1\200\1\201\1\36\1\0\1\200\1\202\1\200"+
    "\1\45\1\203\2\45\1\200\2\45\4\200\5\45\4\200"+
    "\1\204\1\205\1\200\1\206\4\200\1\207\1\200\1\210"+
    "\15\200\1\204\1\200\1\207\3\200\1\45\5\200\1\211"+
    "\1\212\1\36\1\0\3\211\1\213\1\211\1\43\1\45"+
    "\1\211\2\45\2\211\2\214\2\45\1\215\1\45\1\216"+
    "\42\211\1\217\5\211\1\220\1\221\1\36\1\0\1\220"+
    "\1\222\1\220\1\213\1\223\1\43\1\45\1\220\2\45"+
    "\4\220\2\45\1\215\1\45\1\216\42\220\1\217\6\220"+
    "\1\224\1\36\1\0\1\220\1\225\1\220\1\213\1\226"+
    "\1\43\1\45\1\220\2\45\2\220\2\227\2\45\1\215"+
    "\1\230\1\216\5\220\1\231\1\220\1\232\4\220\1\233"+
    "\1\220\1\234\17\220\1\233\3\220\1\217\5\220\1\112"+
    "\1\235\1\36\1\0\3\112\1\45\1\112\2\45\1\112"+
    "\2\45\4\112\5\45\42\112\1\45\5\112\1\236\1\237"+
    "\1\36\1\0\3\236\1\74\1\236\2\45\1\236\1\240"+
    "\1\45\1\236\1\241\2\236\2\45\1\75\1\45\1\77"+
    "\1\236\27\242\2\236\10\242\1\100\5\236\2\243\1\36"+
    "\74\243\1\244\1\245\1\36\1\0\3\244\1\45\1\244"+
    "\2\45\1\246\1\247\1\45\1\246\1\250\2\244\3\45"+
    "\1\251\1\45\42\244\1\45\5\244\1\252\1\253\1\36"+
    "\1\0\3\252\1\74\1\252\2\45\1\252\2\45\4\252"+
    "\2\45\1\75\1\45\1\77\42\252\1\100\5\252\1\107"+
    "\1\254\1\36\1\0\3\107\1\74\1\107\2\45\1\107"+
    "\2\45\1\107\1\255\2\107\2\45\1\75\1\45\1\77"+
    "\42\107\1\100\5\107\1\256\1\257\1\36\1\0\1\256"+
    "\1\260\1\261\1\74\1\262\2\45\1\256\2\45\2\256"+
    "\2\263\2\45\1\75\1\106\1\77\42\256\1\100\5\256"+
    "\1\264\1\265\1\266\1\0\1\267\1\264\1\270\1\271"+
    "\1\264\2\45\1\264\2\45\4\264\2\45\1\272\1\45"+
    "\1\273\42\264\1\274\5\264\1\107\1\275\2\0\3\107"+
    "\1\45\1\107\2\45\1\107\2\45\4\107\5\45\42\107"+
    "\1\45\5\107\1\34\3\0\3\34\1\0\1\34\2\0"+
    "\1\34\2\0\4\34\5\0\42\34\1\0\5\34\1\0"+
    "\1\35\77\0\1\36\74\0\1\37\1\276\1\0\1\276"+
    "\1\37\1\277\1\37\1\276\1\37\2\276\1\37\2\276"+
    "\4\37\5\276\30\37\1\300\11\37\1\276\5\37\1\34"+
    "\3\0\3\34\1\0\1\34\2\0\1\34\2\0\2\34"+
    "\2\301\5\0\42\34\1\0\1\302\4\34\7\0\1\303"+
    "\67\0\1\42\1\304\1\0\1\304\3\42\1\304\1\277"+
    "\2\304\1\42\2\304\4\42\5\304\30\42\1\305\11\42"+
    "\1\304\5\42\77\306\121\0\1\307\100\0\1\303\100\0"+
    "\1\303\50\0\1\310\3\0\3\310\1\0\1\310\2\0"+
    "\1\310\2\0\4\310\1\311\4\0\22\310\1\312\15\310"+
    "\1\312\1\310\1\0\5\310\1\34\3\0\3\34\1\0"+
    "\1\34\2\0\1\34\2\0\4\34\1\313\4\0\1\34"+
    "\27\53\2\34\10\53\1\0\6\34\3\0\3\34\1\0"+
    "\1\34\2\0\1\34\2\0\4\34\1\313\4\0\1\34"+
    "\4\53\1\314\22\53\2\34\10\53\1\0\5\34\71\0"+
    "\1\303\5\0\1\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\42\56\1\0\5\56\1\0"+
    "\1\57\75\0\1\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\23\56\1\315\15\56\1\315"+
    "\1\0\2\56\1\315\3\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\22\56\1\316\15\56"+
    "\1\316\1\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\1\56\1\317\2\56"+
    "\1\320\3\56\1\321\21\56\1\317\1\56\1\320\5\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\1\56\1\322\30\56\1\322\7\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\3\56\1\323\10\56\1\324\1\56"+
    "\1\325\10\56\1\326\3\56\1\323\2\56\1\324\3\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\17\56\1\327\22\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\17\56\1\330\22\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\6\56"+
    "\1\331\26\56\1\331\4\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\4\56"+
    "\1\332\6\56\1\333\3\56\1\334\14\56\1\332\5\56"+
    "\1\0\4\56\1\333\1\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\5\56\1\335\2\56"+
    "\1\336\31\56\1\0\5\56\1\72\3\0\3\72\1\0"+
    "\1\72\2\0\1\72\2\0\4\72\5\0\42\72\1\0"+
    "\5\72\1\0\1\73\104\0\1\337\113\0\1\337\100\0"+
    "\1\337\141\0\1\337\5\0\1\101\3\0\3\101\1\0"+
    "\1\101\2\0\1\101\2\0\4\101\5\0\42\101\1\0"+
    "\5\101\1\0\1\102\75\0\1\103\1\340\1\0\1\340"+
    "\1\103\1\101\1\103\1\340\1\103\2\340\1\103\2\340"+
    "\4\103\5\340\30\103\1\341\11\103\1\340\5\103\1\101"+
    "\3\0\3\101\1\0\1\101\2\0\1\101\2\0\2\101"+
    "\2\342\5\0\42\101\1\0\1\343\4\101\1\105\1\344"+
    "\1\0\1\344\3\105\1\344\1\101\2\344\1\105\2\344"+
    "\4\105\5\344\30\105\1\345\11\105\1\344\5\105\1\107"+
    "\3\0\3\107\1\0\1\107\2\0\1\107\2\0\4\107"+
    "\5\0\42\107\1\0\5\107\1\0\1\110\75\0\1\107"+
    "\3\0\3\107\1\0\1\107\2\0\1\107\2\0\4\107"+
    "\5\0\6\107\1\346\7\107\1\347\16\107\1\346\4\107"+
    "\1\0\5\107\1\112\3\0\3\112\1\0\1\112\2\0"+
    "\1\112\2\0\4\112\5\0\42\112\1\0\5\112\1\0"+
    "\1\113\75\0\1\115\3\0\3\115\1\0\1\115\2\0"+
    "\1\115\2\0\4\115\5\0\42\115\1\0\5\115\1\0"+
    "\1\116\75\0\1\117\1\350\1\0\1\350\1\117\1\351"+
    "\1\117\1\350\1\117\2\350\1\117\2\350\4\117\5\350"+
    "\30\117\1\352\11\117\1\350\5\117\1\120\1\353\1\0"+
    "\1\353\3\120\1\353\1\351\2\353\1\120\2\353\4\120"+
    "\5\353\30\120\1\354\11\120\1\353\5\120\1\115\3\0"+
    "\3\115\1\0\1\115\2\0\1\115\2\0\4\115\5\0"+
    "\34\115\1\355\5\115\1\0\6\115\3\0\3\115\1\0"+
    "\1\115\2\0\1\115\2\0\4\115\1\313\4\0\1\115"+
    "\27\122\2\115\10\122\1\0\5\115\1\0\1\123\75\0"+
    "\1\124\1\356\1\0\1\356\1\124\1\357\1\124\1\356"+
    "\1\124\2\356\1\124\2\356\4\124\5\356\30\124\1\360"+
    "\11\124\1\356\5\124\1\125\1\361\1\0\1\361\3\125"+
    "\1\361\1\357\2\361\1\125\2\361\4\125\5\361\30\125"+
    "\1\362\11\125\1\361\5\125\1\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\23\56\1\363"+
    "\15\56\1\363\1\0\2\56\1\363\3\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\22\56"+
    "\1\364\15\56\1\364\1\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\1\56"+
    "\1\365\2\56\1\366\3\56\1\367\21\56\1\365\1\56"+
    "\1\366\5\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\1\56\1\370\30\56"+
    "\1\370\7\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\3\56\1\371\10\56"+
    "\1\372\1\56\1\373\10\56\1\374\3\56\1\371\2\56"+
    "\1\372\3\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\17\56\1\375\22\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\17\56\1\376\22\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\6\56\1\377\26\56\1\377\4\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\4\56\1\u0100\6\56\1\u0101\3\56\1\u0102\14\56"+
    "\1\u0100\5\56\1\0\4\56\1\u0101\1\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\5\56"+
    "\1\u0103\2\56\1\u0104\31\56\1\0\5\56\1\0\1\140"+
    "\75\0\1\107\3\0\3\107\1\0\1\107\2\0\1\107"+
    "\2\0\4\107\5\0\24\107\1\u0105\15\107\1\0\6\107"+
    "\3\0\3\107\1\0\1\107\2\0\1\107\2\0\2\u0106"+
    "\2\u0107\5\0\42\107\1\0\5\107\1\143\3\0\3\143"+
    "\1\0\1\143\2\0\1\143\2\0\4\143\5\0\42\143"+
    "\1\0\5\143\1\0\1\144\75\0\1\145\1\u0108\1\0"+
    "\1\u0108\1\145\1\u0109\1\145\1\u0108\1\145\2\u0108\1\145"+
    "\2\u0108\4\145\5\u0108\30\145\1\u010a\11\145\1\u0108\5\145"+
    "\1\146\1\u010b\1\0\1\u010b\3\146\1\u010b\1\u0109\2\u010b"+
    "\1\146\2\u010b\4\146\5\u010b\30\146\1\u010c\11\146\1\u010b"+
    "\5\146\1\143\3\0\3\143\1\0\1\143\2\0\1\143"+
    "\2\0\4\143\5\0\6\143\1\u010d\7\143\1\u010e\16\143"+
    "\1\u010d\4\143\1\0\5\143\1\0\1\150\76\0\1\151"+
    "\75\0\1\107\3\0\3\107\1\0\1\107\2\0\1\107"+
    "\2\0\4\107\5\0\2\107\1\u010f\37\107\1\0\6\107"+
    "\3\0\3\107\1\0\1\107\2\0\1\107\2\0\2\107"+
    "\2\153\5\0\42\107\1\0\5\107\1\154\3\0\3\154"+
    "\1\0\1\154\2\0\1\154\2\0\4\154\5\0\42\154"+
    "\1\0\5\154\1\0\1\155\75\0\1\156\1\u0110\1\0"+
    "\1\u0110\1\156\1\u0111\1\156\1\u0110\1\156\2\u0110\1\156"+
    "\2\u0110\4\156\5\u0110\30\156\1\u0112\11\156\1\u0110\5\156"+
    "\1\154\3\0\2\154\1\u0113\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\42\154\1\0\5\154\1\160\1\u0114"+
    "\1\0\1\u0114\3\160\1\u0114\1\u0111\2\u0114\1\160\2\u0114"+
    "\4\160\5\u0114\30\160\1\u0115\11\160\1\u0114\5\160\12\u0116"+
    "\1\u0117\64\u0116\1\154\3\0\3\154\1\0\1\154\2\0"+
    "\1\154\2\0\4\154\5\0\34\154\3\u0118\1\154\1\u0118"+
    "\1\154\1\0\6\154\3\0\3\154\1\0\1\154\2\0"+
    "\1\154\2\0\4\154\5\0\5\154\1\u0119\11\154\1\u011a"+
    "\22\154\1\0\6\154\3\0\3\154\1\0\1\154\2\0"+
    "\1\154\2\0\4\154\5\0\17\154\1\u011b\22\154\1\0"+
    "\6\154\3\0\3\154\1\0\1\154\2\0\1\154\2\0"+
    "\4\154\5\0\16\154\1\u011c\23\154\1\0\6\154\3\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\4\154\5\0"+
    "\13\154\1\u011d\26\154\1\0\4\154\1\u011d\1\154\3\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\4\154\5\0"+
    "\17\154\1\u011e\22\154\1\0\6\154\3\0\3\154\1\0"+
    "\1\154\2\0\1\154\2\0\4\154\5\0\23\154\1\u011f"+
    "\15\154\1\u011f\1\0\2\154\1\u011f\2\154\1\171\3\0"+
    "\3\171\1\0\1\171\2\0\1\171\2\0\4\171\5\0"+
    "\42\171\1\0\5\171\1\0\1\172\77\0\1\173\74\0"+
    "\1\174\1\u0120\1\0\1\u0120\1\174\1\u0121\1\174\1\u0120"+
    "\1\174\2\u0120\1\174\2\u0120\4\174\5\u0120\30\174\1\u0122"+
    "\11\174\1\u0120\5\174\1\171\3\0\3\171\1\0\1\171"+
    "\2\0\1\171\2\0\2\171\2\u0123\5\0\42\171\1\0"+
    "\1\u0124\4\171\1\176\1\u0125\1\0\1\u0125\3\176\1\u0125"+
    "\1\u0121\2\u0125\1\176\2\u0125\4\176\5\u0125\30\176\1\u0126"+
    "\11\176\1\u0125\5\176\1\200\3\0\3\200\1\0\1\200"+
    "\2\0\1\200\2\0\4\200\5\0\42\200\1\0\5\200"+
    "\1\0\1\201\75\0\1\202\1\u0127\1\0\1\u0127\1\202"+
    "\1\u0128\1\202\1\u0127\1\202\2\u0127\1\202\2\u0127\4\202"+
    "\5\u0127\30\202\1\u0129\11\202\1\u0127\5\202\1\203\1\u012a"+
    "\1\0\1\u012a\3\203\1\u012a\1\u0128\2\u012a\1\203\2\u012a"+
    "\4\203\5\u012a\30\203\1\u012b\11\203\1\u012a\5\203\1\200"+
    "\3\0\3\200\1\0\1\200\2\0\1\200\2\0\4\200"+
    "\5\0\5\200\1\u012c\34\200\1\0\6\200\3\0\3\200"+
    "\1\0\1\200\2\0\1\200\2\0\4\200\5\0\21\200"+
    "\1\u012d\1\u012e\4\200\1\u012f\10\200\1\u012e\1\200\1\0"+
    "\6\200\3\0\3\200\1\0\1\200\2\0\1\200\2\0"+
    "\4\200\5\0\5\200\1\u0130\16\200\1\u0131\15\200\1\0"+
    "\6\200\3\0\3\200\1\0\1\200\2\0\1\200\2\0"+
    "\4\200\5\0\5\200\1\u0130\15\200\1\u0132\15\200\1\u0132"+
    "\1\0\2\200\1\u0132\3\200\3\0\3\200\1\0\1\200"+
    "\2\0\1\200\2\0\4\200\5\0\5\200\1\u0130\11\200"+
    "\1\u0133\22\200\1\0\5\200\1\211\3\0\3\211\1\0"+
    "\1\211\2\0\1\211\2\0\4\211\5\0\42\211\1\0"+
    "\5\211\1\0\1\212\104\0\1\106\67\0\1\211\3\0"+
    "\3\211\1\0\1\211\2\0\1\211\2\0\2\211\2\214"+
    "\5\0\42\211\1\0\5\211\24\0\1\106\100\0\1\106"+
    "\141\0\1\106\5\0\1\220\3\0\3\220\1\0\1\220"+
    "\2\0\1\220\2\0\4\220\5\0\42\220\1\0\5\220"+
    "\1\0\1\221\75\0\1\222\1\276\1\0\1\276\1\222"+
    "\1\u0134\1\222\1\276\1\222\2\276\1\222\2\276\4\222"+
    "\5\276\30\222\1\u0135\11\222\1\276\5\222\1\223\1\304"+
    "\1\0\1\304\3\223\1\304\1\u0134\2\304\1\223\2\304"+
    "\4\223\5\304\30\223\1\u0136\11\223\1\304\5\223\1\0"+
    "\1\224\75\0\1\225\1\u0127\1\0\1\u0127\1\225\1\u0137"+
    "\1\225\1\u0127\1\225\2\u0127\1\225\2\u0127\4\225\5\u0127"+
    "\30\225\1\u0138\11\225\1\u0127\5\225\1\226\1\u012a\1\0"+
    "\1\u012a\3\226\1\u012a\1\u0137\2\u012a\1\226\2\u012a\4\226"+
    "\5\u012a\30\226\1\u0139\11\226\1\u012a\5\226\1\220\3\0"+
    "\3\220\1\0\1\220\2\0\1\220\2\0\2\220\2\227"+
    "\5\0\42\220\1\0\5\220\25\0\1\u013a\51\0\1\220"+
    "\3\0\3\220\1\0\1\220\2\0\1\220\2\0\4\220"+
    "\5\0\21\220\1\u013b\20\220\1\0\6\220\3\0\3\220"+
    "\1\0\1\220\2\0\1\220\2\0\4\220\5\0\5\220"+
    "\1\u013c\16\220\1\u013d\15\220\1\0\6\220\3\0\3\220"+
    "\1\0\1\220\2\0\1\220\2\0\4\220\5\0\5\220"+
    "\1\u013c\15\220\1\u013e\15\220\1\u013e\1\0\2\220\1\u013e"+
    "\3\220\3\0\3\220\1\0\1\220\2\0\1\220\2\0"+
    "\4\220\5\0\5\220\1\u013c\11\220\1\u013f\22\220\1\0"+
    "\5\220\1\0\1\235\75\0\1\236\3\0\3\236\1\0"+
    "\1\236\2\0\1\236\2\0\4\236\5\0\42\236\1\0"+
    "\5\236\1\0\1\237\115\0\2\u0140\55\0\1\236\3\0"+
    "\3\236\1\0\1\236\2\0\1\236\2\0\4\236\5\0"+
    "\24\236\1\u0141\6\236\1\u0142\3\236\1\u0142\1\236\1\u0142"+
    "\1\0\6\236\3\0\3\236\1\0\1\236\2\0\1\236"+
    "\2\0\4\236\1\u0143\4\0\1\236\27\242\2\236\10\242"+
    "\1\0\5\236\2\243\1\0\74\243\1\244\1\u0144\2\0"+
    "\3\244\1\0\1\244\2\0\1\244\1\u0145\1\0\4\244"+
    "\3\0\1\u0146\1\0\42\244\1\0\5\244\1\0\1\245"+
    "\75\0\1\244\1\u0144\2\0\3\244\1\0\1\244\2\0"+
    "\1\244\1\u0145\1\0\4\244\3\0\1\u0147\1\0\42\244"+
    "\1\0\5\244\25\0\1\251\51\0\1\244\1\u0144\2\0"+
    "\3\244\1\0\1\244\2\0\1\244\1\u0145\1\0\4\244"+
    "\3\0\1\u0147\1\0\32\244\1\u0148\4\244\1\u0148\2\244"+
    "\1\0\5\244\1\0\1\u0149\75\0\1\252\3\0\3\252"+
    "\1\0\1\252\2\0\1\252\2\0\4\252\5\0\42\252"+
    "\1\0\5\252\1\0\1\253\76\0\1\254\75\0\1\107"+
    "\3\0\3\107\1\0\1\107\2\0\1\107\2\0\2\107"+
    "\1\u014a\1\107\5\0\42\107\1\0\5\107\1\256\3\0"+
    "\3\256\1\0\1\256\2\0\1\256\2\0\4\256\5\0"+
    "\42\256\1\0\5\256\1\0\1\257\75\0\1\260\1\u014b"+
    "\1\0\1\u014b\1\260\1\u014c\1\260\1\u014b\1\260\2\u014b"+
    "\1\260\2\u014b\4\260\5\u014b\30\260\1\u014d\11\260\1\u014b"+
    "\5\260\1\256\3\0\3\256\1\0\1\256\2\0\1\256"+
    "\2\0\2\256\2\u014e\5\0\42\256\1\0\1\u014f\4\256"+
    "\1\262\1\u0150\1\0\1\u0150\3\262\1\u0150\1\u014c\2\u0150"+
    "\1\262\2\u0150\4\262\5\u0150\30\262\1\u0151\11\262\1\u0150"+
    "\5\262\1\256\3\0\3\256\1\0\1\256\2\0\1\256"+
    "\2\0\2\256\2\263\5\0\42\256\1\0\5\256\1\264"+
    "\3\0\3\264\1\0\1\264\2\0\1\264\2\0\4\264"+
    "\5\0\42\264\1\0\5\264\1\0\1\265\77\0\1\266"+
    "\74\0\1\264\3\0\3\264\1\0\1\264\2\0\1\264"+
    "\2\0\2\264\2\u0152\5\0\1\264\27\u0152\1\264\11\u0152"+
    "\1\0\1\264\4\u0152\1\264\3\0\2\264\1\u0153\1\0"+
    "\1\264\2\0\1\264\2\0\2\264\2\u0154\5\0\1\264"+
    "\27\u0154\1\264\11\u0154\1\0\1\264\4\u0154\7\0\1\u0155"+
    "\113\0\1\u0155\100\0\1\u0155\141\0\1\u0155\6\0\1\275"+
    "\75\0\2\276\1\0\2\276\1\u0156\51\276\1\u0157\17\276"+
    "\1\37\1\276\1\0\1\276\1\37\1\u0158\1\37\1\276"+
    "\1\37\2\276\1\37\2\276\4\37\5\276\30\37\1\300"+
    "\11\37\1\276\5\37\1\34\3\0\3\34\1\0\1\34"+
    "\2\0\1\34\2\0\2\34\2\301\5\0\42\34\1\0"+
    "\5\34\2\304\1\0\5\304\1\u0156\46\304\1\u0159\17\304"+
    "\1\42\1\304\1\0\1\304\3\42\1\304\1\u015a\2\304"+
    "\1\42\2\304\4\42\5\304\30\42\1\305\11\42\1\304"+
    "\5\42\12\306\1\u015b\64\306\1\310\3\0\3\310\1\0"+
    "\1\310\2\0\1\310\2\0\4\310\5\0\42\310\1\0"+
    "\5\310\22\0\1\u015c\54\0\1\310\3\0\3\310\1\0"+
    "\1\310\2\0\1\310\2\0\4\310\5\0\5\310\1\u015d"+
    "\34\310\1\0\5\310\1\313\3\0\3\313\1\0\1\313"+
    "\2\0\1\313\2\0\4\313\5\0\42\313\1\0\5\313"+
    "\1\34\3\0\3\34\1\0\1\34\2\0\1\34\2\0"+
    "\4\34\1\313\4\0\1\34\14\53\1\u015e\12\53\2\34"+
    "\10\53\1\0\5\34\1\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\23\56\1\u015f\15\56"+
    "\1\u015f\1\0\2\56\1\u015f\3\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\5\56\1\u0160"+
    "\34\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\14\56\1\u0161\21\56\1\u0161"+
    "\3\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\4\56\1\u0162\27\56\1\u0162"+
    "\5\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\24\56\1\u0163\15\56\1\0"+
    "\6\56\3\0\3\56\1\0\1\56\2\0\1\56\2\0"+
    "\4\56\5\0\10\56\1\u0164\31\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\23\56\1\u0165\15\56\1\u0165\1\0\2\56\1\u0165\3\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\4\56\1\u0166\27\56\1\u0166\5\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\11\56\1\u0167\30\56\1\0\1\56\1\u0167\4\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\22\56\1\u0168\15\56\1\u0168\1\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\24\56\1\u0169\15\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\4\56"+
    "\1\u016a\27\56\1\u016a\5\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\22\56"+
    "\1\u016b\15\56\1\u016b\1\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\24\56"+
    "\1\u016c\15\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\11\56\1\u016d\30\56"+
    "\1\0\1\56\1\u016d\3\56\2\340\1\0\2\340\1\u016e"+
    "\51\340\1\u016f\17\340\1\103\1\340\1\0\1\340\3\103"+
    "\1\340\1\103\2\340\1\103\2\340\4\103\5\340\30\103"+
    "\1\341\11\103\1\340\5\103\1\101\3\0\3\101\1\0"+
    "\1\101\2\0\1\101\2\0\2\101\2\342\5\0\42\101"+
    "\1\0\5\101\2\344\1\0\5\344\1\u016e\46\344\1\u0170"+
    "\17\344\1\105\1\344\1\0\1\344\3\105\1\344\1\105"+
    "\2\344\1\105\2\344\4\105\5\344\30\105\1\345\11\105"+
    "\1\344\5\105\1\107\3\0\3\107\1\0\1\107\2\0"+
    "\1\107\2\0\4\107\5\0\6\107\1\347\26\107\1\347"+
    "\4\107\1\0\5\107\2\350\1\0\2\350\1\u0171\51\350"+
    "\1\u0172\17\350\1\117\1\350\1\0\1\350\1\117\1\u0173"+
    "\1\117\1\350\1\117\2\350\1\117\2\350\4\117\5\350"+
    "\30\117\1\352\11\117\1\350\5\117\2\353\1\0\5\353"+
    "\1\u0171\46\353\1\u0174\17\353\1\120\1\353\1\0\1\353"+
    "\3\120\1\353\1\u0175\2\353\1\120\2\353\4\120\5\353"+
    "\30\120\1\354\11\120\1\353\5\120\2\356\1\0\2\356"+
    "\1\u0176\51\356\1\u0177\17\356\1\124\1\356\1\0\1\356"+
    "\1\124\1\u0178\1\124\1\356\1\124\2\356\1\124\2\356"+
    "\4\124\5\356\30\124\1\360\11\124\1\356\5\124\2\361"+
    "\1\0\5\361\1\u0176\46\361\1\u0179\17\361\1\125\1\361"+
    "\1\0\1\361\3\125\1\361\1\u017a\2\361\1\125\2\361"+
    "\4\125\5\361\30\125\1\362\11\125\1\361\5\125\1\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\23\56\1\u017b\15\56\1\u017b\1\0\2\56\1\u017b"+
    "\3\56\3\0\3\56\1\0\1\56\2\0\1\56\2\0"+
    "\4\56\5\0\5\56\1\u017c\34\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\14\56\1\u017d\21\56\1\u017d\3\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\4\56\1\u017e\27\56\1\u017e\5\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\24\56\1\u017f\15\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\10\56\1\u0180"+
    "\31\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\23\56\1\u0181\15\56\1\u0181"+
    "\1\0\2\56\1\u0181\3\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\4\56\1\u0182\27\56"+
    "\1\u0182\5\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\11\56\1\u0183\30\56"+
    "\1\0\1\56\1\u0183\4\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\22\56\1\u0184\15\56"+
    "\1\u0184\1\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\24\56\1\u0185\15\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\4\56\1\u0186\27\56\1\u0186\5\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\22\56\1\u0187\15\56\1\u0187\1\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\24\56\1\u0188\15\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\11\56\1\u0189\30\56\1\0\1\56\1\u0189\3\56"+
    "\1\107\3\0\3\107\1\0\1\107\2\0\1\107\2\0"+
    "\2\107\2\u018a\5\0\42\107\1\0\6\107\3\0\3\107"+
    "\1\0\1\107\2\0\1\107\2\0\2\u0106\2\107\5\0"+
    "\42\107\1\0\5\107\2\u0108\1\0\2\u0108\1\u018b\51\u0108"+
    "\1\u018c\17\u0108\1\145\1\u0108\1\0\1\u0108\1\145\1\u018d"+
    "\1\145\1\u0108\1\145\2\u0108\1\145\2\u0108\4\145\5\u0108"+
    "\30\145\1\u010a\11\145\1\u0108\5\145\2\u010b\1\0\5\u010b"+
    "\1\u018b\46\u010b\1\u018e\17\u010b\1\146\1\u010b\1\0\1\u010b"+
    "\3\146\1\u010b\1\u018f\2\u010b\1\146\2\u010b\4\146\5\u010b"+
    "\30\146\1\u010c\11\146\1\u010b\5\146\1\143\3\0\3\143"+
    "\1\0\1\143\2\0\1\143\2\0\4\143\5\0\6\143"+
    "\1\u010e\26\143\1\u010e\4\143\1\0\6\143\1\u0190\1\u0191"+
    "\1\0\3\143\1\u0192\1\143\2\u0192\1\143\2\0\4\143"+
    "\2\0\1\u0192\1\0\1\u0192\42\143\1\u0192\5\143\2\u0110"+
    "\1\0\2\u0110\1\u0193\51\u0110\1\u0194\17\u0110\1\156\1\u0110"+
    "\1\0\1\u0110\1\156\1\u0195\1\156\1\u0110\1\156\2\u0110"+
    "\1\156\2\u0110\4\156\5\u0110\30\156\1\u0112\11\156\1\u0110"+
    "\5\156\1\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\1\154\27\u0196\2\154\10\u0196\1\0"+
    "\5\154\2\u0114\1\0\5\u0114\1\u0193\46\u0114\1\u0197\17\u0114"+
    "\1\160\1\u0114\1\0\1\u0114\3\160\1\u0114\1\u0198\2\u0114"+
    "\1\160\2\u0114\4\160\5\u0114\30\160\1\u0115\11\160\1\u0114"+
    "\5\160\1\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\14\154\1\u0199\21\154\1\u0199\3\154"+
    "\1\0\6\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\14\154\1\u019a\21\154\1\u019a\3\154"+
    "\1\0\6\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\11\154\1\u019b\30\154\1\0\1\154"+
    "\1\u019b\4\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\13\154\1\u019c\26\154\1\0\4\154"+
    "\1\u019c\1\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\5\154\1\u019d\34\154\1\0\5\154"+
    "\2\u0120\1\0\2\u0120\1\u019e\51\u0120\1\u019f\17\u0120\1\174"+
    "\1\u0120\1\0\1\u0120\1\174\1\u01a0\1\174\1\u0120\1\174"+
    "\2\u0120\1\174\2\u0120\4\174\5\u0120\30\174\1\u0122\11\174"+
    "\1\u0120\5\174\1\171\3\0\3\171\1\0\1\171\2\0"+
    "\1\171\2\0\2\171\2\u0123\5\0\42\171\1\0\5\171"+
    "\2\u0125\1\0\5\u0125\1\u019e\46\u0125\1\u01a1\17\u0125\1\176"+
    "\1\u0125\1\0\1\u0125\3\176\1\u0125\1\u01a2\2\u0125\1\176"+
    "\2\u0125\4\176\5\u0125\30\176\1\u0126\11\176\1\u0125\5\176"+
    "\2\u0127\1\0\2\u0127\1\u01a3\51\u0127\1\u01a4\17\u0127\1\202"+
    "\1\u0127\1\0\1\u0127\1\202\1\u01a5\1\202\1\u0127\1\202"+
    "\2\u0127\1\202\2\u0127\4\202\5\u0127\30\202\1\u0129\11\202"+
    "\1\u0127\5\202\2\u012a\1\0\5\u012a\1\u01a3\46\u012a\1\u01a6"+
    "\17\u012a\1\203\1\u012a\1\0\1\u012a\3\203\1\u012a\1\u01a7"+
    "\2\u012a\1\203\2\u012a\4\203\5\u012a\30\203\1\u012b\11\203"+
    "\1\u012a\5\203\1\200\3\0\3\200\1\0\1\200\2\0"+
    "\1\200\2\0\4\200\5\0\6\200\1\u01a8\26\200\1\u01a8"+
    "\4\200\1\0\6\200\3\0\3\200\1\0\1\200\2\0"+
    "\1\200\2\0\4\200\5\0\25\200\1\u01a9\14\200\1\0"+
    "\6\200\3\0\3\200\1\0\1\200\2\0\1\200\2\0"+
    "\4\200\5\0\22\200\1\u01aa\15\200\1\u01aa\1\200\1\0"+
    "\6\200\3\0\3\200\1\0\1\200\2\0\1\200\2\0"+
    "\4\200\5\0\11\200\1\u01ab\30\200\1\0\1\200\1\u01ab"+
    "\4\200\3\0\3\200\1\0\1\200\2\0\1\200\2\0"+
    "\4\200\5\0\21\200\1\u01a9\20\200\1\0\6\200\3\0"+
    "\3\200\1\0\1\200\2\0\1\200\2\0\4\200\5\0"+
    "\22\200\1\u01a9\15\200\1\u01a9\1\200\1\0\6\200\3\0"+
    "\3\200\1\0\1\200\2\0\1\200\2\0\4\200\5\0"+
    "\23\200\1\u01a9\15\200\1\u01a9\1\0\2\200\1\u01a9\3\200"+
    "\3\0\3\200\1\0\1\200\2\0\1\200\2\0\4\200"+
    "\5\0\24\200\1\u01a9\15\200\1\0\5\200\1\222\1\276"+
    "\1\0\1\276\1\222\1\u01ac\1\222\1\276\1\222\2\276"+
    "\1\222\2\276\4\222\5\276\30\222\1\u0135\11\222\1\276"+
    "\5\222\1\223\1\304\1\0\1\304\3\223\1\304\1\u01ad"+
    "\2\304\1\223\2\304\4\223\5\304\30\223\1\u0136\11\223"+
    "\1\304\5\223\1\225\1\u0127\1\0\1\u0127\1\225\1\u01ae"+
    "\1\225\1\u0127\1\225\2\u0127\1\225\2\u0127\4\225\5\u0127"+
    "\30\225\1\u0138\11\225\1\u0127\5\225\1\226\1\u012a\1\0"+
    "\1\u012a\3\226\1\u012a\1\u01af\2\u012a\1\226\2\u012a\4\226"+
    "\5\u012a\30\226\1\u0139\11\226\1\u012a\5\226\1\220\3\0"+
    "\3\220\1\0\1\220\2\0\1\220\2\0\4\220\5\0"+
    "\25\220\1\u01b0\14\220\1\0\6\220\3\0\3\220\1\0"+
    "\1\220\2\0\1\220\2\0\4\220\5\0\21\220\1\u01b0"+
    "\20\220\1\0\6\220\3\0\3\220\1\0\1\220\2\0"+
    "\1\220\2\0\4\220\5\0\22\220\1\u01b0\15\220\1\u01b0"+
    "\1\220\1\0\6\220\3\0\3\220\1\0\1\220\2\0"+
    "\1\220\2\0\4\220\5\0\23\220\1\u01b0\15\220\1\u01b0"+
    "\1\0\2\220\1\u01b0\3\220\3\0\3\220\1\0\1\220"+
    "\2\0\1\220\2\0\4\220\5\0\24\220\1\u01b0\15\220"+
    "\1\0\5\220\1\236\3\0\3\236\1\0\1\236\2\0"+
    "\1\236\2\0\2\236\2\u01b1\5\0\42\236\1\0\5\236"+
    "\1\u0143\3\0\3\u0143\1\0\1\u0143\2\0\1\u0143\2\0"+
    "\4\u0143\5\0\42\u0143\1\0\5\u0143\25\0\1\u01b2\51\0"+
    "\1\u01b3\1\u01b4\2\u01b5\3\u01b3\1\u01b5\1\u01b3\2\u01b5\1\244"+
    "\1\u0145\1\u01b5\1\244\3\u01b3\3\u01b5\1\u0146\1\u01b5\42\u01b3"+
    "\1\u01b5\5\u01b3\2\u014b\1\0\2\u014b\1\u01b6\51\u014b\1\u01b7"+
    "\17\u014b\1\260\1\u014b\1\0\1\u014b\1\260\1\u01b8\1\260"+
    "\1\u014b\1\260\2\u014b\1\260\2\u014b\4\260\5\u014b\30\260"+
    "\1\u014d\11\260\1\u014b\5\260\1\256\3\0\3\256\1\0"+
    "\1\256\2\0\1\256\2\0\2\256\2\u014e\5\0\42\256"+
    "\1\0\5\256\2\u0150\1\0\5\u0150\1\u01b6\46\u0150\1\u01b9"+
    "\17\u0150\1\262\1\u0150\1\0\1\u0150\3\262\1\u0150\1\u01ba"+
    "\2\u0150\1\262\2\u0150\4\262\5\u0150\30\262\1\u0151\11\262"+
    "\1\u0150\5\262\1\264\3\0\1\u01bb\2\264\1\0\1\264"+
    "\2\0\1\264\2\0\2\264\2\u0152\5\0\1\264\27\u0152"+
    "\1\264\11\u0152\1\0\1\264\4\u0152\1\264\3\0\3\264"+
    "\1\0\1\264\2\0\1\264\2\0\4\264\5\0\1\264"+
    "\27\u01bc\2\264\10\u01bc\1\0\6\264\3\0\2\264\1\u01bb"+
    "\1\0\1\264\2\0\1\264\2\0\2\264\2\u0154\5\0"+
    "\1\264\27\u0154\1\264\11\u0154\1\0\1\264\4\u0154\2\276"+
    "\1\0\2\276\1\u01bd\51\276\1\u0157\17\276\2\304\1\0"+
    "\5\304\1\u01be\46\304\1\u0159\17\304\1\310\3\0\3\310"+
    "\1\0\1\310\2\0\1\310\2\0\4\310\5\0\15\310"+
    "\1\u01bf\24\310\1\0\5\310\1\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\17\56\1\u01c0"+
    "\22\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\1\56\1\u01c1\30\56\1\u01c1"+
    "\7\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\14\56\1\u01c2\21\56\1\u01c2"+
    "\3\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\11\56\1\u01c3\30\56\1\0"+
    "\1\56\1\u01c3\4\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\5\56\1\u01c4\34\56\1\0"+
    "\6\56\3\0\3\56\1\0\1\56\2\0\1\56\2\0"+
    "\4\56\5\0\17\56\1\u01c5\22\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\5\56\1\u01c6\34\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\14\56\1\u01c7"+
    "\21\56\1\u01c7\3\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\24\56\1\u01c8"+
    "\15\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\17\56\1\u01c9\22\56\1\0"+
    "\6\56\3\0\3\56\1\0\1\56\2\0\1\56\2\0"+
    "\4\56\5\0\11\56\1\u01ca\30\56\1\0\1\56\1\u01ca"+
    "\4\56\3\0\3\56\1\0\1\56\2\0\1\56\2\0"+
    "\4\56\5\0\5\56\1\u01cb\34\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\14\56\1\u01cc\21\56\1\u01cc\3\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\6\56\1\u01cd\26\56\1\u01cd\4\56\1\0\5\56\2\340"+
    "\1\0\2\340\1\u01ce\51\340\1\u016f\17\340\2\344\1\0"+
    "\5\344\1\u01cf\46\344\1\u0170\17\344\2\350\1\0\2\350"+
    "\1\u01d0\51\350\1\u0172\17\350\2\353\1\0\5\353\1\u01d1"+
    "\46\353\1\u0174\17\353\2\356\1\0\2\356\1\u01d2\51\356"+
    "\1\u0177\17\356\2\361\1\0\5\361\1\u01d3\46\361\1\u0179"+
    "\17\361\1\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\17\56\1\u01d4\22\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\1\56\1\u01d5\30\56\1\u01d5\7\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\14\56\1\u01d6\21\56\1\u01d6\3\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\11\56\1\u01d7\30\56\1\0\1\56\1\u01d7\4\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\5\56\1\u01d8\34\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\17\56"+
    "\1\u01d9\22\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\5\56\1\u01da\34\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\14\56\1\u01db\21\56\1\u01db\3\56"+
    "\1\0\6\56\3\0\3\56\1\0\1\56\2\0\1\56"+
    "\2\0\4\56\5\0\24\56\1\u01dc\15\56\1\0\6\56"+
    "\3\0\3\56\1\0\1\56\2\0\1\56\2\0\4\56"+
    "\5\0\17\56\1\u01dd\22\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\11\56"+
    "\1\u01de\30\56\1\0\1\56\1\u01de\4\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\5\56"+
    "\1\u01df\34\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\14\56\1\u01e0\21\56"+
    "\1\u01e0\3\56\1\0\6\56\3\0\3\56\1\0\1\56"+
    "\2\0\1\56\2\0\4\56\5\0\6\56\1\u01e1\26\56"+
    "\1\u01e1\4\56\1\0\5\56\1\107\3\0\3\107\1\0"+
    "\1\107\2\0\1\107\2\0\2\u01e2\2\u01e3\5\0\42\107"+
    "\1\0\5\107\2\u0108\1\0\2\u0108\1\u01e4\51\u0108\1\u018c"+
    "\17\u0108\2\u010b\1\0\5\u010b\1\u01e5\46\u010b\1\u018e\17\u010b"+
    "\1\0\1\u0190\1\u0191\4\0\1\u0192\1\0\2\u0192\11\0"+
    "\1\u0192\1\0\1\u0192\42\0\1\u0192\7\0\1\u0191\74\0"+
    "\2\u0110\1\0\2\u0110\1\u01e6\51\u0110\1\u0194\17\u0110\2\u0114"+
    "\1\0\5\u0114\1\u01e7\46\u0114\1\u0197\17\u0114\1\154\3\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\4\154\5\0"+
    "\11\154\1\u01e8\30\154\1\0\1\154\1\u01e8\4\154\3\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\4\154\3\0"+
    "\1\u01e9\1\0\42\154\1\0\6\154\3\0\3\154\1\0"+
    "\1\154\2\0\1\154\2\0\4\154\5\0\20\154\1\u01ea"+
    "\16\154\1\u01ea\2\154\1\0\6\154\3\0\3\154\1\0"+
    "\1\154\2\0\1\154\2\0\4\154\5\0\5\154\1\u01eb"+
    "\34\154\1\0\6\154\3\0\3\154\1\0\1\154\2\0"+
    "\1\154\2\0\4\154\5\0\2\154\1\u01ec\37\154\1\0"+
    "\5\154\2\u0120\1\0\2\u0120\1\u01ed\51\u0120\1\u019f\17\u0120"+
    "\2\u0125\1\0\5\u0125\1\u01ee\46\u0125\1\u01a1\17\u0125\2\u0127"+
    "\1\0\2\u0127\1\u01ef\51\u0127\1\u01a4\17\u0127\2\u012a\1\0"+
    "\5\u012a\1\u01f0\46\u012a\1\u01a6\17\u012a\1\200\3\0\3\200"+
    "\1\0\1\200\2\0\1\200\2\0\4\200\5\0\11\200"+
    "\1\u01f1\30\200\1\0\1\200\1\u01f1\4\200\3\0\3\200"+
    "\1\0\1\200\2\0\1\200\2\0\4\200\5\0\17\200"+
    "\1\u01f2\22\200\1\0\6\200\3\0\3\200\1\0\1\200"+
    "\2\0\1\200\2\0\4\200\5\0\23\200\1\u01f3\15\200"+
    "\1\u01f3\1\0\2\200\1\u01f3\2\200\1\u01b5\1\u01b4\11\u01b5"+
    "\2\0\1\u01b5\1\0\6\u01b5\1\0\51\u01b5\2\u014b\1\0"+
    "\2\u014b\1\u01f4\51\u014b\1\u01b7\17\u014b\2\u0150\1\0\5\u0150"+
    "\1\u01f5\46\u0150\1\u01b9\17\u0150\1\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\3\56\1\u01f6"+
    "\27\56\1\u01f6\6\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\13\56\1\u01f7"+
    "\26\56\1\0\4\56\1\u01f7\1\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\22\56\1\320"+
    "\15\56\1\320\1\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\17\56\1\u01f8"+
    "\22\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\22\56\1\332\15\56\1\332"+
    "\1\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\17\56\1\u01f9\22\56\1\0"+
    "\6\56\3\0\3\56\1\0\1\56\2\0\1\56\2\0"+
    "\4\56\5\0\24\56\1\u01fa\15\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\3\56\1\u01fb\27\56\1\u01fb\6\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\13\56\1\u01fc\26\56\1\0\4\56\1\u01fc\1\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\22\56\1\366\15\56\1\366\1\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\17\56\1\u01fd\22\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\22\56\1\u0100"+
    "\15\56\1\u0100\1\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\17\56\1\u01fe"+
    "\22\56\1\0\6\56\3\0\3\56\1\0\1\56\2\0"+
    "\1\56\2\0\4\56\5\0\24\56\1\u01ff\15\56\1\0"+
    "\5\56\1\107\3\0\3\107\1\0\1\107\2\0\1\107"+
    "\2\0\2\107\2\u0200\5\0\42\107\1\0\6\107\3\0"+
    "\3\107\1\0\1\107\2\0\1\107\2\0\2\u01e2\2\107"+
    "\5\0\42\107\1\0\5\107\1\154\3\0\3\154\1\0"+
    "\1\154\2\0\1\154\2\0\4\154\5\0\15\154\1\u0201"+
    "\24\154\1\0\5\154\20\0\2\u0202\6\0\27\u0202\1\0"+
    "\11\u0202\2\0\4\u0202\1\154\3\0\3\154\1\0\1\154"+
    "\2\0\1\154\2\0\4\154\3\0\1\u0203\1\0\42\154"+
    "\1\0\6\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\5\0\16\154\1\u0204\23\154\1\0\6\154"+
    "\3\0\3\154\1\0\1\154\2\0\1\154\2\0\4\154"+
    "\5\0\1\154\1\u0205\30\154\1\u0205\7\154\1\0\5\154"+
    "\1\200\3\0\3\200\1\0\1\200\2\0\1\200\2\0"+
    "\4\200\5\0\16\200\1\u0206\23\200\1\0\6\200\3\0"+
    "\3\200\1\0\1\200\2\0\1\200\2\0\4\200\5\0"+
    "\22\200\1\u0207\15\200\1\u0207\1\200\1\0\6\200\3\0"+
    "\3\200\1\0\1\200\2\0\1\200\2\0\4\200\5\0"+
    "\24\200\1\u0208\15\200\1\0\5\200\1\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\3\56"+
    "\1\u0209\27\56\1\u0209\6\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\3\56"+
    "\1\u020a\27\56\1\u020a\6\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\3\56"+
    "\1\u020b\27\56\1\u020b\6\56\1\0\6\56\3\0\3\56"+
    "\1\0\1\56\2\0\1\56\2\0\4\56\5\0\3\56"+
    "\1\u020c\27\56\1\u020c\6\56\1\0\5\56\1\107\3\0"+
    "\3\107\1\0\1\107\2\0\1\107\2\0\2\107\2\u020d"+
    "\5\0\42\107\1\0\5\107\1\154\3\0\3\154\1\0"+
    "\1\154\2\0\1\154\2\0\4\154\5\0\23\154\1\u020e"+
    "\15\154\1\u020e\1\0\2\154\1\u020e\2\154\20\0\2\u020f"+
    "\53\0\1\u020f\1\0\1\154\3\0\3\154\1\0\1\154"+
    "\2\0\1\154\2\0\4\154\5\0\23\154\1\u0210\15\154"+
    "\1\u0210\1\0\2\154\1\u0210\3\154\3\0\3\154\1\0"+
    "\1\154\2\0\1\154\2\0\4\154\5\0\3\154\1\u0211"+
    "\27\154\1\u0211\6\154\1\0\5\154\1\200\3\0\3\200"+
    "\1\0\1\200\2\0\1\200\2\0\4\200\5\0\5\200"+
    "\1\u0212\34\200\1\0\6\200\3\0\3\200\1\0\1\200"+
    "\2\0\1\200\2\0\4\200\5\0\14\200\1\u0213\21\200"+
    "\1\u0213\3\200\1\0\5\200\1\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\1\56\1\u0214"+
    "\30\56\1\u0214\7\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\1\56\1\u0215"+
    "\30\56\1\u0215\7\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\1\56\1\u0216"+
    "\30\56\1\u0216\7\56\1\0\6\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\1\56\1\u0217"+
    "\30\56\1\u0217\7\56\1\0\5\56\1\107\3\0\3\107"+
    "\1\0\1\107\2\0\1\107\2\0\2\107\2\u0218\5\0"+
    "\42\107\1\0\5\107\1\154\3\0\3\154\1\0\1\154"+
    "\2\0\1\154\2\0\4\154\3\0\1\u0219\1\0\42\154"+
    "\1\0\6\154\3\0\3\154\1\0\1\154\2\0\1\154"+
    "\2\0\4\154\3\0\1\u021a\1\0\42\154\1\0\6\154"+
    "\3\0\3\154\1\0\1\154\2\0\1\154\2\0\4\154"+
    "\5\0\13\154\1\u021b\26\154\1\0\4\154\1\u021b\1\200"+
    "\3\0\3\200\1\0\1\200\2\0\1\200\2\0\4\200"+
    "\5\0\4\200\1\u0208\27\200\1\u0208\5\200\1\0\6\200"+
    "\3\0\3\200\1\0\1\200\2\0\1\200\2\0\4\200"+
    "\5\0\5\200\1\u021c\34\200\1\0\5\200\1\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\14\56\1\u021d\21\56\1\u021d\3\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\14\56\1\u021e\21\56\1\u021e\3\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\14\56\1\u021f\21\56\1\u021f\3\56\1\0\6\56\3\0"+
    "\3\56\1\0\1\56\2\0\1\56\2\0\4\56\5\0"+
    "\14\56\1\u0220\21\56\1\u0220\3\56\1\0\5\56\1\107"+
    "\3\0\3\107\1\0\1\107\2\0\1\107\2\0\2\107"+
    "\2\u0221\5\0\42\107\1\0\5\107\13\0\2\u0202\1\0"+
    "\4\u0202\3\0\1\u0202\2\0\27\u0202\1\0\11\u0202\2\0"+
    "\4\u0202\20\0\2\u0222\53\0\1\u0222\1\0\1\154\3\0"+
    "\3\154\1\0\1\154\2\0\1\154\2\0\4\154\5\0"+
    "\21\154\1\u0223\20\154\1\0\5\154\1\200\3\0\3\200"+
    "\1\0\1\200\2\0\1\200\2\0\4\200\5\0\26\200"+
    "\1\u0224\13\200\1\0\5\200\13\0\1\u0202\1\0\1\u021a"+
    "\1\u0225\60\0\1\200\3\0\3\200\1\0\1\200\2\0"+
    "\1\200\2\0\4\200\5\0\5\200\1\u0226\34\200\1\0"+
    "\5\200\20\0\2\u0227\53\0\1\u0227\1\0\1\200\3\0"+
    "\3\200\1\0\1\200\2\0\1\200\2\0\4\200\5\0"+
    "\14\200\1\u0228\21\200\1\u0228\3\200\1\0\5\200\13\0"+
    "\1\u0202\1\0\1\u021a\61\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25956];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\33\0\10\1\2\11\2\1\1\11\25\1\1\11\7\1"+
    "\1\11\5\1\1\11\62\1\1\11\76\1\1\0\4\1"+
    "\1\11\1\0\1\1\1\0\1\11\1\1\1\0\25\1"+
    "\1\11\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\26\1\1\0\2\1\1\0"+
    "\4\1\1\0\3\1\1\0\1\1\1\0\11\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\0\17\1\1\11"+
    "\11\1\1\11\1\0\1\11\2\1\1\11\1\1\1\0"+
    "\4\1\1\0\4\1\2\11\1\0\1\1\1\0\2\1"+
    "\1\11\21\1\1\11\2\0\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\21\1\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\11\1\0\2\1"+
    "\1\0\6\1\1\11\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\13\1\1\11\2\1\2\11\1\0"+
    "\1\1\1\0\57\1\1\0\30\1\1\11\1\0\26\1"+
    "\1\0\12\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private Stack<Integer> tokenOrigin = new Stack<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 134: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 135: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 136: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 137: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 138: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 139: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 140: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 141: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 142: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 143: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 144: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 145: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 146: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 147: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 148: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 149: break;
          case 17:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 150: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 151: break;
          case 19:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 152: break;
          case 20:
            { tokenOrigin.push(CHDIR); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 153: break;
          case 21:
            { yybegin(CHDIR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 154: break;
          case 22:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 155: break;
          case 23:
            { yybegin(DATE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 156: break;
          case 24:
            { tokenOrigin.push(ECHO_STRING); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 157: break;
          case 25:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 158: break;
          case 26:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 159: break;
          case 27:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 160: break;
          case 28:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 161: break;
          case 29:
            { yybegin(FOR); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 162: break;
          case 30:
            { yybegin(FOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 163: break;
          case 31:
            { yybegin(FOR); yypushback(yylength()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 164: break;
          case 32:
            { yybegin(FOR_COLLECTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 165: break;
          case 33:
            { yybegin(FOR); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 166: break;
          case 34:
            { tokenOrigin.push(IF_STANDARD); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 167: break;
          case 35:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 168: break;
          case 36:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 169: break;
          case 37:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 170: break;
          case 38:
            { tokenOrigin.push(YYINITIAL); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 171: break;
          case 39:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 172: break;
          case 40:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 173: break;
          case 41:
            { yybegin(IF_STANDARD); return BatchTypes.NUMERIC;
            }
          // fall through
          case 174: break;
          case 42:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 175: break;
          case 43:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 176: break;
          case 44:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 177: break;
          case 45:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 178: break;
          case 46:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 179: break;
          case 47:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 180: break;
          case 48:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 181: break;
          case 49:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 182: break;
          case 50:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 183: break;
          case 51:
            { tokenOrigin.push(SET_VALUE); yybegin(TOKEN); yypushback(yylength());
            }
          // fall through
          case 184: break;
          case 52:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 185: break;
          case 53:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 186: break;
          case 54:
            { yybegin(tokenOrigin.pop()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 187: break;
          case 55:
            { yybegin(tokenOrigin.pop()); yypushback(yylength());
            }
          // fall through
          case 188: break;
          case 56:
            { yybegin(tokenOrigin.pop()); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 189: break;
          case 57:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 190: break;
          case 58:
            { yybegin(YYINITIAL); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 191: break;
          case 59:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 192: break;
          case 60:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 193: break;
          case 61:
            { yybegin(CHDIR); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 194: break;
          case 62:
            { yybegin(CHDIR); return BatchTypes.CHDIR_ANNOTATION;
            }
          // fall through
          case 195: break;
          case 63:
            { yybegin(IF); return BatchTypes.IF_ANNOTATION;
            }
          // fall through
          case 196: break;
          case 64:
            { yybegin(YYINITIAL); return BatchTypes.MKDIR_ANNOTATION;
            }
          // fall through
          case 197: break;
          case 65:
            { yybegin(ASSOC_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 198: break;
          case 66:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 199: break;
          case 67:
            { yybegin(CHDIR); return BatchTypes.STRING;
            }
          // fall through
          case 200: break;
          case 68:
            { yybegin(CHDIR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 201: break;
          case 69:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 202: break;
          case 70:
            { yybegin(CHDIR); return BatchTypes.CHDIR_COMMAND;
            }
          // fall through
          case 203: break;
          case 71:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 204: break;
          case 72:
            { yybegin(YYINITIAL); return BatchTypes.MKDIR_COMMAND;
            }
          // fall through
          case 205: break;
          case 73:
            { yybegin(DATE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 206: break;
          case 74:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 207: break;
          case 75:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 208: break;
          case 76:
            { yybegin(FOR); return BatchTypes.STRING;
            }
          // fall through
          case 209: break;
          case 77:
            { yybegin(FOR_COLLECTION); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 210: break;
          case 78:
            { yybegin(FOR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 211: break;
          case 79:
            { yybegin(YYINITIAL); return BatchTypes.DO_COMMAND;
            }
          // fall through
          case 212: break;
          case 80:
            { yybegin(FOR); return BatchTypes.IN_COMMAND;
            }
          // fall through
          case 213: break;
          case 81:
            { yybegin(FOR_COLLECTION); return BatchTypes.STRING;
            }
          // fall through
          case 214: break;
          case 82:
            { yybegin(FOR_COLLECTION); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 215: break;
          case 83:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 216: break;
          case 84:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 217: break;
          case 85:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 218: break;
          case 86:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 219: break;
          case 87:
            { tokenOrigin.push(SET); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.VARIABLE;
            }
          // fall through
          case 220: break;
          case 88:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 221: break;
          case 89:
            { tokenOrigin.push(SET_VALUE); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 222: break;
          case 90:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 223: break;
          case 91:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 224: break;
          case 92:
            { yybegin(SET_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 225: break;
          case 93:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 226: break;
          case 94:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 227: break;
          case 95:
            { yybegin(FOR); return BatchTypes.FOR_ANNOTATION;
            }
          // fall through
          case 228: break;
          case 96:
            { yybegin(SET); return BatchTypes.SET_ANNOTATION;
            }
          // fall through
          case 229: break;
          case 97:
            { yybegin(FOR); return BatchTypes.FOR_COMMAND;
            }
          // fall through
          case 230: break;
          case 98:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 231: break;
          case 99:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 232: break;
          case 100:
            { yybegin(YYINITIAL); yypushback(1); return BatchTypes.TOGGLE;
            }
          // fall through
          case 233: break;
          case 101:
            { yybegin(FOR); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 234: break;
          case 102:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 235: break;
          case 103:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 236: break;
          case 104:
            { yybegin(SET); yypushback(yylength() - 2); return BatchTypes.EXTENSION;
            }
          // fall through
          case 237: break;
          case 105:
            { yybegin(tokenOrigin.pop()); return BatchTypes.VARIABLE;
            }
          // fall through
          case 238: break;
          case 106:
            { yybegin(tokenOrigin.pop()); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 239: break;
          case 107:
            { yybegin(CALL); return BatchTypes.CALL_ANNOTATION;
            }
          // fall through
          case 240: break;
          case 108:
            { yybegin(DATE); return BatchTypes.DATE_ANNOTATION;
            }
          // fall through
          case 241: break;
          case 109:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 242: break;
          case 110:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_ANNOTATION;
            }
          // fall through
          case 243: break;
          case 111:
            { yybegin(EXIT); return BatchTypes.EXIT_ANNOTATION;
            }
          // fall through
          case 244: break;
          case 112:
            { yybegin(GOTO); return BatchTypes.GOTO_ANNOTATION;
            }
          // fall through
          case 245: break;
          case 113:
            { yybegin(MORE); return BatchTypes.MORE_ANNOTATION;
            }
          // fall through
          case 246: break;
          case 114:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 247: break;
          case 115:
            { yybegin(DATE); return BatchTypes.DATE_COMMAND;
            }
          // fall through
          case 248: break;
          case 116:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 249: break;
          case 117:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 250: break;
          case 118:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 251: break;
          case 119:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 252: break;
          case 120:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 253: break;
          case 121:
            { yybegin(ASSOC); return BatchTypes.ASSOC_ANNOTATION;
            }
          // fall through
          case 254: break;
          case 122:
            { yybegin(BREAK); return BatchTypes.BREAK_ANNOTATION;
            }
          // fall through
          case 255: break;
          case 123:
            { yybegin(SHIFT); return BatchTypes.SHIFT_ANNOTATION;
            }
          // fall through
          case 256: break;
          case 124:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 257: break;
          case 125:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 258: break;
          case 126:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 259: break;
          case 127:
            { yybegin(FOR); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 260: break;
          case 128:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 261: break;
          case 129:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_ANNOTATION;
            }
          // fall through
          case 262: break;
          case 130:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_ANNOTATION;
            }
          // fall through
          case 263: break;
          case 131:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 264: break;
          case 132:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 265: break;
          case 133:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 266: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
