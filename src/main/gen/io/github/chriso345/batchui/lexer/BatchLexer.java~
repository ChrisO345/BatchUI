// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int CALL = 4;
  public static final int COMMAND = 6;
  public static final int ECHO = 8;
  public static final int ECHO_STRING = 10;
  public static final int EXIT = 12;
  public static final int GOTO = 14;
  public static final int LABEL = 16;
  public static final int REM = 18;
  public static final int SET = 20;
  public static final int SET_LOCAL = 22;
  public static final int SHIFT = 24;
  public static final int SET_VALUE = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  2,  2, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\0\1\4\2\0\1\5\1\6\5\0\1\3\2\0"+
    "\1\7\11\10\1\11\1\12\1\3\1\13\1\14\1\15"+
    "\1\0\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\1\32\1\33"+
    "\2\0\1\34\1\35\1\36\3\0\1\37\3\0\1\40"+
    "\4\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\0\1\30\1\31\1\32\1\33\2\0"+
    "\1\34\1\35\1\36\3\0\1\37\3\0\1\41\1\0"+
    "\1\42\261\0\2\27\115\0\1\35\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\2\1\1\3\1\4\1\3\1\5"+
    "\1\3\2\1\1\3\1\6\1\7\1\6\1\10\1\11"+
    "\1\4\1\12\1\13\1\12\3\14\4\12\1\14\1\15"+
    "\1\16\2\15\1\17\1\20\1\12\1\21\1\22\1\23"+
    "\1\12\1\24\1\25\1\26\1\27\1\30\1\12\1\31"+
    "\1\32\2\31\1\33\1\0\1\34\2\1\1\3\1\35"+
    "\1\36\1\0\1\36\1\1\1\6\1\0\1\37\1\12"+
    "\1\14\7\12\1\0\1\40\3\15\1\41\1\0\1\42"+
    "\1\43\1\0\2\31\1\34\1\0\1\34\1\21\1\44"+
    "\1\36\1\35\1\6\1\37\1\0\1\37\5\12\1\45"+
    "\1\12\1\40\1\0\1\40\1\0\1\46\1\31\1\0"+
    "\1\47\1\34\1\44\1\50\1\37\1\51\1\52\1\12"+
    "\1\53\1\54\2\12\1\40\1\31\2\12\1\55\4\12"+
    "\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325"+
    "\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u02df"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a"+
    "\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u02df"+
    "\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857"+
    "\0\u02df\0\u087a\0\u01c7\0\u089d\0\u08c0\0\u02df\0\u02df\0\u08e3"+
    "\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u043d\0\u09b5\0\u02df"+
    "\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd"+
    "\0\u05be\0\u0af0\0\u0b13\0\u0b36\0\u043d\0\u0b59\0\u02df\0\u043d"+
    "\0\u0b7c\0\u0b9f\0\u0bc2\0\u02df\0\u0be5\0\u0230\0\u01c7\0\u02df"+
    "\0\u0c08\0\u01c7\0\u0c2b\0\u02df\0\u0c4e\0\u0483\0\u0c71\0\u0c94"+
    "\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u02df\0\u0d66\0\u0604"+
    "\0\u0d89\0\u0dac\0\u02df\0\u0dcf\0\u07ee\0\u087a\0\u08e3\0\u038e"+
    "\0\u0992\0\u043d\0\u043d\0\u0df2\0\u043d\0\u043d\0\u0e15\0\u0e38"+
    "\0\u0acd\0\u0b7c\0\u0e5b\0\u0e7e\0\u043d\0\u0ea1\0\u0ec4\0\u0ee7"+
    "\0\u0f0a\0\u043d\0\u043d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\0\1\21\1\22\1\23\3\16"+
    "\1\24\1\25\1\26\1\27\1\30\15\16\1\31\4\16"+
    "\1\32\1\16\1\33\1\34\2\0\2\33\1\0\3\33"+
    "\4\0\5\33\1\35\15\33\1\0\1\33\1\36\1\37"+
    "\1\20\1\0\2\36\1\0\3\36\1\40\3\0\23\36"+
    "\1\0\1\36\1\41\1\42\1\20\1\0\1\43\1\41"+
    "\1\44\3\41\1\0\1\45\1\0\1\46\3\41\1\47"+
    "\1\41\1\50\1\41\1\51\7\41\1\52\3\41\1\53"+
    "\1\41\1\54\1\55\1\20\1\0\1\56\1\54\1\44"+
    "\3\54\1\0\1\45\1\0\1\46\15\54\1\57\5\54"+
    "\1\53\2\54\1\60\1\20\1\0\1\56\1\54\1\44"+
    "\3\54\1\0\1\45\1\0\1\46\23\54\1\53\1\54"+
    "\1\41\1\61\1\20\1\0\2\41\1\44\1\62\2\63"+
    "\1\0\1\45\1\0\1\46\23\41\1\53\1\41\1\36"+
    "\1\64\1\20\1\0\2\36\1\0\3\36\4\0\23\36"+
    "\1\0\1\36\2\65\1\20\40\65\1\66\1\67\1\20"+
    "\1\0\2\66\1\0\3\66\2\0\1\70\1\0\23\66"+
    "\1\0\1\66\1\71\1\72\1\20\1\0\2\71\1\0"+
    "\3\71\4\0\23\71\1\0\1\71\1\41\1\73\1\20"+
    "\1\0\2\41\1\44\1\74\2\41\1\0\1\45\1\0"+
    "\1\46\23\41\1\53\1\41\1\75\1\76\1\20\1\0"+
    "\1\77\1\100\1\0\3\75\2\0\1\101\1\0\23\75"+
    "\1\0\1\75\1\16\3\0\2\16\1\0\3\16\4\0"+
    "\23\16\1\0\1\16\1\0\1\17\43\0\1\20\40\0"+
    "\1\21\1\102\1\0\1\102\1\103\1\21\1\102\3\21"+
    "\4\102\22\21\1\104\1\102\1\21\1\16\3\0\2\16"+
    "\1\0\3\16\4\0\23\16\1\0\1\105\6\0\1\106"+
    "\46\0\1\107\43\0\1\106\107\0\1\106\25\0\1\110"+
    "\3\0\2\110\1\0\3\110\1\111\3\0\16\110\1\112"+
    "\4\110\1\0\1\110\1\16\3\0\2\16\1\0\3\16"+
    "\4\0\5\16\1\113\15\16\1\0\1\16\41\0\1\106"+
    "\1\0\1\33\3\0\2\33\1\0\3\33\4\0\23\33"+
    "\1\0\1\33\1\0\1\34\41\0\1\33\3\0\2\33"+
    "\1\0\3\33\4\0\3\33\1\114\17\33\1\0\1\33"+
    "\1\36\3\0\2\36\1\0\3\36\4\0\23\36\1\0"+
    "\1\36\1\0\1\37\41\0\1\41\3\0\2\41\1\0"+
    "\3\41\4\0\23\41\1\0\1\41\1\0\1\42\41\0"+
    "\1\43\1\115\1\0\1\115\1\116\1\43\1\115\3\43"+
    "\4\115\22\43\1\117\1\115\1\43\6\0\1\120\47\0"+
    "\1\120\44\0\1\120\25\0\1\41\3\0\2\41\1\0"+
    "\3\41\4\0\1\41\1\121\21\41\1\0\2\41\3\0"+
    "\2\41\1\0\3\41\4\0\3\41\1\122\10\41\1\123"+
    "\4\41\1\124\1\41\1\0\2\41\3\0\2\41\1\0"+
    "\3\41\4\0\15\41\1\125\5\41\1\0\2\41\3\0"+
    "\2\41\1\0\3\41\4\0\5\41\1\126\2\41\1\127"+
    "\12\41\1\0\1\41\41\0\1\120\1\0\1\54\3\0"+
    "\2\54\1\0\3\54\4\0\23\54\1\0\1\54\1\0"+
    "\1\55\41\0\1\56\1\130\1\0\1\130\1\131\1\56"+
    "\1\130\3\56\4\130\22\56\1\132\1\130\1\56\1\54"+
    "\3\0\2\54\1\0\3\54\4\0\6\54\1\133\5\54"+
    "\1\134\6\54\1\0\1\54\1\0\1\60\42\0\1\61"+
    "\41\0\1\41\3\0\2\41\1\0\3\41\4\0\2\41"+
    "\1\135\20\41\1\0\2\41\3\0\2\41\1\0\1\41"+
    "\2\63\4\0\23\41\1\0\1\41\1\0\1\64\41\0"+
    "\2\65\1\0\40\65\1\66\1\136\2\0\2\66\1\0"+
    "\3\66\2\0\1\137\1\0\23\66\1\0\1\66\1\0"+
    "\1\67\41\0\1\71\3\0\2\71\1\0\3\71\4\0"+
    "\23\71\1\0\1\71\1\0\1\72\42\0\1\73\41\0"+
    "\1\41\3\0\2\41\1\0\1\41\1\140\1\41\4\0"+
    "\23\41\1\0\1\41\1\75\3\0\2\75\1\0\3\75"+
    "\4\0\23\75\1\0\1\75\1\0\1\76\41\0\1\77"+
    "\1\141\1\0\1\141\1\75\1\77\1\141\3\77\4\141"+
    "\22\77\1\142\1\141\1\77\1\75\3\0\2\75\1\0"+
    "\3\75\4\0\23\75\1\0\1\143\2\102\1\0\1\102"+
    "\1\144\33\102\1\145\2\102\1\21\1\102\1\0\1\102"+
    "\1\146\1\21\1\102\3\21\4\102\22\21\1\104\1\102"+
    "\1\21\1\16\3\0\2\16\1\0\1\16\2\147\4\0"+
    "\23\16\1\0\1\147\1\110\3\0\2\110\1\0\3\110"+
    "\4\0\23\110\1\0\1\110\12\0\1\150\30\0\1\110"+
    "\3\0\2\110\1\0\3\110\4\0\5\110\1\151\15\110"+
    "\1\0\1\110\1\16\3\0\2\16\1\0\3\16\4\0"+
    "\13\16\1\152\7\16\1\0\1\16\1\33\3\0\2\33"+
    "\1\0\3\33\4\0\10\33\1\153\12\33\1\0\1\33"+
    "\2\115\1\0\1\115\1\154\33\115\1\155\2\115\1\43"+
    "\1\115\1\0\1\115\1\156\1\43\1\115\3\43\4\115"+
    "\22\43\1\117\1\115\1\43\1\41\3\0\2\41\1\0"+
    "\3\41\4\0\12\41\1\157\10\41\1\0\2\41\3\0"+
    "\2\41\1\0\3\41\4\0\10\41\1\160\12\41\1\0"+
    "\2\41\3\0\2\41\1\0\3\41\4\0\4\41\1\161"+
    "\16\41\1\0\2\41\3\0\2\41\1\0\3\41\4\0"+
    "\11\41\1\162\11\41\1\0\2\41\3\0\2\41\1\0"+
    "\3\41\4\0\20\41\1\163\2\41\1\0\2\41\3\0"+
    "\2\41\1\0\3\41\4\0\20\41\1\164\2\41\1\0"+
    "\2\41\3\0\2\41\1\0\3\41\4\0\11\41\1\165"+
    "\11\41\1\0\1\41\2\130\1\0\1\130\1\166\33\130"+
    "\1\167\2\130\1\56\1\130\1\0\1\130\1\170\1\56"+
    "\1\130\3\56\4\130\22\56\1\132\1\130\1\56\1\54"+
    "\3\0\2\54\1\0\3\54\4\0\6\54\1\134\14\54"+
    "\1\0\2\54\1\171\1\172\1\0\2\54\1\0\3\54"+
    "\4\0\23\54\1\0\1\54\1\0\1\136\12\0\1\137"+
    "\26\0\2\141\1\0\1\141\1\173\33\141\1\174\2\141"+
    "\1\77\1\141\1\0\1\141\2\77\1\141\3\77\4\141"+
    "\22\77\1\142\1\141\1\77\1\75\3\0\2\75\1\0"+
    "\1\75\2\175\4\0\23\75\1\0\1\175\2\102\1\0"+
    "\1\102\1\176\33\102\1\145\2\102\1\110\3\0\2\110"+
    "\1\0\3\110\4\0\13\110\1\177\7\110\1\0\1\110"+
    "\1\33\3\0\2\33\1\0\3\33\4\0\15\33\1\200"+
    "\5\33\1\0\1\33\2\115\1\0\1\115\1\201\33\115"+
    "\1\155\2\115\1\41\3\0\2\41\1\0\3\41\4\0"+
    "\12\41\1\202\10\41\1\0\2\41\3\0\2\41\1\0"+
    "\3\41\4\0\15\41\1\203\5\41\1\0\2\41\3\0"+
    "\2\41\1\0\3\41\4\0\12\41\1\204\10\41\1\0"+
    "\2\41\3\0\2\41\1\0\3\41\4\0\20\41\1\205"+
    "\2\41\1\0\2\41\3\0\2\41\1\0\3\41\4\0"+
    "\15\41\1\206\5\41\1\0\2\41\3\0\2\41\1\0"+
    "\3\41\4\0\12\41\1\207\10\41\1\0\2\41\3\0"+
    "\2\41\1\0\3\41\4\0\6\41\1\210\14\41\1\0"+
    "\1\41\2\130\1\0\1\130\1\211\33\130\1\167\2\130"+
    "\1\0\1\171\1\172\42\0\1\172\40\0\2\141\1\0"+
    "\1\141\1\212\33\141\1\174\2\141\1\41\3\0\2\41"+
    "\1\0\3\41\4\0\15\41\1\213\5\41\1\0\2\41"+
    "\3\0\2\41\1\0\3\41\4\0\15\41\1\214\5\41"+
    "\1\0\2\41\3\0\2\41\1\0\3\41\4\0\20\41"+
    "\1\215\2\41\1\0\2\41\3\0\2\41\1\0\3\41"+
    "\4\0\3\41\1\216\17\41\1\0\2\41\3\0\2\41"+
    "\1\0\3\41\4\0\3\41\1\217\17\41\1\0\2\41"+
    "\3\0\2\41\1\0\3\41\4\0\1\41\1\220\21\41"+
    "\1\0\2\41\3\0\2\41\1\0\3\41\4\0\1\41"+
    "\1\221\21\41\1\0\2\41\3\0\2\41\1\0\3\41"+
    "\4\0\12\41\1\222\10\41\1\0\2\41\3\0\2\41"+
    "\1\0\3\41\4\0\12\41\1\223\10\41\1\0\1\41";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3885];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\10\1\1\11\11\1\1\11\27\1\1\11\10\1"+
    "\1\11\1\0\3\1\2\11\1\1\1\0\3\1\1\0"+
    "\2\1\1\11\7\1\1\0\5\1\1\0\1\11\1\1"+
    "\1\0\2\1\1\11\1\0\2\1\1\11\3\1\1\11"+
    "\1\0\10\1\1\11\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 48: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 50: break;
          case 4:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 51: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 52: break;
          case 6:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 53: break;
          case 7:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 54: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 55: break;
          case 9:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 56: break;
          case 10:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 57: break;
          case 11:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 58: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 59: break;
          case 13:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 60: break;
          case 14:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 61: break;
          case 15:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 62: break;
          case 16:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 63: break;
          case 17:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 64: break;
          case 18:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 65: break;
          case 19:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 66: break;
          case 20:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 67: break;
          case 21:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 68: break;
          case 22:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 69: break;
          case 23:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 24:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 71: break;
          case 25:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 72: break;
          case 26:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 27:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 74: break;
          case 28:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 75: break;
          case 29:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 76: break;
          case 30:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 77: break;
          case 31:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 78: break;
          case 32:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 79: break;
          case 33:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 80: break;
          case 34:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 81: break;
          case 35:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 82: break;
          case 36:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 83: break;
          case 37:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 84: break;
          case 38:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 85: break;
          case 39:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 86: break;
          case 40:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 87: break;
          case 41:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 88: break;
          case 42:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 89: break;
          case 43:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 90: break;
          case 44:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 91: break;
          case 45:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 92: break;
          case 46:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 93: break;
          case 47:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
