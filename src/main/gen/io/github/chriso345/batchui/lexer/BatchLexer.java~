// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int BREAK = 8;
  public static final int CALL = 10;
  public static final int COMMAND = 12;
  public static final int ECHO = 14;
  public static final int ECHO_STRING = 16;
  public static final int EXIT = 18;
  public static final int FOR = 20;
  public static final int FOR_COLLECTION = 22;
  public static final int GOTO = 24;
  public static final int IF = 26;
  public static final int IF_ERRORLEVEL = 28;
  public static final int IF_EXIST = 30;
  public static final int IF_STANDARD = 32;
  public static final int LABEL = 34;
  public static final int MORE = 36;
  public static final int REM = 38;
  public static final int SET = 40;
  public static final int SET_LOCAL = 42;
  public static final int SHIFT = 44;
  public static final int SET_VALUE = 46;
  public static final int TOKEN = 48;
  public static final int BAD_WHITESPACE = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  5,  5, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\11\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\41\1\56\2\41"+
    "\1\0\1\57\2\0\1\60\1\0\1\61\1\31\1\62"+
    "\1\63\1\34\1\64\1\36\1\37\1\40\1\41\1\42"+
    "\1\65\1\44\1\45\1\46\1\66\1\50\1\67\1\70"+
    "\1\53\1\54\1\55\1\41\1\56\2\41\1\0\1\71"+
    "\1\0\1\72\53\0\1\60\12\0\1\60\4\0\1\60"+
    "\5\0\27\60\1\0\37\60\1\0\70\60\2\73\115\60"+
    "\1\74\u0142\60\4\0\14\60\16\0\5\60\7\0\1\60"+
    "\1\0\1\60\21\0\165\60\1\0\2\60\2\0\4\60"+
    "\1\0\1\60\6\0\1\60\1\0\3\60\1\0\1\60"+
    "\1\0\24\60\1\0\123\60\1\0\213\60\1\0\255\60"+
    "\1\0\46\60\2\0\1\60\6\0\51\60\10\0\55\60"+
    "\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60"+
    "\10\0\33\60\4\0\4\60\35\0\13\60\5\0\100\60"+
    "\12\75\4\0\146\60\1\0\10\60\2\0\12\60\1\0"+
    "\6\60\12\75\3\60\2\0\1\60\20\0\73\60\2\0"+
    "\145\60\16\0\12\75\54\60\4\0\1\60\2\0\1\60"+
    "\2\0\56\60\22\0\34\60\4\0\13\60\65\0\25\60"+
    "\1\0\10\60\25\0\17\60\1\0\201\60\2\0\12\75"+
    "\1\0\23\60\1\0\10\60\2\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\1\60\3\0\4\60\2\0\11\60"+
    "\2\0\2\60\2\0\4\60\10\0\1\60\4\0\2\60"+
    "\1\0\5\60\2\0\12\75\2\60\12\0\1\60\1\0"+
    "\1\60\2\0\3\60\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0"+
    "\2\60\2\0\1\60\1\0\5\60\4\0\2\60\2\0"+
    "\3\60\3\0\1\60\7\0\4\60\1\0\1\60\7\0"+
    "\12\75\6\60\13\0\3\60\1\0\11\60\1\0\3\60"+
    "\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\12\60\1\0\3\60\1\0\3\60\2\0\1\60"+
    "\17\0\4\60\2\0\12\75\11\0\7\60\1\0\3\60"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\5\60\2\0\11\60\2\0\2\60"+
    "\2\0\3\60\10\0\2\60\4\0\2\60\1\0\5\60"+
    "\2\0\12\75\1\0\1\60\20\0\2\60\1\0\6\60"+
    "\3\0\3\60\1\0\4\60\3\0\2\60\1\0\1\60"+
    "\1\0\2\60\3\0\2\60\3\0\3\60\3\0\14\60"+
    "\4\0\5\60\3\0\3\60\1\0\4\60\2\0\1\60"+
    "\6\0\1\60\16\0\12\75\20\0\15\60\1\0\3\60"+
    "\1\0\27\60\1\0\20\60\3\0\10\60\1\0\3\60"+
    "\1\0\4\60\7\0\2\60\1\0\3\60\5\0\4\60"+
    "\2\0\12\75\20\0\4\60\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\11\60"+
    "\1\0\3\60\1\0\4\60\7\0\2\60\7\0\1\60"+
    "\1\0\4\60\2\0\12\75\1\0\2\60\15\0\4\60"+
    "\1\0\10\60\1\0\3\60\1\0\63\60\1\0\3\60"+
    "\1\0\5\60\5\0\4\60\7\0\5\60\2\0\12\75"+
    "\12\0\6\60\2\0\2\60\1\0\22\60\3\0\30\60"+
    "\1\0\11\60\1\0\1\60\2\0\7\60\3\0\1\60"+
    "\4\0\6\60\1\0\1\60\1\0\10\60\6\0\12\75"+
    "\2\0\2\60\15\0\72\60\5\0\17\60\1\0\12\75"+
    "\47\0\2\60\1\0\1\60\1\0\5\60\1\0\30\60"+
    "\1\0\1\60\1\0\27\60\2\0\5\60\1\0\1\60"+
    "\1\0\6\60\2\0\12\75\2\0\4\60\40\0\1\60"+
    "\27\0\2\60\6\0\12\75\13\0\1\60\1\0\1\60"+
    "\1\0\1\60\4\0\12\60\1\0\44\60\4\0\24\60"+
    "\1\0\22\60\1\0\44\60\11\0\1\60\71\0\100\60"+
    "\12\75\6\0\100\60\12\75\4\60\2\0\46\60\1\0"+
    "\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0"+
    "\51\60\1\0\4\60\2\0\41\60\1\0\4\60\2\0"+
    "\7\60\1\0\1\60\1\0\4\60\2\0\17\60\1\0"+
    "\71\60\1\0\4\60\2\0\103\60\2\0\3\60\40\0"+
    "\20\60\20\0\126\60\2\0\6\60\3\0\u016c\60\2\0"+
    "\21\60\1\0\32\60\5\0\113\60\3\0\13\60\7\0"+
    "\15\60\1\0\7\60\13\0\25\60\13\0\24\60\14\0"+
    "\15\60\1\0\3\60\1\0\2\60\14\0\124\60\3\0"+
    "\1\60\4\0\2\60\2\0\12\75\41\0\3\60\2\0"+
    "\12\75\6\0\131\60\7\0\53\60\5\0\106\60\12\0"+
    "\37\60\1\0\14\60\4\0\14\60\12\0\12\75\36\60"+
    "\2\0\5\60\13\0\54\60\4\0\32\60\6\0\12\75"+
    "\46\0\34\60\4\0\77\60\1\0\35\60\2\0\1\60"+
    "\12\75\6\0\12\75\15\0\1\60\10\0\17\60\101\0"+
    "\114\60\4\0\12\75\21\0\11\60\14\0\60\60\12\75"+
    "\72\60\14\0\70\60\10\0\12\75\3\0\3\60\12\75"+
    "\44\60\2\0\11\60\7\0\53\60\2\0\3\60\20\0"+
    "\3\60\1\0\47\60\5\0\372\60\1\0\33\60\2\0"+
    "\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0"+
    "\65\60\1\0\7\60\1\0\1\60\3\0\3\60\1\0"+
    "\7\60\3\0\4\60\2\0\6\60\4\0\15\60\5\0"+
    "\3\60\1\0\7\60\102\0\2\60\23\0\1\60\34\0"+
    "\1\60\15\0\1\60\20\0\15\60\63\0\41\60\21\0"+
    "\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0"+
    "\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\76\3\60\1\0\13\60\2\0\4\60\5\0\5\60"+
    "\4\0\1\60\21\0\51\60\u022d\0\64\60\26\0\57\60"+
    "\1\0\57\60\1\0\205\60\6\0\11\60\14\0\46\60"+
    "\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\30\60\11\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\40\60\57\0\1\60\325\0\3\60"+
    "\31\0\17\60\1\0\5\60\2\0\5\60\4\0\126\60"+
    "\2\0\2\60\2\0\3\60\1\0\132\60\1\0\4\60"+
    "\5\0\53\60\1\0\136\60\21\0\33\60\65\0\306\60"+
    "\112\0\360\60\20\0\215\60\103\0\56\60\2\0\15\60"+
    "\3\0\20\60\12\75\2\60\24\0\63\60\1\0\12\60"+
    "\1\0\163\60\45\0\11\60\2\0\147\60\2\0\65\60"+
    "\2\0\5\60\60\0\61\60\30\0\64\60\14\0\106\60"+
    "\12\0\12\75\6\0\30\60\3\0\1\60\1\0\3\60"+
    "\12\75\44\60\2\0\44\60\14\0\35\60\3\0\101\60"+
    "\16\0\1\60\12\75\6\0\20\60\12\75\5\60\1\0"+
    "\67\60\11\0\16\60\2\0\12\75\6\0\27\60\3\0"+
    "\111\60\30\0\3\60\2\0\20\60\2\0\5\60\12\0"+
    "\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0"+
    "\7\60\1\0\53\60\1\0\14\60\10\0\173\60\1\0"+
    "\2\60\2\0\12\75\6\0\244\60\14\0\27\60\4\0"+
    "\61\60\u0104\0\156\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\14\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0"+
    "\153\60\22\0\100\60\2\0\66\60\50\0\14\60\4\0"+
    "\20\60\20\0\20\60\3\0\2\60\30\0\3\60\40\0"+
    "\5\60\1\0\207\60\23\0\12\75\7\0\32\60\4\0"+
    "\1\60\1\0\32\60\13\0\131\60\3\0\6\60\2\0"+
    "\6\60\2\0\6\60\2\0\3\60\43\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0"+
    "\16\60\42\0\173\60\105\0\65\60\210\0\1\60\202\0"+
    "\35\60\3\0\61\60\17\0\1\60\37\0\40\60\15\0"+
    "\36\60\5\0\53\60\5\0\36\60\2\0\44\60\4\0"+
    "\10\60\1\0\5\60\52\0\236\60\2\0\12\75\6\0"+
    "\44\60\4\0\44\60\4\0\50\60\10\0\64\60\234\0"+
    "\67\60\11\0\26\60\12\0\10\60\230\0\6\60\2\0"+
    "\1\60\1\0\54\60\1\0\2\60\3\0\1\60\2\0"+
    "\27\60\12\0\27\60\11\0\37\60\101\0\23\60\1\0"+
    "\2\60\12\0\26\60\12\0\32\60\106\0\70\60\6\0"+
    "\2\60\100\0\4\60\1\0\2\60\5\0\10\60\1\0"+
    "\3\60\1\0\35\60\2\0\3\60\4\0\1\60\40\0"+
    "\35\60\3\0\35\60\43\0\10\60\1\0\36\60\31\0"+
    "\66\60\12\0\26\60\12\0\23\60\15\0\22\60\156\0"+
    "\111\60\67\0\63\60\15\0\63\60\15\0\50\60\10\0"+
    "\12\75\306\0\35\60\12\0\1\60\10\0\41\60\217\0"+
    "\27\60\11\0\107\60\37\0\12\75\17\0\74\60\25\0"+
    "\31\60\7\0\12\75\6\0\65\60\1\0\12\75\4\0"+
    "\3\60\11\0\44\60\2\0\1\60\11\0\105\60\4\0"+
    "\4\60\3\0\12\75\1\60\1\0\1\60\43\0\22\60"+
    "\1\0\45\60\6\0\1\60\101\0\7\60\1\0\1\60"+
    "\1\0\4\60\1\0\17\60\1\0\12\60\7\0\73\60"+
    "\5\0\12\75\6\0\4\60\1\0\10\60\2\0\2\60"+
    "\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\1\0\12\60\2\0\2\60\2\0\3\60\2\0\1\60"+
    "\6\0\1\60\5\0\7\60\2\0\7\60\3\0\5\60"+
    "\213\0\113\60\5\0\12\75\4\0\2\60\40\0\106\60"+
    "\1\0\1\60\10\0\12\75\246\0\66\60\2\0\11\60"+
    "\27\0\6\60\42\0\101\60\3\0\1\60\13\0\12\75"+
    "\46\0\71\60\7\0\12\75\66\0\33\60\2\0\17\60"+
    "\4\0\12\75\306\0\73\60\145\0\100\60\12\75\25\0"+
    "\1\60\240\0\10\60\2\0\56\60\2\0\10\60\1\0"+
    "\2\60\33\0\77\60\10\0\1\60\10\0\112\60\3\0"+
    "\1\60\42\0\71\60\7\0\11\60\1\0\55\60\1\0"+
    "\11\60\17\0\12\75\30\0\36\60\2\0\26\60\1\0"+
    "\16\60\111\0\7\60\1\0\2\60\1\0\54\60\3\0"+
    "\1\60\1\0\2\60\1\0\11\60\10\0\12\75\6\0"+
    "\6\60\1\0\2\60\1\0\45\60\1\0\2\60\1\0"+
    "\6\60\7\0\12\75\u0136\0\27\60\11\0\232\60\146\0"+
    "\157\60\21\0\304\60\274\0\57\60\321\0\107\60\271\0"+
    "\71\60\7\0\37\60\1\0\12\75\146\0\36\60\2\0"+
    "\5\60\13\0\67\60\11\0\4\60\14\0\12\75\11\0"+
    "\25\60\5\0\23\60\260\0\100\60\200\0\113\60\4\0"+
    "\71\60\7\0\21\60\100\0\2\60\1\0\1\60\34\0"+
    "\370\60\10\0\363\60\15\0\37\60\61\0\3\60\21\0"+
    "\4\60\10\0\u018c\60\4\0\153\60\5\0\15\60\3\0"+
    "\11\60\7\0\12\60\3\0\2\60\306\0\5\60\3\0"+
    "\6\60\10\0\10\60\2\0\7\60\36\0\4\60\224\0"+
    "\3\60\273\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0"+
    "\1\60\1\0\7\60\1\0\101\60\1\0\4\60\2\0"+
    "\10\60\1\0\7\60\1\0\34\60\1\0\4\60\1\0"+
    "\5\60\1\0\1\60\3\0\7\60\1\0\u0154\60\2\0"+
    "\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\10\60\2\0\62\75\67\60"+
    "\4\0\62\60\10\0\1\60\16\0\1\60\26\0\5\60"+
    "\1\0\17\60\120\0\7\60\1\0\21\60\2\0\7\60"+
    "\1\0\2\60\1\0\5\60\325\0\55\60\3\0\16\60"+
    "\2\0\12\75\4\0\1\60\u0171\0\60\60\12\75\6\0"+
    "\305\60\13\0\7\60\51\0\114\60\4\0\12\75\246\0"+
    "\4\60\1\0\33\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\12\60\1\0\4\60\1\0\1\60\1\0"+
    "\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\2\60\1\0\1\60\2\0\4\60\1\0"+
    "\7\60\1\0\4\60\1\0\4\60\1\0\1\60\1\0"+
    "\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\164\0\32\60\6\0\32\60\6\0\32\60\166\0"+
    "\327\60\51\0\65\60\13\0\336\60\2\0\u0182\60\16\0"+
    "\u0131\60\37\0\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\1\1\2\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\2\1\1\3\1\10"+
    "\1\11\11\10\1\12\1\13\2\14\1\15\2\14\1\16"+
    "\1\17\3\16\1\20\1\4\1\21\1\4\1\22\1\23"+
    "\1\6\1\24\1\25\13\24\1\26\1\27\3\26\1\30"+
    "\1\31\1\4\1\32\1\33\1\34\3\33\1\4\7\33"+
    "\1\35\2\36\2\35\1\37\1\40\1\41\7\40\1\14"+
    "\1\42\1\20\1\43\3\20\1\44\1\45\2\44\1\46"+
    "\2\44\1\47\1\4\4\44\1\50\1\51\1\52\1\4"+
    "\2\51\1\53\1\4\1\54\3\4\1\55\1\56\1\57"+
    "\1\60\1\4\1\61\1\62\3\61\1\63\1\64\2\65"+
    "\2\64\4\65\1\66\1\0\1\67\1\1\1\70\1\1"+
    "\1\3\1\0\1\1\1\0\1\71\1\72\1\0\1\72"+
    "\1\1\11\10\1\73\3\10\1\14\1\0\1\16\1\74"+
    "\1\16\1\0\1\16\1\4\1\75\1\0\1\76\1\24"+
    "\1\0\12\24\1\77\3\24\1\0\1\100\1\26\1\0"+
    "\3\26\1\101\1\0\1\102\2\33\1\0\1\33\1\0"+
    "\1\103\1\104\1\33\1\105\1\33\1\106\3\33\1\0"+
    "\1\107\1\35\1\0\1\35\1\0\1\110\1\40\1\0"+
    "\11\40\1\67\2\44\1\110\2\44\1\111\5\44\1\112"+
    "\1\51\1\112\1\113\1\114\1\0\2\115\1\4\1\116"+
    "\1\117\1\0\1\120\1\61\1\121\1\61\1\0\1\61"+
    "\2\64\1\65\1\67\1\0\1\67\1\0\1\67\1\122"+
    "\1\123\1\72\1\71\7\10\1\124\2\10\1\125\1\10"+
    "\1\16\2\0\1\76\1\0\1\76\1\0\1\76\7\24"+
    "\1\126\2\24\1\127\1\24\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\130\1\131\1\102\1\0\1\102\1\132"+
    "\1\0\1\102\5\33\1\107\1\0\1\107\1\0\1\107"+
    "\1\110\1\0\1\110\1\0\1\110\1\40\1\133\2\40"+
    "\2\67\2\110\1\111\1\112\1\134\3\135\1\120\1\0"+
    "\1\120\1\0\1\120\1\136\2\67\1\123\2\10\1\137"+
    "\1\140\1\141\1\10\1\142\1\143\1\144\2\10\2\16"+
    "\2\76\2\24\1\145\1\146\1\147\1\24\1\150\1\151"+
    "\1\152\2\24\2\100\2\102\1\33\1\0\3\33\2\107"+
    "\2\110\3\40\2\120\1\153\1\154\2\10\1\155\1\156"+
    "\1\157\2\24\1\160\1\33\1\161\1\0\2\33\2\40"+
    "\1\162\2\10\2\24\1\33\1\161\2\33\2\40\2\10"+
    "\2\24\1\161\1\0\1\33\1\40\1\163\1\164\1\165"+
    "\1\166\2\161\1\40\1\0\1\40\1\161\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u081f\0\u085e\0\u089d\0\u081f\0\u08dc\0\u091b"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u081f\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u081f\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u081f"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u081f\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u0627\0\u29d6\0\u0627\0\u2a15\0\u081f\0\u2a54\0\u2a93\0\u2ad2"+
    "\0\u081f\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b"+
    "\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u09d8\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u081f\0\u2f01\0\u2f40\0\u0e07\0\u2f7f\0\u2fbe"+
    "\0\u2ffd\0\u303c\0\u0f42\0\u307b\0\u107d\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u107d\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u13b0\0\u34aa"+
    "\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u0f42\0\u35e5\0\u15e7\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u1722\0\u1722\0\u15e7\0\u3720\0\u15e7"+
    "\0\u375f\0\u15e7\0\u379e\0\u37dd\0\u381c\0\u385b\0\u191a\0\u389a"+
    "\0\u38d9\0\u3918\0\u3957\0\u1a55\0\u3996\0\u39d5\0\u3a14\0\u3a53"+
    "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u1e45"+
    "\0\u3c4b\0\u3c8a\0\u1e45\0\u3cc9\0\u3d08\0\u081f\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u2235\0\u3e82\0\u21b7\0\u3ec1\0\u081f"+
    "\0\u3f00\0\u081f\0\u246c\0\u3f3f\0\u081f\0\u0f42\0\u3f7e\0\u25a7"+
    "\0\u3fbd\0\u25a7\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u081f"+
    "\0\u081f\0\u4137\0\u06e4\0\u4176\0\u07a1\0\u2ad2\0\u081f\0\u41b5"+
    "\0\u0627\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e"+
    "\0\u09d8\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u081f\0\u44a9\0\u44e8"+
    "\0\u081f\0\u4527\0\u10fb\0\u4566\0\u113a\0\u45a5\0\u45e4\0\u4623"+
    "\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u107d\0\u475e\0\u479d\0\u47dc"+
    "\0\u481b\0\u081f\0\u485a\0\u142e\0\u4899\0\u146d\0\u48d8\0\u4917"+
    "\0\u081f\0\u081f\0\u4956\0\u1665\0\u15e7\0\u4995\0\u16e3\0\u49d4"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u081f\0\u4b0f\0\u19d7\0\u4b4e"+
    "\0\u1a16\0\u081f\0\u4b8d\0\u1ad3\0\u4bcc\0\u1b12\0\u4c0b\0\u1a55"+
    "\0\u4c4a\0\u4c89\0\u1ec3\0\u1f02\0\u1f80\0\u1fbf\0\u1e45\0\u3e82"+
    "\0\u081f\0\u2331\0\u4cc8\0\u081f\0\u081f\0\u4d07\0\u2625\0\u4d46"+
    "\0\u26a3\0\u2721\0\u2997\0\u2a54\0\u2b11\0\u4d85\0\u4dc4\0\u09d8"+
    "\0\u09d8\0\u09d8\0\u4e03\0\u09d8\0\u09d8\0\u09d8\0\u4e42\0\u4e81"+
    "\0\u2f01\0\u2fbe\0\u307b\0\u30f9\0\u4ec0\0\u4eff\0\u107d\0\u107d"+
    "\0\u107d\0\u4f3e\0\u107d\0\u107d\0\u107d\0\u4f7d\0\u4fbc\0\u346b"+
    "\0\u34e9\0\u35e5\0\u36a2\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7"+
    "\0\u385b\0\u38d9\0\u3957\0\u39d5\0\u5136\0\u5175\0\u51b4\0\u3f7e"+
    "\0\u403b\0\u09d8\0\u09d8\0\u51f3\0\u5232\0\u09d8\0\u107d\0\u107d"+
    "\0\u5271\0\u52b0\0\u107d\0\u52ef\0\u081f\0\u532e\0\u536d\0\u53ac"+
    "\0\u53eb\0\u542a\0\u1a55\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565"+
    "\0\u532e\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df\0\u571e"+
    "\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u09d8\0\u09d8\0\u107d"+
    "\0\u107d\0\u5898\0\u15e7\0\u58d7\0\u5916\0\u5955\0\u5994\0\u1a55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\32\1\33\1\34\1\0\1\32\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\32\2\43\4\32\1\44\1\43"+
    "\1\45\1\46\1\47\1\50\21\32\1\51\15\32\1\51"+
    "\1\32\1\52\5\32\1\53\1\54\2\0\3\53\1\43"+
    "\1\53\2\43\1\53\2\43\4\53\5\43\1\53\1\55"+
    "\1\56\1\57\1\53\1\60\1\61\1\62\1\53\1\63"+
    "\3\53\1\64\5\53\1\65\6\53\1\55\1\57\1\53"+
    "\1\61\3\53\1\65\1\43\1\53\1\63\1\65\2\53"+
    "\1\66\1\67\1\34\1\0\3\66\1\70\1\66\2\43"+
    "\1\66\2\43\4\66\2\43\1\71\1\72\1\73\42\66"+
    "\1\74\5\66\1\75\1\76\1\34\1\0\1\75\1\77"+
    "\1\100\1\70\1\101\2\43\1\75\2\43\4\75\2\43"+
    "\1\71\1\102\1\73\42\75\1\74\5\75\1\103\1\104"+
    "\1\34\1\0\3\103\1\70\1\103\2\43\1\103\2\43"+
    "\4\103\2\43\1\71\1\43\1\73\17\103\1\105\22\103"+
    "\1\74\5\103\1\106\1\107\1\34\1\0\3\106\1\43"+
    "\1\106\2\43\1\106\2\43\4\106\1\110\4\43\42\106"+
    "\1\43\5\106\1\111\1\112\1\34\1\0\1\111\1\113"+
    "\1\111\1\70\1\114\2\43\1\111\2\43\4\111\2\43"+
    "\1\71\1\43\1\73\1\111\1\115\1\116\1\117\1\111"+
    "\1\120\1\121\1\122\1\111\1\123\3\111\1\124\5\111"+
    "\1\125\6\111\1\115\1\117\1\111\1\121\3\111\1\125"+
    "\1\74\1\111\1\123\1\125\2\111\1\126\1\127\1\34"+
    "\1\0\1\126\1\130\1\126\1\70\1\131\2\43\1\126"+
    "\2\43\4\126\2\43\1\71\1\43\1\73\17\126\1\132"+
    "\22\126\1\74\6\126\1\133\1\34\1\0\1\126\1\130"+
    "\1\126\1\70\1\131\2\43\1\126\2\43\4\126\2\43"+
    "\1\71\1\43\1\73\42\126\1\74\5\126\1\103\1\134"+
    "\1\34\1\0\3\103\1\70\1\103\2\43\1\103\2\43"+
    "\1\103\1\135\2\136\2\43\1\71\1\43\1\73\42\103"+
    "\1\74\5\103\1\137\1\140\1\34\1\0\1\137\1\141"+
    "\1\142\1\70\1\143\1\144\1\43\1\137\2\43\1\137"+
    "\1\145\2\137\2\43\1\71\1\43\1\73\4\137\1\146"+
    "\1\147\3\137\1\150\11\137\1\151\1\152\1\153\6\137"+
    "\1\146\4\137\1\151\1\74\1\137\1\150\1\151\2\137"+
    "\1\154\1\155\1\156\1\0\1\154\1\157\1\154\1\43"+
    "\1\160\1\43\1\161\1\154\2\43\4\154\5\43\42\154"+
    "\1\43\5\154\1\162\1\163\1\34\1\0\1\162\1\164"+
    "\1\162\1\43\1\165\2\43\1\162\2\43\4\162\5\43"+
    "\4\162\1\166\1\167\1\162\1\170\4\162\1\171\1\162"+
    "\1\172\15\162\1\166\1\162\1\171\3\162\1\43\5\162"+
    "\1\173\1\174\1\34\1\0\3\173\1\175\1\173\1\41"+
    "\1\43\1\173\2\43\2\173\2\176\2\43\1\177\1\43"+
    "\1\200\42\173\1\201\5\173\1\202\1\203\1\34\1\0"+
    "\1\202\1\204\1\202\1\175\1\205\1\41\1\43\1\202"+
    "\2\43\4\202\2\43\1\177\1\43\1\200\42\202\1\201"+
    "\6\202\1\206\1\34\1\0\1\202\1\207\1\202\1\175"+
    "\1\210\1\41\1\43\1\202\2\43\2\202\2\211\2\43"+
    "\1\177\1\212\1\200\5\202\1\213\1\202\1\214\4\202"+
    "\1\215\1\202\1\216\17\202\1\215\3\202\1\201\5\202"+
    "\1\106\1\217\1\34\1\0\3\106\1\43\1\106\2\43"+
    "\1\106\2\43\4\106\5\43\42\106\1\43\5\106\1\220"+
    "\1\221\1\34\1\0\3\220\1\70\1\220\2\43\1\220"+
    "\1\222\1\43\1\220\1\223\2\220\2\43\1\71\1\43"+
    "\1\73\1\220\27\224\2\220\10\224\1\74\5\220\2\225"+
    "\1\34\74\225\1\226\1\227\1\34\1\0\3\226\1\43"+
    "\1\226\2\43\1\230\1\231\1\43\1\230\1\232\2\226"+
    "\3\43\1\233\1\43\42\226\1\43\5\226\1\234\1\235"+
    "\1\34\1\0\3\234\1\70\1\234\2\43\1\234\2\43"+
    "\4\234\2\43\1\71\1\43\1\73\42\234\1\74\5\234"+
    "\1\103\1\236\1\34\1\0\3\103\1\70\1\103\2\43"+
    "\1\103\2\43\1\103\1\237\2\103\2\43\1\71\1\43"+
    "\1\73\42\103\1\74\5\103\1\240\1\241\1\34\1\0"+
    "\1\240\1\242\1\243\1\70\1\244\2\43\1\240\2\43"+
    "\2\240\2\245\2\43\1\71\1\102\1\73\42\240\1\74"+
    "\5\240\1\246\1\247\1\250\1\0\1\251\1\246\1\252"+
    "\1\253\1\246\2\43\1\246\2\43\4\246\2\43\1\254"+
    "\1\43\1\255\42\246\1\256\5\246\1\103\1\257\2\0"+
    "\3\103\1\43\1\103\2\43\1\103\2\43\4\103\5\43"+
    "\42\103\1\43\5\103\1\32\3\0\3\32\1\0\1\32"+
    "\2\0\1\32\2\0\4\32\5\0\42\32\1\0\5\32"+
    "\1\0\1\33\77\0\1\34\74\0\1\35\1\260\1\0"+
    "\1\260\1\35\1\261\1\35\1\260\1\35\2\260\1\35"+
    "\2\260\4\35\5\260\30\35\1\262\11\35\1\260\5\35"+
    "\1\32\3\0\3\32\1\0\1\32\2\0\1\32\2\0"+
    "\2\32\2\263\5\0\42\32\1\0\1\264\4\32\7\0"+
    "\1\265\67\0\1\40\1\266\1\0\1\266\3\40\1\266"+
    "\1\261\2\266\1\40\2\266\4\40\5\266\30\40\1\267"+
    "\11\40\1\266\5\40\77\270\121\0\1\271\100\0\1\265"+
    "\100\0\1\265\50\0\1\272\3\0\3\272\1\0\1\272"+
    "\2\0\1\272\2\0\4\272\1\273\4\0\22\272\1\274"+
    "\15\272\1\274\1\272\1\0\5\272\1\32\3\0\3\32"+
    "\1\0\1\32\2\0\1\32\2\0\4\32\5\0\5\32"+
    "\1\275\34\32\1\0\5\32\71\0\1\265\5\0\1\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\42\53\1\0\5\53\1\0\1\54\75\0\1\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\23\53\1\276\15\53\1\276\1\0\2\53\1\276"+
    "\3\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\22\53\1\277\15\53\1\277\1\53\1\0"+
    "\6\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\1\53\1\300\30\53\1\300\7\53\1\0"+
    "\6\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\3\53\1\301\10\53\1\302\1\53\1\303"+
    "\10\53\1\304\3\53\1\301\2\53\1\302\3\53\1\0"+
    "\6\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\17\53\1\305\22\53\1\0\6\53\3\0"+
    "\3\53\1\0\1\53\2\0\1\53\2\0\4\53\5\0"+
    "\17\53\1\306\22\53\1\0\6\53\3\0\3\53\1\0"+
    "\1\53\2\0\1\53\2\0\4\53\5\0\6\53\1\307"+
    "\26\53\1\307\4\53\1\0\6\53\3\0\3\53\1\0"+
    "\1\53\2\0\1\53\2\0\4\53\5\0\17\53\1\310"+
    "\22\53\1\0\6\53\3\0\3\53\1\0\1\53\2\0"+
    "\1\53\2\0\4\53\5\0\5\53\1\311\2\53\1\312"+
    "\31\53\1\0\5\53\1\66\3\0\3\66\1\0\1\66"+
    "\2\0\1\66\2\0\4\66\5\0\42\66\1\0\5\66"+
    "\1\0\1\67\104\0\1\313\113\0\1\313\100\0\1\313"+
    "\141\0\1\313\5\0\1\75\3\0\3\75\1\0\1\75"+
    "\2\0\1\75\2\0\4\75\5\0\42\75\1\0\5\75"+
    "\1\0\1\76\75\0\1\77\1\314\1\0\1\314\1\77"+
    "\1\75\1\77\1\314\1\77\2\314\1\77\2\314\4\77"+
    "\5\314\30\77\1\315\11\77\1\314\5\77\1\75\3\0"+
    "\3\75\1\0\1\75\2\0\1\75\2\0\2\75\2\316"+
    "\5\0\42\75\1\0\1\317\4\75\1\101\1\320\1\0"+
    "\1\320\3\101\1\320\1\75\2\320\1\101\2\320\4\101"+
    "\5\320\30\101\1\321\11\101\1\320\5\101\1\103\3\0"+
    "\3\103\1\0\1\103\2\0\1\103\2\0\4\103\5\0"+
    "\42\103\1\0\5\103\1\0\1\104\75\0\1\103\3\0"+
    "\3\103\1\0\1\103\2\0\1\103\2\0\4\103\5\0"+
    "\6\103\1\322\7\103\1\323\16\103\1\322\4\103\1\0"+
    "\5\103\1\106\3\0\3\106\1\0\1\106\2\0\1\106"+
    "\2\0\4\106\5\0\42\106\1\0\5\106\1\0\1\107"+
    "\75\0\1\111\3\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\4\111\5\0\42\111\1\0\5\111\1\0\1\112"+
    "\75\0\1\113\1\324\1\0\1\324\1\113\1\325\1\113"+
    "\1\324\1\113\2\324\1\113\2\324\4\113\5\324\30\113"+
    "\1\326\11\113\1\324\5\113\1\114\1\327\1\0\1\327"+
    "\3\114\1\327\1\325\2\327\1\114\2\327\4\114\5\327"+
    "\30\114\1\330\11\114\1\327\5\114\1\111\3\0\3\111"+
    "\1\0\1\111\2\0\1\111\2\0\4\111\5\0\23\111"+
    "\1\331\15\111\1\331\1\0\2\111\1\331\3\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\22\111\1\332\15\111\1\332\1\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\1\111\1\333\30\111\1\333\7\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\3\111\1\334\10\111\1\335\1\111\1\336\10\111\1\337"+
    "\3\111\1\334\2\111\1\335\3\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\17\111\1\340\22\111\1\0\6\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\17\111\1\341"+
    "\22\111\1\0\6\111\3\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\4\111\5\0\6\111\1\342\26\111\1\342"+
    "\4\111\1\0\6\111\3\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\4\111\5\0\17\111\1\343\22\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\5\111\1\344\2\111\1\345\31\111\1\0"+
    "\5\111\1\126\3\0\3\126\1\0\1\126\2\0\1\126"+
    "\2\0\4\126\5\0\42\126\1\0\5\126\1\0\1\127"+
    "\75\0\1\130\1\346\1\0\1\346\1\130\1\347\1\130"+
    "\1\346\1\130\2\346\1\130\2\346\4\130\5\346\30\130"+
    "\1\350\11\130\1\346\5\130\1\131\1\351\1\0\1\351"+
    "\3\131\1\351\1\347\2\351\1\131\2\351\4\131\5\351"+
    "\30\131\1\352\11\131\1\351\5\131\1\126\3\0\3\126"+
    "\1\0\1\126\2\0\1\126\2\0\4\126\5\0\6\126"+
    "\1\353\7\126\1\354\16\126\1\353\4\126\1\0\5\126"+
    "\1\0\1\133\76\0\1\134\75\0\1\103\3\0\3\103"+
    "\1\0\1\103\2\0\1\103\2\0\4\103\5\0\2\103"+
    "\1\355\37\103\1\0\6\103\3\0\3\103\1\0\1\103"+
    "\2\0\1\103\2\0\2\103\2\136\5\0\42\103\1\0"+
    "\5\103\1\137\3\0\3\137\1\0\1\137\2\0\1\137"+
    "\2\0\4\137\5\0\42\137\1\0\5\137\1\0\1\140"+
    "\75\0\1\141\1\356\1\0\1\356\1\141\1\357\1\141"+
    "\1\356\1\141\2\356\1\141\2\356\4\141\5\356\30\141"+
    "\1\360\11\141\1\356\5\141\1\137\3\0\2\137\1\361"+
    "\1\0\1\137\2\0\1\137\2\0\4\137\5\0\42\137"+
    "\1\0\5\137\1\143\1\362\1\0\1\362\3\143\1\362"+
    "\1\357\2\362\1\143\2\362\4\143\5\362\30\143\1\363"+
    "\11\143\1\362\5\143\12\364\1\365\64\364\1\137\3\0"+
    "\3\137\1\0\1\137\2\0\1\137\2\0\4\137\5\0"+
    "\34\137\3\366\1\137\1\366\1\137\1\0\6\137\3\0"+
    "\3\137\1\0\1\137\2\0\1\137\2\0\4\137\5\0"+
    "\5\137\1\367\11\137\1\370\22\137\1\0\6\137\3\0"+
    "\3\137\1\0\1\137\2\0\1\137\2\0\4\137\5\0"+
    "\17\137\1\371\22\137\1\0\6\137\3\0\3\137\1\0"+
    "\1\137\2\0\1\137\2\0\4\137\5\0\16\137\1\372"+
    "\23\137\1\0\6\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\5\0\13\137\1\373\26\137\1\0"+
    "\4\137\1\373\1\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\5\0\17\137\1\374\22\137\1\0"+
    "\6\137\3\0\3\137\1\0\1\137\2\0\1\137\2\0"+
    "\4\137\5\0\23\137\1\375\15\137\1\375\1\0\2\137"+
    "\1\375\2\137\1\154\3\0\3\154\1\0\1\154\2\0"+
    "\1\154\2\0\4\154\5\0\42\154\1\0\5\154\1\0"+
    "\1\155\77\0\1\156\74\0\1\157\1\376\1\0\1\376"+
    "\1\157\1\377\1\157\1\376\1\157\2\376\1\157\2\376"+
    "\4\157\5\376\30\157\1\u0100\11\157\1\376\5\157\1\160"+
    "\1\u0101\1\0\1\u0101\3\160\1\u0101\1\377\2\u0101\1\160"+
    "\2\u0101\4\160\5\u0101\30\160\1\u0102\11\160\1\u0101\5\160"+
    "\1\162\3\0\3\162\1\0\1\162\2\0\1\162\2\0"+
    "\4\162\5\0\42\162\1\0\5\162\1\0\1\163\75\0"+
    "\1\164\1\u0103\1\0\1\u0103\1\164\1\u0104\1\164\1\u0103"+
    "\1\164\2\u0103\1\164\2\u0103\4\164\5\u0103\30\164\1\u0105"+
    "\11\164\1\u0103\5\164\1\165\1\u0106\1\0\1\u0106\3\165"+
    "\1\u0106\1\u0104\2\u0106\1\165\2\u0106\4\165\5\u0106\30\165"+
    "\1\u0107\11\165\1\u0106\5\165\1\162\3\0\3\162\1\0"+
    "\1\162\2\0\1\162\2\0\4\162\5\0\5\162\1\u0108"+
    "\34\162\1\0\6\162\3\0\3\162\1\0\1\162\2\0"+
    "\1\162\2\0\4\162\5\0\21\162\1\u0109\1\u010a\4\162"+
    "\1\u010b\10\162\1\u010a\1\162\1\0\6\162\3\0\3\162"+
    "\1\0\1\162\2\0\1\162\2\0\4\162\5\0\5\162"+
    "\1\u010c\16\162\1\u010d\15\162\1\0\6\162\3\0\3\162"+
    "\1\0\1\162\2\0\1\162\2\0\4\162\5\0\5\162"+
    "\1\u010c\15\162\1\u010e\15\162\1\u010e\1\0\2\162\1\u010e"+
    "\3\162\3\0\3\162\1\0\1\162\2\0\1\162\2\0"+
    "\4\162\5\0\5\162\1\u010c\11\162\1\u010f\22\162\1\0"+
    "\5\162\1\173\3\0\3\173\1\0\1\173\2\0\1\173"+
    "\2\0\4\173\5\0\42\173\1\0\5\173\1\0\1\174"+
    "\104\0\1\102\67\0\1\173\3\0\3\173\1\0\1\173"+
    "\2\0\1\173\2\0\2\173\2\176\5\0\42\173\1\0"+
    "\5\173\24\0\1\102\100\0\1\102\141\0\1\102\5\0"+
    "\1\202\3\0\3\202\1\0\1\202\2\0\1\202\2\0"+
    "\4\202\5\0\42\202\1\0\5\202\1\0\1\203\75\0"+
    "\1\204\1\260\1\0\1\260\1\204\1\u0110\1\204\1\260"+
    "\1\204\2\260\1\204\2\260\4\204\5\260\30\204\1\u0111"+
    "\11\204\1\260\5\204\1\205\1\266\1\0\1\266\3\205"+
    "\1\266\1\u0110\2\266\1\205\2\266\4\205\5\266\30\205"+
    "\1\u0112\11\205\1\266\5\205\1\0\1\206\75\0\1\207"+
    "\1\u0103\1\0\1\u0103\1\207\1\u0113\1\207\1\u0103\1\207"+
    "\2\u0103\1\207\2\u0103\4\207\5\u0103\30\207\1\u0114\11\207"+
    "\1\u0103\5\207\1\210\1\u0106\1\0\1\u0106\3\210\1\u0106"+
    "\1\u0113\2\u0106\1\210\2\u0106\4\210\5\u0106\30\210\1\u0115"+
    "\11\210\1\u0106\5\210\1\202\3\0\3\202\1\0\1\202"+
    "\2\0\1\202\2\0\2\202\2\211\5\0\42\202\1\0"+
    "\5\202\25\0\1\u0116\51\0\1\202\3\0\3\202\1\0"+
    "\1\202\2\0\1\202\2\0\4\202\5\0\21\202\1\u0117"+
    "\20\202\1\0\6\202\3\0\3\202\1\0\1\202\2\0"+
    "\1\202\2\0\4\202\5\0\5\202\1\u0118\16\202\1\u0119"+
    "\15\202\1\0\6\202\3\0\3\202\1\0\1\202\2\0"+
    "\1\202\2\0\4\202\5\0\5\202\1\u0118\15\202\1\u011a"+
    "\15\202\1\u011a\1\0\2\202\1\u011a\3\202\3\0\3\202"+
    "\1\0\1\202\2\0\1\202\2\0\4\202\5\0\5\202"+
    "\1\u0118\11\202\1\u011b\22\202\1\0\5\202\1\0\1\217"+
    "\75\0\1\220\3\0\3\220\1\0\1\220\2\0\1\220"+
    "\2\0\4\220\5\0\42\220\1\0\5\220\1\0\1\221"+
    "\115\0\2\u011c\55\0\1\220\3\0\3\220\1\0\1\220"+
    "\2\0\1\220\2\0\4\220\5\0\24\220\1\u011d\6\220"+
    "\1\u011e\3\220\1\u011e\1\220\1\u011e\1\0\6\220\3\0"+
    "\3\220\1\0\1\220\2\0\1\220\2\0\4\220\1\u011f"+
    "\4\0\1\220\27\224\2\220\10\224\1\0\5\220\2\225"+
    "\1\0\74\225\1\226\1\u0120\2\0\3\226\1\0\1\226"+
    "\2\0\1\226\1\u0121\1\0\4\226\3\0\1\u0122\1\0"+
    "\42\226\1\0\5\226\1\0\1\227\75\0\1\226\1\u0120"+
    "\2\0\3\226\1\0\1\226\2\0\1\226\1\u0121\1\0"+
    "\4\226\3\0\1\u0123\1\0\42\226\1\0\5\226\25\0"+
    "\1\233\51\0\1\226\1\u0120\2\0\3\226\1\0\1\226"+
    "\2\0\1\226\1\u0121\1\0\4\226\3\0\1\u0123\1\0"+
    "\32\226\1\u0124\4\226\1\u0124\2\226\1\0\5\226\1\0"+
    "\1\u0125\75\0\1\234\3\0\3\234\1\0\1\234\2\0"+
    "\1\234\2\0\4\234\5\0\42\234\1\0\5\234\1\0"+
    "\1\235\76\0\1\236\75\0\1\103\3\0\3\103\1\0"+
    "\1\103\2\0\1\103\2\0\2\103\1\u0126\1\103\5\0"+
    "\42\103\1\0\5\103\1\240\3\0\3\240\1\0\1\240"+
    "\2\0\1\240\2\0\4\240\5\0\42\240\1\0\5\240"+
    "\1\0\1\241\75\0\1\242\1\u0127\1\0\1\u0127\1\242"+
    "\1\u0128\1\242\1\u0127\1\242\2\u0127\1\242\2\u0127\4\242"+
    "\5\u0127\30\242\1\u0129\11\242\1\u0127\5\242\1\240\3\0"+
    "\3\240\1\0\1\240\2\0\1\240\2\0\2\240\2\u012a"+
    "\5\0\42\240\1\0\1\u012b\4\240\1\244\1\u012c\1\0"+
    "\1\u012c\3\244\1\u012c\1\u0128\2\u012c\1\244\2\u012c\4\244"+
    "\5\u012c\30\244\1\u012d\11\244\1\u012c\5\244\1\240\3\0"+
    "\3\240\1\0\1\240\2\0\1\240\2\0\2\240\2\245"+
    "\5\0\42\240\1\0\5\240\1\246\3\0\3\246\1\0"+
    "\1\246\2\0\1\246\2\0\4\246\5\0\42\246\1\0"+
    "\5\246\1\0\1\247\77\0\1\250\74\0\1\246\3\0"+
    "\3\246\1\0\1\246\2\0\1\246\2\0\2\246\2\u012e"+
    "\5\0\1\246\27\u012e\1\246\11\u012e\1\0\1\246\4\u012e"+
    "\1\246\3\0\3\246\1\0\1\246\2\0\1\246\2\0"+
    "\2\246\2\u012f\5\0\1\246\27\u012f\1\246\11\u012f\1\0"+
    "\1\246\4\u012f\7\0\1\u0130\113\0\1\u0130\100\0\1\u0130"+
    "\141\0\1\u0130\6\0\1\257\75\0\2\260\1\0\2\260"+
    "\1\u0131\51\260\1\u0132\17\260\1\35\1\260\1\0\1\260"+
    "\1\35\1\u0133\1\35\1\260\1\35\2\260\1\35\2\260"+
    "\4\35\5\260\30\35\1\262\11\35\1\260\5\35\1\32"+
    "\3\0\3\32\1\0\1\32\2\0\1\32\2\0\2\32"+
    "\2\263\5\0\42\32\1\0\5\32\2\266\1\0\5\266"+
    "\1\u0131\46\266\1\u0134\17\266\1\40\1\266\1\0\1\266"+
    "\3\40\1\266\1\u0135\2\266\1\40\2\266\4\40\5\266"+
    "\30\40\1\267\11\40\1\266\5\40\12\270\1\u0136\64\270"+
    "\1\272\3\0\3\272\1\0\1\272\2\0\1\272\2\0"+
    "\4\272\5\0\42\272\1\0\5\272\22\0\1\u0137\54\0"+
    "\1\272\3\0\3\272\1\0\1\272\2\0\1\272\2\0"+
    "\4\272\5\0\5\272\1\u0138\34\272\1\0\5\272\1\32"+
    "\3\0\3\32\1\0\1\32\2\0\1\32\2\0\4\32"+
    "\5\0\15\32\1\u0139\24\32\1\0\5\32\1\53\3\0"+
    "\3\53\1\0\1\53\2\0\1\53\2\0\4\53\5\0"+
    "\23\53\1\u013a\15\53\1\u013a\1\0\2\53\1\u013a\3\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\5\53\1\u013b\34\53\1\0\6\53\3\0\3\53"+
    "\1\0\1\53\2\0\1\53\2\0\4\53\5\0\14\53"+
    "\1\u013c\21\53\1\u013c\3\53\1\0\6\53\3\0\3\53"+
    "\1\0\1\53\2\0\1\53\2\0\4\53\5\0\10\53"+
    "\1\u013d\31\53\1\0\6\53\3\0\3\53\1\0\1\53"+
    "\2\0\1\53\2\0\4\53\5\0\23\53\1\u013e\15\53"+
    "\1\u013e\1\0\2\53\1\u013e\3\53\3\0\3\53\1\0"+
    "\1\53\2\0\1\53\2\0\4\53\5\0\4\53\1\u013f"+
    "\27\53\1\u013f\5\53\1\0\6\53\3\0\3\53\1\0"+
    "\1\53\2\0\1\53\2\0\4\53\5\0\11\53\1\u0140"+
    "\30\53\1\0\1\53\1\u0140\4\53\3\0\3\53\1\0"+
    "\1\53\2\0\1\53\2\0\4\53\5\0\22\53\1\u0141"+
    "\15\53\1\u0141\1\53\1\0\6\53\3\0\3\53\1\0"+
    "\1\53\2\0\1\53\2\0\4\53\5\0\24\53\1\u0142"+
    "\15\53\1\0\6\53\3\0\3\53\1\0\1\53\2\0"+
    "\1\53\2\0\4\53\5\0\22\53\1\u0143\15\53\1\u0143"+
    "\1\53\1\0\6\53\3\0\3\53\1\0\1\53\2\0"+
    "\1\53\2\0\4\53\5\0\24\53\1\u0144\15\53\1\0"+
    "\6\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\11\53\1\u0145\30\53\1\0\1\53\1\u0145"+
    "\3\53\2\314\1\0\2\314\1\u0146\51\314\1\u0147\17\314"+
    "\1\77\1\314\1\0\1\314\3\77\1\314\1\77\2\314"+
    "\1\77\2\314\4\77\5\314\30\77\1\315\11\77\1\314"+
    "\5\77\1\75\3\0\3\75\1\0\1\75\2\0\1\75"+
    "\2\0\2\75\2\316\5\0\42\75\1\0\5\75\2\320"+
    "\1\0\5\320\1\u0146\46\320\1\u0148\17\320\1\101\1\320"+
    "\1\0\1\320\3\101\1\320\1\101\2\320\1\101\2\320"+
    "\4\101\5\320\30\101\1\321\11\101\1\320\5\101\1\103"+
    "\3\0\3\103\1\0\1\103\2\0\1\103\2\0\4\103"+
    "\5\0\6\103\1\323\26\103\1\323\4\103\1\0\5\103"+
    "\2\324\1\0\2\324\1\u0149\51\324\1\u014a\17\324\1\113"+
    "\1\324\1\0\1\324\1\113\1\u014b\1\113\1\324\1\113"+
    "\2\324\1\113\2\324\4\113\5\324\30\113\1\326\11\113"+
    "\1\324\5\113\2\327\1\0\5\327\1\u0149\46\327\1\u014c"+
    "\17\327\1\114\1\327\1\0\1\327\3\114\1\327\1\u014d"+
    "\2\327\1\114\2\327\4\114\5\327\30\114\1\330\11\114"+
    "\1\327\5\114\1\111\3\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\4\111\5\0\23\111\1\u014e\15\111\1\u014e"+
    "\1\0\2\111\1\u014e\3\111\3\0\3\111\1\0\1\111"+
    "\2\0\1\111\2\0\4\111\5\0\5\111\1\u014f\34\111"+
    "\1\0\6\111\3\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\4\111\5\0\14\111\1\u0150\21\111\1\u0150\3\111"+
    "\1\0\6\111\3\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\4\111\5\0\10\111\1\u0151\31\111\1\0\6\111"+
    "\3\0\3\111\1\0\1\111\2\0\1\111\2\0\4\111"+
    "\5\0\23\111\1\u0152\15\111\1\u0152\1\0\2\111\1\u0152"+
    "\3\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\4\111\1\u0153\27\111\1\u0153\5\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\11\111\1\u0154\30\111\1\0\1\111\1\u0154"+
    "\4\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\22\111\1\u0155\15\111\1\u0155\1\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\24\111\1\u0156\15\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\22\111\1\u0157\15\111\1\u0157\1\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\24\111\1\u0158\15\111\1\0\6\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\11\111\1\u0159"+
    "\30\111\1\0\1\111\1\u0159\3\111\2\346\1\0\2\346"+
    "\1\u015a\51\346\1\u015b\17\346\1\130\1\346\1\0\1\346"+
    "\1\130\1\u015c\1\130\1\346\1\130\2\346\1\130\2\346"+
    "\4\130\5\346\30\130\1\350\11\130\1\346\5\130\2\351"+
    "\1\0\5\351\1\u015a\46\351\1\u015d\17\351\1\131\1\351"+
    "\1\0\1\351\3\131\1\351\1\u015e\2\351\1\131\2\351"+
    "\4\131\5\351\30\131\1\352\11\131\1\351\5\131\1\126"+
    "\3\0\3\126\1\0\1\126\2\0\1\126\2\0\4\126"+
    "\5\0\6\126\1\354\26\126\1\354\4\126\1\0\6\126"+
    "\1\u015f\1\u0160\1\0\3\126\1\u0161\1\126\2\u0161\1\126"+
    "\2\0\4\126\2\0\1\u0161\1\0\1\u0161\42\126\1\u0161"+
    "\5\126\2\356\1\0\2\356\1\u0162\51\356\1\u0163\17\356"+
    "\1\141\1\356\1\0\1\356\1\141\1\u0164\1\141\1\356"+
    "\1\141\2\356\1\141\2\356\4\141\5\356\30\141\1\360"+
    "\11\141\1\356\5\141\1\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\1\137\27\u0165\2\137"+
    "\10\u0165\1\0\5\137\2\362\1\0\5\362\1\u0162\46\362"+
    "\1\u0166\17\362\1\143\1\362\1\0\1\362\3\143\1\362"+
    "\1\u0167\2\362\1\143\2\362\4\143\5\362\30\143\1\363"+
    "\11\143\1\362\5\143\1\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\14\137\1\u0168\21\137"+
    "\1\u0168\3\137\1\0\6\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\14\137\1\u0169\21\137"+
    "\1\u0169\3\137\1\0\6\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\11\137\1\u016a\30\137"+
    "\1\0\1\137\1\u016a\4\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\13\137\1\u016b\26\137"+
    "\1\0\4\137\1\u016b\1\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\5\137\1\u016c\34\137"+
    "\1\0\5\137\2\376\1\0\2\376\1\u016d\51\376\1\u016e"+
    "\17\376\1\157\1\376\1\0\1\376\1\157\1\u016f\1\157"+
    "\1\376\1\157\2\376\1\157\2\376\4\157\5\376\30\157"+
    "\1\u0100\11\157\1\376\5\157\2\u0101\1\0\5\u0101\1\u016d"+
    "\46\u0101\1\u0170\17\u0101\1\160\1\u0101\1\0\1\u0101\3\160"+
    "\1\u0101\1\u0171\2\u0101\1\160\2\u0101\4\160\5\u0101\30\160"+
    "\1\u0102\11\160\1\u0101\5\160\2\u0103\1\0\2\u0103\1\u0172"+
    "\51\u0103\1\u0173\17\u0103\1\164\1\u0103\1\0\1\u0103\1\164"+
    "\1\u0174\1\164\1\u0103\1\164\2\u0103\1\164\2\u0103\4\164"+
    "\5\u0103\30\164\1\u0105\11\164\1\u0103\5\164\2\u0106\1\0"+
    "\5\u0106\1\u0172\46\u0106\1\u0175\17\u0106\1\165\1\u0106\1\0"+
    "\1\u0106\3\165\1\u0106\1\u0176\2\u0106\1\165\2\u0106\4\165"+
    "\5\u0106\30\165\1\u0107\11\165\1\u0106\5\165\1\162\3\0"+
    "\3\162\1\0\1\162\2\0\1\162\2\0\4\162\5\0"+
    "\6\162\1\u0177\26\162\1\u0177\4\162\1\0\6\162\3\0"+
    "\3\162\1\0\1\162\2\0\1\162\2\0\4\162\5\0"+
    "\25\162\1\u0178\14\162\1\0\6\162\3\0\3\162\1\0"+
    "\1\162\2\0\1\162\2\0\4\162\5\0\22\162\1\u0179"+
    "\15\162\1\u0179\1\162\1\0\6\162\3\0\3\162\1\0"+
    "\1\162\2\0\1\162\2\0\4\162\5\0\11\162\1\u017a"+
    "\30\162\1\0\1\162\1\u017a\4\162\3\0\3\162\1\0"+
    "\1\162\2\0\1\162\2\0\4\162\5\0\21\162\1\u0178"+
    "\20\162\1\0\6\162\3\0\3\162\1\0\1\162\2\0"+
    "\1\162\2\0\4\162\5\0\22\162\1\u0178\15\162\1\u0178"+
    "\1\162\1\0\6\162\3\0\3\162\1\0\1\162\2\0"+
    "\1\162\2\0\4\162\5\0\23\162\1\u0178\15\162\1\u0178"+
    "\1\0\2\162\1\u0178\3\162\3\0\3\162\1\0\1\162"+
    "\2\0\1\162\2\0\4\162\5\0\24\162\1\u0178\15\162"+
    "\1\0\5\162\1\204\1\260\1\0\1\260\1\204\1\u017b"+
    "\1\204\1\260\1\204\2\260\1\204\2\260\4\204\5\260"+
    "\30\204\1\u0111\11\204\1\260\5\204\1\205\1\266\1\0"+
    "\1\266\3\205\1\266\1\u017c\2\266\1\205\2\266\4\205"+
    "\5\266\30\205\1\u0112\11\205\1\266\5\205\1\207\1\u0103"+
    "\1\0\1\u0103\1\207\1\u017d\1\207\1\u0103\1\207\2\u0103"+
    "\1\207\2\u0103\4\207\5\u0103\30\207\1\u0114\11\207\1\u0103"+
    "\5\207\1\210\1\u0106\1\0\1\u0106\3\210\1\u0106\1\u017e"+
    "\2\u0106\1\210\2\u0106\4\210\5\u0106\30\210\1\u0115\11\210"+
    "\1\u0106\5\210\1\202\3\0\3\202\1\0\1\202\2\0"+
    "\1\202\2\0\4\202\5\0\25\202\1\u017f\14\202\1\0"+
    "\6\202\3\0\3\202\1\0\1\202\2\0\1\202\2\0"+
    "\4\202\5\0\21\202\1\u017f\20\202\1\0\6\202\3\0"+
    "\3\202\1\0\1\202\2\0\1\202\2\0\4\202\5\0"+
    "\22\202\1\u017f\15\202\1\u017f\1\202\1\0\6\202\3\0"+
    "\3\202\1\0\1\202\2\0\1\202\2\0\4\202\5\0"+
    "\23\202\1\u017f\15\202\1\u017f\1\0\2\202\1\u017f\3\202"+
    "\3\0\3\202\1\0\1\202\2\0\1\202\2\0\4\202"+
    "\5\0\24\202\1\u017f\15\202\1\0\5\202\1\220\3\0"+
    "\3\220\1\0\1\220\2\0\1\220\2\0\2\220\2\u0180"+
    "\5\0\42\220\1\0\5\220\1\u011f\3\0\3\u011f\1\0"+
    "\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\42\u011f\1\0"+
    "\5\u011f\25\0\1\u0181\51\0\1\u0182\1\u0183\2\u0184\3\u0182"+
    "\1\u0184\1\u0182\2\u0184\1\226\1\u0121\1\u0184\1\226\3\u0182"+
    "\3\u0184\1\u0122\1\u0184\42\u0182\1\u0184\5\u0182\2\u0127\1\0"+
    "\2\u0127\1\u0185\51\u0127\1\u0186\17\u0127\1\242\1\u0127\1\0"+
    "\1\u0127\1\242\1\u0187\1\242\1\u0127\1\242\2\u0127\1\242"+
    "\2\u0127\4\242\5\u0127\30\242\1\u0129\11\242\1\u0127\5\242"+
    "\1\240\3\0\3\240\1\0\1\240\2\0\1\240\2\0"+
    "\2\240\2\u012a\5\0\42\240\1\0\5\240\2\u012c\1\0"+
    "\5\u012c\1\u0185\46\u012c\1\u0188\17\u012c\1\244\1\u012c\1\0"+
    "\1\u012c\3\244\1\u012c\1\u0189\2\u012c\1\244\2\u012c\4\244"+
    "\5\u012c\30\244\1\u012d\11\244\1\u012c\5\244\1\246\3\0"+
    "\1\u018a\2\246\1\0\1\246\2\0\1\246\2\0\2\246"+
    "\2\u012e\5\0\1\246\27\u012e\1\246\11\u012e\1\0\1\246"+
    "\4\u012e\1\246\3\0\2\246\1\u018a\1\0\1\246\2\0"+
    "\1\246\2\0\2\246\2\u012f\5\0\1\246\27\u012f\1\246"+
    "\11\u012f\1\0\1\246\4\u012f\2\260\1\0\2\260\1\u018b"+
    "\51\260\1\u0132\17\260\2\266\1\0\5\266\1\u018c\46\266"+
    "\1\u0134\17\266\1\272\3\0\3\272\1\0\1\272\2\0"+
    "\1\272\2\0\4\272\5\0\15\272\1\u018d\24\272\1\0"+
    "\5\272\1\53\3\0\3\53\1\0\1\53\2\0\1\53"+
    "\2\0\4\53\5\0\17\53\1\u018e\22\53\1\0\6\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\1\53\1\u018f\30\53\1\u018f\7\53\1\0\6\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\14\53\1\u0190\21\53\1\u0190\3\53\1\0\6\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\17\53\1\u0191\22\53\1\0\6\53\3\0\3\53"+
    "\1\0\1\53\2\0\1\53\2\0\4\53\5\0\5\53"+
    "\1\u0192\34\53\1\0\6\53\3\0\3\53\1\0\1\53"+
    "\2\0\1\53\2\0\4\53\5\0\14\53\1\u0193\21\53"+
    "\1\u0193\3\53\1\0\6\53\3\0\3\53\1\0\1\53"+
    "\2\0\1\53\2\0\4\53\5\0\24\53\1\u0194\15\53"+
    "\1\0\6\53\3\0\3\53\1\0\1\53\2\0\1\53"+
    "\2\0\4\53\5\0\17\53\1\u0195\22\53\1\0\6\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\5\53\1\u0196\34\53\1\0\6\53\3\0\3\53"+
    "\1\0\1\53\2\0\1\53\2\0\4\53\5\0\14\53"+
    "\1\u0197\21\53\1\u0197\3\53\1\0\6\53\3\0\3\53"+
    "\1\0\1\53\2\0\1\53\2\0\4\53\5\0\6\53"+
    "\1\u0198\26\53\1\u0198\4\53\1\0\5\53\2\314\1\0"+
    "\2\314\1\u0199\51\314\1\u0147\17\314\2\320\1\0\5\320"+
    "\1\u019a\46\320\1\u0148\17\320\2\324\1\0\2\324\1\u019b"+
    "\51\324\1\u014a\17\324\2\327\1\0\5\327\1\u019c\46\327"+
    "\1\u014c\17\327\1\111\3\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\4\111\5\0\17\111\1\u019d\22\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\1\111\1\u019e\30\111\1\u019e\7\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\14\111\1\u019f\21\111\1\u019f\3\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\17\111\1\u01a0\22\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\5\111\1\u01a1\34\111\1\0\6\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\14\111\1\u01a2"+
    "\21\111\1\u01a2\3\111\1\0\6\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\24\111\1\u01a3"+
    "\15\111\1\0\6\111\3\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\4\111\5\0\17\111\1\u01a4\22\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\5\111\1\u01a5\34\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\14\111\1\u01a6\21\111\1\u01a6\3\111\1\0\6\111\3\0"+
    "\3\111\1\0\1\111\2\0\1\111\2\0\4\111\5\0"+
    "\6\111\1\u01a7\26\111\1\u01a7\4\111\1\0\5\111\2\346"+
    "\1\0\2\346\1\u01a8\51\346\1\u015b\17\346\2\351\1\0"+
    "\5\351\1\u01a9\46\351\1\u015d\17\351\1\0\1\u015f\1\u0160"+
    "\4\0\1\u0161\1\0\2\u0161\11\0\1\u0161\1\0\1\u0161"+
    "\42\0\1\u0161\7\0\1\u0160\74\0\2\356\1\0\2\356"+
    "\1\u01aa\51\356\1\u0163\17\356\2\362\1\0\5\362\1\u01ab"+
    "\46\362\1\u0166\17\362\1\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\5\0\11\137\1\u01ac\30\137"+
    "\1\0\1\137\1\u01ac\4\137\3\0\3\137\1\0\1\137"+
    "\2\0\1\137\2\0\4\137\3\0\1\u01ad\1\0\42\137"+
    "\1\0\6\137\3\0\3\137\1\0\1\137\2\0\1\137"+
    "\2\0\4\137\5\0\20\137\1\u01ae\16\137\1\u01ae\2\137"+
    "\1\0\6\137\3\0\3\137\1\0\1\137\2\0\1\137"+
    "\2\0\4\137\5\0\5\137\1\u01af\34\137\1\0\6\137"+
    "\3\0\3\137\1\0\1\137\2\0\1\137\2\0\4\137"+
    "\5\0\2\137\1\u01b0\37\137\1\0\5\137\2\376\1\0"+
    "\2\376\1\u01b1\51\376\1\u016e\17\376\2\u0101\1\0\5\u0101"+
    "\1\u01b2\46\u0101\1\u0170\17\u0101\2\u0103\1\0\2\u0103\1\u01b3"+
    "\51\u0103\1\u0173\17\u0103\2\u0106\1\0\5\u0106\1\u01b4\46\u0106"+
    "\1\u0175\17\u0106\1\162\3\0\3\162\1\0\1\162\2\0"+
    "\1\162\2\0\4\162\5\0\11\162\1\u01b5\30\162\1\0"+
    "\1\162\1\u01b5\4\162\3\0\3\162\1\0\1\162\2\0"+
    "\1\162\2\0\4\162\5\0\17\162\1\u01b6\22\162\1\0"+
    "\6\162\3\0\3\162\1\0\1\162\2\0\1\162\2\0"+
    "\4\162\5\0\23\162\1\u01b7\15\162\1\u01b7\1\0\2\162"+
    "\1\u01b7\2\162\1\u0184\1\u0183\11\u0184\2\0\1\u0184\1\0"+
    "\6\u0184\1\0\51\u0184\2\u0127\1\0\2\u0127\1\u01b8\51\u0127"+
    "\1\u0186\17\u0127\2\u012c\1\0\5\u012c\1\u01b9\46\u012c\1\u0188"+
    "\17\u012c\1\53\3\0\3\53\1\0\1\53\2\0\1\53"+
    "\2\0\4\53\5\0\3\53\1\u01ba\27\53\1\u01ba\6\53"+
    "\1\0\6\53\3\0\3\53\1\0\1\53\2\0\1\53"+
    "\2\0\4\53\5\0\13\53\1\u01bb\26\53\1\0\4\53"+
    "\1\u01bb\1\53\3\0\3\53\1\0\1\53\2\0\1\53"+
    "\2\0\4\53\5\0\17\53\1\u01bc\22\53\1\0\6\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\17\53\1\u01bd\22\53\1\0\6\53\3\0\3\53"+
    "\1\0\1\53\2\0\1\53\2\0\4\53\5\0\24\53"+
    "\1\u01be\15\53\1\0\5\53\1\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\3\111\1\u01bf"+
    "\27\111\1\u01bf\6\111\1\0\6\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\13\111\1\u01c0"+
    "\26\111\1\0\4\111\1\u01c0\1\111\3\0\3\111\1\0"+
    "\1\111\2\0\1\111\2\0\4\111\5\0\17\111\1\u01c1"+
    "\22\111\1\0\6\111\3\0\3\111\1\0\1\111\2\0"+
    "\1\111\2\0\4\111\5\0\17\111\1\u01c2\22\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\24\111\1\u01c3\15\111\1\0\5\111\1\137"+
    "\3\0\3\137\1\0\1\137\2\0\1\137\2\0\4\137"+
    "\5\0\15\137\1\u01c4\24\137\1\0\5\137\20\0\2\u01c5"+
    "\6\0\27\u01c5\1\0\11\u01c5\2\0\4\u01c5\1\137\3\0"+
    "\3\137\1\0\1\137\2\0\1\137\2\0\4\137\3\0"+
    "\1\u01c6\1\0\42\137\1\0\6\137\3\0\3\137\1\0"+
    "\1\137\2\0\1\137\2\0\4\137\5\0\16\137\1\u01c7"+
    "\23\137\1\0\6\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\5\0\1\137\1\u01c8\30\137\1\u01c8"+
    "\7\137\1\0\5\137\1\162\3\0\3\162\1\0\1\162"+
    "\2\0\1\162\2\0\4\162\5\0\16\162\1\u01c9\23\162"+
    "\1\0\6\162\3\0\3\162\1\0\1\162\2\0\1\162"+
    "\2\0\4\162\5\0\22\162\1\u01ca\15\162\1\u01ca\1\162"+
    "\1\0\6\162\3\0\3\162\1\0\1\162\2\0\1\162"+
    "\2\0\4\162\5\0\24\162\1\u01cb\15\162\1\0\5\162"+
    "\1\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\3\53\1\u01cc\27\53\1\u01cc\6\53\1\0"+
    "\6\53\3\0\3\53\1\0\1\53\2\0\1\53\2\0"+
    "\4\53\5\0\3\53\1\u01cd\27\53\1\u01cd\6\53\1\0"+
    "\5\53\1\111\3\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\4\111\5\0\3\111\1\u01ce\27\111\1\u01ce\6\111"+
    "\1\0\6\111\3\0\3\111\1\0\1\111\2\0\1\111"+
    "\2\0\4\111\5\0\3\111\1\u01cf\27\111\1\u01cf\6\111"+
    "\1\0\5\111\1\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\5\0\23\137\1\u01d0\15\137\1\u01d0"+
    "\1\0\2\137\1\u01d0\2\137\20\0\2\u01d1\53\0\1\u01d1"+
    "\1\0\1\137\3\0\3\137\1\0\1\137\2\0\1\137"+
    "\2\0\4\137\5\0\23\137\1\u01d2\15\137\1\u01d2\1\0"+
    "\2\137\1\u01d2\3\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\5\0\3\137\1\u01d3\27\137\1\u01d3"+
    "\6\137\1\0\5\137\1\162\3\0\3\162\1\0\1\162"+
    "\2\0\1\162\2\0\4\162\5\0\5\162\1\u01d4\34\162"+
    "\1\0\6\162\3\0\3\162\1\0\1\162\2\0\1\162"+
    "\2\0\4\162\5\0\14\162\1\u01d5\21\162\1\u01d5\3\162"+
    "\1\0\5\162\1\53\3\0\3\53\1\0\1\53\2\0"+
    "\1\53\2\0\4\53\5\0\1\53\1\u01d6\30\53\1\u01d6"+
    "\7\53\1\0\6\53\3\0\3\53\1\0\1\53\2\0"+
    "\1\53\2\0\4\53\5\0\1\53\1\u01d7\30\53\1\u01d7"+
    "\7\53\1\0\5\53\1\111\3\0\3\111\1\0\1\111"+
    "\2\0\1\111\2\0\4\111\5\0\1\111\1\u01d8\30\111"+
    "\1\u01d8\7\111\1\0\6\111\3\0\3\111\1\0\1\111"+
    "\2\0\1\111\2\0\4\111\5\0\1\111\1\u01d9\30\111"+
    "\1\u01d9\7\111\1\0\5\111\1\137\3\0\3\137\1\0"+
    "\1\137\2\0\1\137\2\0\4\137\3\0\1\u01da\1\0"+
    "\42\137\1\0\6\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\3\0\1\u01db\1\0\42\137\1\0"+
    "\6\137\3\0\3\137\1\0\1\137\2\0\1\137\2\0"+
    "\4\137\5\0\13\137\1\u01dc\26\137\1\0\4\137\1\u01dc"+
    "\1\162\3\0\3\162\1\0\1\162\2\0\1\162\2\0"+
    "\4\162\5\0\4\162\1\u01cb\27\162\1\u01cb\5\162\1\0"+
    "\6\162\3\0\3\162\1\0\1\162\2\0\1\162\2\0"+
    "\4\162\5\0\5\162\1\u01dd\34\162\1\0\5\162\1\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\14\53\1\u01de\21\53\1\u01de\3\53\1\0\6\53"+
    "\3\0\3\53\1\0\1\53\2\0\1\53\2\0\4\53"+
    "\5\0\14\53\1\u01df\21\53\1\u01df\3\53\1\0\5\53"+
    "\1\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\14\111\1\u01e0\21\111\1\u01e0\3\111\1\0"+
    "\6\111\3\0\3\111\1\0\1\111\2\0\1\111\2\0"+
    "\4\111\5\0\14\111\1\u01e1\21\111\1\u01e1\3\111\1\0"+
    "\5\111\13\0\2\u01c5\1\0\4\u01c5\3\0\1\u01c5\2\0"+
    "\27\u01c5\1\0\11\u01c5\2\0\4\u01c5\20\0\2\u01e2\53\0"+
    "\1\u01e2\1\0\1\137\3\0\3\137\1\0\1\137\2\0"+
    "\1\137\2\0\4\137\5\0\21\137\1\u01e3\20\137\1\0"+
    "\5\137\1\162\3\0\3\162\1\0\1\162\2\0\1\162"+
    "\2\0\4\162\5\0\26\162\1\u01e4\13\162\1\0\5\162"+
    "\13\0\1\u01c5\1\0\1\u01db\1\u01e5\60\0\1\162\3\0"+
    "\3\162\1\0\1\162\2\0\1\162\2\0\4\162\5\0"+
    "\5\162\1\u01e6\34\162\1\0\5\162\20\0\2\u01e7\53\0"+
    "\1\u01e7\1\0\1\162\3\0\3\162\1\0\1\162\2\0"+
    "\1\162\2\0\4\162\5\0\14\162\1\u01e8\21\162\1\u01e8"+
    "\3\162\1\0\5\162\13\0\1\u01c5\1\0\1\u01db\61\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22995];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\10\1\2\11\2\1\1\11\23\1\1\11\7\1"+
    "\1\11\5\1\1\11\50\1\1\11\76\1\1\0\4\1"+
    "\1\11\1\0\1\1\1\0\1\11\1\1\1\0\17\1"+
    "\1\11\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\16\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\1\1\1\0\11\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\17\1\1\11\11\1\1\11\1\0\1\11"+
    "\2\1\1\11\1\1\1\0\4\1\1\0\3\1\2\11"+
    "\1\0\1\1\1\0\2\1\1\11\16\1\1\11\2\0"+
    "\1\11\1\0\1\1\1\0\15\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\11\1\0\2\1\1\0"+
    "\6\1\1\11\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\1\1\1\0\13\1\1\11\2\1\2\11\1\0\1\1"+
    "\1\0\44\1\1\0\27\1\1\11\1\0\24\1\1\0"+
    "\11\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private Stack<Integer> tokenOrigin = new Stack<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 120: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 121: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 122: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 123: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 124: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 125: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 126: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 127: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 128: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 129: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 131: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 132: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 133: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 134: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 135: break;
          case 17:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 136: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 137: break;
          case 19:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 138: break;
          case 20:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 139: break;
          case 21:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 140: break;
          case 22:
            { tokenOrigin.push(ECHO_STRING); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 141: break;
          case 23:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 142: break;
          case 24:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 143: break;
          case 25:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 144: break;
          case 26:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 145: break;
          case 27:
            { yybegin(FOR); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 146: break;
          case 28:
            { yybegin(FOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 147: break;
          case 29:
            { yybegin(FOR); yypushback(yylength()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 148: break;
          case 30:
            { yybegin(FOR_COLLECTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 149: break;
          case 31:
            { yybegin(FOR); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 150: break;
          case 32:
            { tokenOrigin.push(IF_STANDARD); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 151: break;
          case 33:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 152: break;
          case 34:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 153: break;
          case 35:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 154: break;
          case 36:
            { tokenOrigin.push(YYINITIAL); yypushback(yylength()); yybegin(TOKEN);
            }
          // fall through
          case 155: break;
          case 37:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 156: break;
          case 38:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 157: break;
          case 39:
            { yybegin(IF_STANDARD); return BatchTypes.NUMERIC;
            }
          // fall through
          case 158: break;
          case 40:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 159: break;
          case 41:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 160: break;
          case 42:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 161: break;
          case 43:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 162: break;
          case 44:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 163: break;
          case 45:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 164: break;
          case 46:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 165: break;
          case 47:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 166: break;
          case 48:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 167: break;
          case 49:
            { tokenOrigin.push(SET_VALUE); yybegin(TOKEN); yypushback(yylength());
            }
          // fall through
          case 168: break;
          case 50:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 169: break;
          case 51:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 170: break;
          case 52:
            { yybegin(tokenOrigin.pop()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 171: break;
          case 53:
            { yybegin(tokenOrigin.pop()); yypushback(yylength());
            }
          // fall through
          case 172: break;
          case 54:
            { yybegin(tokenOrigin.pop()); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 173: break;
          case 55:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 174: break;
          case 56:
            { yybegin(YYINITIAL); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 175: break;
          case 57:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 176: break;
          case 58:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 177: break;
          case 59:
            { yybegin(IF); return BatchTypes.IF_ANNOTATION;
            }
          // fall through
          case 178: break;
          case 60:
            { yybegin(ASSOC_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 179: break;
          case 61:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 180: break;
          case 62:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 181: break;
          case 63:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 182: break;
          case 64:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 183: break;
          case 65:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 184: break;
          case 66:
            { yybegin(FOR); return BatchTypes.STRING;
            }
          // fall through
          case 185: break;
          case 67:
            { yybegin(FOR_COLLECTION); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 186: break;
          case 68:
            { yybegin(FOR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 187: break;
          case 69:
            { yybegin(YYINITIAL); return BatchTypes.DO_COMMAND;
            }
          // fall through
          case 188: break;
          case 70:
            { yybegin(FOR); return BatchTypes.IN_COMMAND;
            }
          // fall through
          case 189: break;
          case 71:
            { yybegin(FOR_COLLECTION); return BatchTypes.STRING;
            }
          // fall through
          case 190: break;
          case 72:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 191: break;
          case 73:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 192: break;
          case 74:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 193: break;
          case 75:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 194: break;
          case 76:
            { tokenOrigin.push(SET); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.VARIABLE;
            }
          // fall through
          case 195: break;
          case 77:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 196: break;
          case 78:
            { tokenOrigin.push(SET_VALUE); yypushback(1); yybegin(BAD_WHITESPACE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 197: break;
          case 79:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 198: break;
          case 80:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 199: break;
          case 81:
            { yybegin(SET_VALUE); return BatchTypes.ARG_LITERAL;
            }
          // fall through
          case 200: break;
          case 82:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 201: break;
          case 83:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 202: break;
          case 84:
            { yybegin(FOR); return BatchTypes.FOR_ANNOTATION;
            }
          // fall through
          case 203: break;
          case 85:
            { yybegin(SET); return BatchTypes.SET_ANNOTATION;
            }
          // fall through
          case 204: break;
          case 86:
            { yybegin(FOR); return BatchTypes.FOR_COMMAND;
            }
          // fall through
          case 205: break;
          case 87:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 206: break;
          case 88:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 207: break;
          case 89:
            { yybegin(YYINITIAL); yypushback(1); return BatchTypes.TOGGLE;
            }
          // fall through
          case 208: break;
          case 90:
            { yybegin(FOR); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 209: break;
          case 91:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 210: break;
          case 92:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 211: break;
          case 93:
            { yybegin(SET); yypushback(yylength() - 2); return BatchTypes.EXTENSION;
            }
          // fall through
          case 212: break;
          case 94:
            { yybegin(tokenOrigin.pop()); return BatchTypes.VARIABLE;
            }
          // fall through
          case 213: break;
          case 95:
            { yybegin(CALL); return BatchTypes.CALL_ANNOTATION;
            }
          // fall through
          case 214: break;
          case 96:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 215: break;
          case 97:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_ANNOTATION;
            }
          // fall through
          case 216: break;
          case 98:
            { yybegin(EXIT); return BatchTypes.EXIT_ANNOTATION;
            }
          // fall through
          case 217: break;
          case 99:
            { yybegin(GOTO); return BatchTypes.GOTO_ANNOTATION;
            }
          // fall through
          case 218: break;
          case 100:
            { yybegin(MORE); return BatchTypes.MORE_ANNOTATION;
            }
          // fall through
          case 219: break;
          case 101:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 220: break;
          case 102:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 221: break;
          case 103:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 222: break;
          case 104:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 223: break;
          case 105:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 224: break;
          case 106:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 225: break;
          case 107:
            { yybegin(ASSOC); return BatchTypes.ASSOC_ANNOTATION;
            }
          // fall through
          case 226: break;
          case 108:
            { yybegin(BREAK); return BatchTypes.BREAK_ANNOTATION;
            }
          // fall through
          case 227: break;
          case 109:
            { yybegin(SHIFT); return BatchTypes.SHIFT_ANNOTATION;
            }
          // fall through
          case 228: break;
          case 110:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 229: break;
          case 111:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 230: break;
          case 112:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 231: break;
          case 113:
            { yybegin(FOR); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 232: break;
          case 114:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 233: break;
          case 115:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_ANNOTATION;
            }
          // fall through
          case 234: break;
          case 116:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_ANNOTATION;
            }
          // fall through
          case 235: break;
          case 117:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 236: break;
          case 118:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 237: break;
          case 119:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 238: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
