// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;import org.apache.velocity.runtime.directive.contrib.For;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int BREAK = 8;
  public static final int CALL = 10;
  public static final int COMMAND = 12;
  public static final int ECHO = 14;
  public static final int ECHO_STRING = 16;
  public static final int EXIT = 18;
  public static final int FOR = 20;
  public static final int FOR_COLLECTION = 22;
  public static final int GOTO = 24;
  public static final int IF = 26;
  public static final int IF_ERRORLEVEL = 28;
  public static final int IF_EXIST = 30;
  public static final int IF_STANDARD = 32;
  public static final int LABEL = 34;
  public static final int MORE = 36;
  public static final int REM = 38;
  public static final int SET = 40;
  public static final int SET_LOCAL = 42;
  public static final int SHIFT = 44;
  public static final int SET_VALUE = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  5,  5, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\11\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\41\1\56\2\41"+
    "\1\0\1\57\2\0\1\60\1\0\1\61\1\31\1\62"+
    "\1\63\1\34\1\64\1\36\1\37\1\40\1\41\1\42"+
    "\1\65\1\44\1\45\1\46\1\66\1\50\1\67\1\70"+
    "\1\53\1\54\1\55\1\41\1\56\2\41\1\0\1\71"+
    "\1\0\1\72\53\0\1\60\12\0\1\60\4\0\1\60"+
    "\5\0\27\60\1\0\37\60\1\0\70\60\2\73\115\60"+
    "\1\74\u0142\60\4\0\14\60\16\0\5\60\7\0\1\60"+
    "\1\0\1\60\21\0\165\60\1\0\2\60\2\0\4\60"+
    "\1\0\1\60\6\0\1\60\1\0\3\60\1\0\1\60"+
    "\1\0\24\60\1\0\123\60\1\0\213\60\1\0\255\60"+
    "\1\0\46\60\2\0\1\60\6\0\51\60\10\0\55\60"+
    "\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60"+
    "\10\0\33\60\4\0\4\60\35\0\13\60\5\0\100\60"+
    "\12\75\4\0\146\60\1\0\10\60\2\0\12\60\1\0"+
    "\6\60\12\75\3\60\2\0\1\60\20\0\73\60\2\0"+
    "\145\60\16\0\12\75\54\60\4\0\1\60\2\0\1\60"+
    "\2\0\56\60\22\0\34\60\4\0\13\60\65\0\25\60"+
    "\1\0\10\60\25\0\17\60\1\0\201\60\2\0\12\75"+
    "\1\0\23\60\1\0\10\60\2\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\1\60\3\0\4\60\2\0\11\60"+
    "\2\0\2\60\2\0\4\60\10\0\1\60\4\0\2\60"+
    "\1\0\5\60\2\0\12\75\2\60\12\0\1\60\1\0"+
    "\1\60\2\0\3\60\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0"+
    "\2\60\2\0\1\60\1\0\5\60\4\0\2\60\2\0"+
    "\3\60\3\0\1\60\7\0\4\60\1\0\1\60\7\0"+
    "\12\75\6\60\13\0\3\60\1\0\11\60\1\0\3\60"+
    "\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\12\60\1\0\3\60\1\0\3\60\2\0\1\60"+
    "\17\0\4\60\2\0\12\75\11\0\7\60\1\0\3\60"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\5\60\2\0\11\60\2\0\2\60"+
    "\2\0\3\60\10\0\2\60\4\0\2\60\1\0\5\60"+
    "\2\0\12\75\1\0\1\60\20\0\2\60\1\0\6\60"+
    "\3\0\3\60\1\0\4\60\3\0\2\60\1\0\1\60"+
    "\1\0\2\60\3\0\2\60\3\0\3\60\3\0\14\60"+
    "\4\0\5\60\3\0\3\60\1\0\4\60\2\0\1\60"+
    "\6\0\1\60\16\0\12\75\20\0\15\60\1\0\3\60"+
    "\1\0\27\60\1\0\20\60\3\0\10\60\1\0\3\60"+
    "\1\0\4\60\7\0\2\60\1\0\3\60\5\0\4\60"+
    "\2\0\12\75\20\0\4\60\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\11\60"+
    "\1\0\3\60\1\0\4\60\7\0\2\60\7\0\1\60"+
    "\1\0\4\60\2\0\12\75\1\0\2\60\15\0\4\60"+
    "\1\0\10\60\1\0\3\60\1\0\63\60\1\0\3\60"+
    "\1\0\5\60\5\0\4\60\7\0\5\60\2\0\12\75"+
    "\12\0\6\60\2\0\2\60\1\0\22\60\3\0\30\60"+
    "\1\0\11\60\1\0\1\60\2\0\7\60\3\0\1\60"+
    "\4\0\6\60\1\0\1\60\1\0\10\60\6\0\12\75"+
    "\2\0\2\60\15\0\72\60\5\0\17\60\1\0\12\75"+
    "\47\0\2\60\1\0\1\60\1\0\5\60\1\0\30\60"+
    "\1\0\1\60\1\0\27\60\2\0\5\60\1\0\1\60"+
    "\1\0\6\60\2\0\12\75\2\0\4\60\40\0\1\60"+
    "\27\0\2\60\6\0\12\75\13\0\1\60\1\0\1\60"+
    "\1\0\1\60\4\0\12\60\1\0\44\60\4\0\24\60"+
    "\1\0\22\60\1\0\44\60\11\0\1\60\71\0\100\60"+
    "\12\75\6\0\100\60\12\75\4\60\2\0\46\60\1\0"+
    "\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0"+
    "\51\60\1\0\4\60\2\0\41\60\1\0\4\60\2\0"+
    "\7\60\1\0\1\60\1\0\4\60\2\0\17\60\1\0"+
    "\71\60\1\0\4\60\2\0\103\60\2\0\3\60\40\0"+
    "\20\60\20\0\126\60\2\0\6\60\3\0\u016c\60\2\0"+
    "\21\60\1\0\32\60\5\0\113\60\3\0\13\60\7\0"+
    "\15\60\1\0\7\60\13\0\25\60\13\0\24\60\14\0"+
    "\15\60\1\0\3\60\1\0\2\60\14\0\124\60\3\0"+
    "\1\60\4\0\2\60\2\0\12\75\41\0\3\60\2\0"+
    "\12\75\6\0\131\60\7\0\53\60\5\0\106\60\12\0"+
    "\37\60\1\0\14\60\4\0\14\60\12\0\12\75\36\60"+
    "\2\0\5\60\13\0\54\60\4\0\32\60\6\0\12\75"+
    "\46\0\34\60\4\0\77\60\1\0\35\60\2\0\1\60"+
    "\12\75\6\0\12\75\15\0\1\60\10\0\17\60\101\0"+
    "\114\60\4\0\12\75\21\0\11\60\14\0\60\60\12\75"+
    "\72\60\14\0\70\60\10\0\12\75\3\0\3\60\12\75"+
    "\44\60\2\0\11\60\7\0\53\60\2\0\3\60\20\0"+
    "\3\60\1\0\47\60\5\0\372\60\1\0\33\60\2\0"+
    "\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0"+
    "\65\60\1\0\7\60\1\0\1\60\3\0\3\60\1\0"+
    "\7\60\3\0\4\60\2\0\6\60\4\0\15\60\5\0"+
    "\3\60\1\0\7\60\102\0\2\60\23\0\1\60\34\0"+
    "\1\60\15\0\1\60\20\0\15\60\63\0\41\60\21\0"+
    "\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0"+
    "\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\76\3\60\1\0\13\60\2\0\4\60\5\0\5\60"+
    "\4\0\1\60\21\0\51\60\u022d\0\64\60\26\0\57\60"+
    "\1\0\57\60\1\0\205\60\6\0\11\60\14\0\46\60"+
    "\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\30\60\11\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\40\60\57\0\1\60\325\0\3\60"+
    "\31\0\17\60\1\0\5\60\2\0\5\60\4\0\126\60"+
    "\2\0\2\60\2\0\3\60\1\0\132\60\1\0\4\60"+
    "\5\0\53\60\1\0\136\60\21\0\33\60\65\0\306\60"+
    "\112\0\360\60\20\0\215\60\103\0\56\60\2\0\15\60"+
    "\3\0\20\60\12\75\2\60\24\0\63\60\1\0\12\60"+
    "\1\0\163\60\45\0\11\60\2\0\147\60\2\0\65\60"+
    "\2\0\5\60\60\0\61\60\30\0\64\60\14\0\106\60"+
    "\12\0\12\75\6\0\30\60\3\0\1\60\1\0\3\60"+
    "\12\75\44\60\2\0\44\60\14\0\35\60\3\0\101\60"+
    "\16\0\1\60\12\75\6\0\20\60\12\75\5\60\1\0"+
    "\67\60\11\0\16\60\2\0\12\75\6\0\27\60\3\0"+
    "\111\60\30\0\3\60\2\0\20\60\2\0\5\60\12\0"+
    "\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0"+
    "\7\60\1\0\53\60\1\0\14\60\10\0\173\60\1\0"+
    "\2\60\2\0\12\75\6\0\244\60\14\0\27\60\4\0"+
    "\61\60\u0104\0\156\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\14\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0"+
    "\153\60\22\0\100\60\2\0\66\60\50\0\14\60\4\0"+
    "\20\60\20\0\20\60\3\0\2\60\30\0\3\60\40\0"+
    "\5\60\1\0\207\60\23\0\12\75\7\0\32\60\4\0"+
    "\1\60\1\0\32\60\13\0\131\60\3\0\6\60\2\0"+
    "\6\60\2\0\6\60\2\0\3\60\43\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0"+
    "\16\60\42\0\173\60\105\0\65\60\210\0\1\60\202\0"+
    "\35\60\3\0\61\60\17\0\1\60\37\0\40\60\15\0"+
    "\36\60\5\0\53\60\5\0\36\60\2\0\44\60\4\0"+
    "\10\60\1\0\5\60\52\0\236\60\2\0\12\75\6\0"+
    "\44\60\4\0\44\60\4\0\50\60\10\0\64\60\234\0"+
    "\67\60\11\0\26\60\12\0\10\60\230\0\6\60\2\0"+
    "\1\60\1\0\54\60\1\0\2\60\3\0\1\60\2\0"+
    "\27\60\12\0\27\60\11\0\37\60\101\0\23\60\1\0"+
    "\2\60\12\0\26\60\12\0\32\60\106\0\70\60\6\0"+
    "\2\60\100\0\4\60\1\0\2\60\5\0\10\60\1\0"+
    "\3\60\1\0\35\60\2\0\3\60\4\0\1\60\40\0"+
    "\35\60\3\0\35\60\43\0\10\60\1\0\36\60\31\0"+
    "\66\60\12\0\26\60\12\0\23\60\15\0\22\60\156\0"+
    "\111\60\67\0\63\60\15\0\63\60\15\0\50\60\10\0"+
    "\12\75\306\0\35\60\12\0\1\60\10\0\41\60\217\0"+
    "\27\60\11\0\107\60\37\0\12\75\17\0\74\60\25\0"+
    "\31\60\7\0\12\75\6\0\65\60\1\0\12\75\4\0"+
    "\3\60\11\0\44\60\2\0\1\60\11\0\105\60\4\0"+
    "\4\60\3\0\12\75\1\60\1\0\1\60\43\0\22\60"+
    "\1\0\45\60\6\0\1\60\101\0\7\60\1\0\1\60"+
    "\1\0\4\60\1\0\17\60\1\0\12\60\7\0\73\60"+
    "\5\0\12\75\6\0\4\60\1\0\10\60\2\0\2\60"+
    "\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\1\0\12\60\2\0\2\60\2\0\3\60\2\0\1\60"+
    "\6\0\1\60\5\0\7\60\2\0\7\60\3\0\5\60"+
    "\213\0\113\60\5\0\12\75\4\0\2\60\40\0\106\60"+
    "\1\0\1\60\10\0\12\75\246\0\66\60\2\0\11\60"+
    "\27\0\6\60\42\0\101\60\3\0\1\60\13\0\12\75"+
    "\46\0\71\60\7\0\12\75\66\0\33\60\2\0\17\60"+
    "\4\0\12\75\306\0\73\60\145\0\100\60\12\75\25\0"+
    "\1\60\240\0\10\60\2\0\56\60\2\0\10\60\1\0"+
    "\2\60\33\0\77\60\10\0\1\60\10\0\112\60\3\0"+
    "\1\60\42\0\71\60\7\0\11\60\1\0\55\60\1\0"+
    "\11\60\17\0\12\75\30\0\36\60\2\0\26\60\1\0"+
    "\16\60\111\0\7\60\1\0\2\60\1\0\54\60\3\0"+
    "\1\60\1\0\2\60\1\0\11\60\10\0\12\75\6\0"+
    "\6\60\1\0\2\60\1\0\45\60\1\0\2\60\1\0"+
    "\6\60\7\0\12\75\u0136\0\27\60\11\0\232\60\146\0"+
    "\157\60\21\0\304\60\274\0\57\60\321\0\107\60\271\0"+
    "\71\60\7\0\37\60\1\0\12\75\146\0\36\60\2\0"+
    "\5\60\13\0\67\60\11\0\4\60\14\0\12\75\11\0"+
    "\25\60\5\0\23\60\260\0\100\60\200\0\113\60\4\0"+
    "\71\60\7\0\21\60\100\0\2\60\1\0\1\60\34\0"+
    "\370\60\10\0\363\60\15\0\37\60\61\0\3\60\21\0"+
    "\4\60\10\0\u018c\60\4\0\153\60\5\0\15\60\3\0"+
    "\11\60\7\0\12\60\3\0\2\60\306\0\5\60\3\0"+
    "\6\60\10\0\10\60\2\0\7\60\36\0\4\60\224\0"+
    "\3\60\273\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0"+
    "\1\60\1\0\7\60\1\0\101\60\1\0\4\60\2\0"+
    "\10\60\1\0\7\60\1\0\34\60\1\0\4\60\1\0"+
    "\5\60\1\0\1\60\3\0\7\60\1\0\u0154\60\2\0"+
    "\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\10\60\2\0\62\75\67\60"+
    "\4\0\62\60\10\0\1\60\16\0\1\60\26\0\5\60"+
    "\1\0\17\60\120\0\7\60\1\0\21\60\2\0\7\60"+
    "\1\0\2\60\1\0\5\60\325\0\55\60\3\0\16\60"+
    "\2\0\12\75\4\0\1\60\u0171\0\60\60\12\75\6\0"+
    "\305\60\13\0\7\60\51\0\114\60\4\0\12\75\246\0"+
    "\4\60\1\0\33\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\12\60\1\0\4\60\1\0\1\60\1\0"+
    "\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\2\60\1\0\1\60\2\0\4\60\1\0"+
    "\7\60\1\0\4\60\1\0\4\60\1\0\1\60\1\0"+
    "\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\164\0\32\60\6\0\32\60\6\0\32\60\166\0"+
    "\327\60\51\0\65\60\13\0\336\60\2\0\u0182\60\16\0"+
    "\u0131\60\37\0\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\2\2\1\0\1\1\1\3\1\4\1\5"+
    "\1\4\1\6\1\3\1\7\1\3\2\1\1\3\1\10"+
    "\1\11\1\4\1\10\1\12\1\13\1\2\2\14\1\15"+
    "\2\14\1\16\1\17\1\2\1\0\1\16\1\14\1\4"+
    "\1\14\1\20\2\14\1\4\1\21\1\4\1\22\1\23"+
    "\1\6\1\24\1\25\1\2\1\0\1\14\1\4\2\14"+
    "\11\24\1\14\1\26\1\27\1\2\1\0\1\14\1\4"+
    "\2\14\1\26\1\14\1\30\1\31\1\4\1\32\1\33"+
    "\1\34\1\2\1\0\1\33\1\14\2\4\1\33\2\14"+
    "\6\33\1\14\1\35\2\36\1\0\1\4\1\37\1\40"+
    "\1\41\1\2\1\0\1\4\5\40\1\14\1\42\1\20"+
    "\1\4\1\43\3\20\1\24\1\44\4\20\1\14\1\45"+
    "\1\20\1\4\1\46\1\20\1\4\1\20\4\14\1\20"+
    "\1\47\1\50\1\51\1\4\2\50\1\52\1\4\1\53"+
    "\2\4\1\54\1\55\1\56\1\57\1\4\1\60\1\61"+
    "\1\2\1\0\1\60\1\14\1\4\1\62\3\14\4\1"+
    "\1\2\3\0\1\1\1\3\4\0\1\63\4\64\1\0"+
    "\1\64\1\1\1\10\1\14\4\16\1\17\3\0\1\16"+
    "\1\4\1\65\4\24\1\25\3\0\11\24\1\66\3\24"+
    "\4\26\1\27\3\0\2\26\1\30\1\67\4\33\1\34"+
    "\3\0\1\33\4\0\1\70\1\33\1\71\1\33\1\72"+
    "\3\33\4\35\1\36\3\0\1\36\4\40\1\41\3\0"+
    "\10\40\3\24\1\44\3\14\1\45\3\0\1\46\1\73"+
    "\5\14\1\74\1\50\1\74\1\75\2\0\1\76\1\77"+
    "\1\100\4\60\1\61\3\0\1\60\1\62\1\101\3\1"+
    "\1\101\3\0\1\32\1\102\1\101\1\102\1\0\1\102"+
    "\1\0\1\102\1\0\3\64\1\103\1\64\1\63\1\10"+
    "\4\16\3\0\1\104\1\105\3\24\1\105\3\0\7\24"+
    "\1\106\2\24\1\107\1\24\1\110\3\26\1\110\4\0"+
    "\1\111\1\112\1\113\3\33\1\113\3\0\1\114\1\115"+
    "\1\113\1\115\1\0\1\115\1\0\1\115\1\0\5\33"+
    "\1\116\3\35\1\116\3\0\1\117\3\40\1\117\3\0"+
    "\1\40\1\120\2\40\1\101\3\24\1\117\3\14\1\117"+
    "\1\102\1\0\1\102\1\0\1\102\1\0\1\73\1\74"+
    "\1\121\4\60\3\0\1\122\11\101\1\103\1\123\3\16"+
    "\6\105\2\24\1\124\1\125\1\126\1\24\1\127\1\130"+
    "\1\131\2\24\6\110\11\113\1\33\1\0\3\33\6\116"+
    "\6\117\3\40\3\101\6\117\3\60\1\132\1\133\2\24"+
    "\1\134\1\33\1\135\1\0\2\33\2\40\1\136\2\24"+
    "\1\33\1\135\2\33\2\40\2\24\1\135\1\0\1\33"+
    "\1\40\1\137\1\140\2\135\1\40\1\0\1\40\1\135"+
    "\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[584];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0666\0\u0666"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b"+
    "\0\u095a\0\u07e0\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u07e0\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0c4e\0\u0d0b\0\u07e0\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u07e0\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u0fc0\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\u13ef\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u1722\0\u181e\0\u185d\0\u189c\0\u18db"+
    "\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\u1b51\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u07e0\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u28da"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u07e0\0\u2cca\0\u2d09"+
    "\0\u2d48\0\u2d87\0\u07e0\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2"+
    "\0\u2f01\0\u2f40\0\u2f7f\0\u07e0\0\u2fbe\0\u2ffd\0\u303c\0\u307b"+
    "\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u0dc8\0\u3234"+
    "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624"+
    "\0\u3234\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd"+
    "\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u0dc8"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u39d5\0\u3d08\0\u39d5"+
    "\0\u3d47\0\u39d5\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1"+
    "\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9"+
    "\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1"+
    "\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9"+
    "\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1"+
    "\0\u46e0\0\u471f\0\u07e0\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a"+
    "\0\u2529\0\u4899\0\u24ab\0\u48d8\0\u4917\0\u4956\0\u07e0\0\u2625"+
    "\0\u0dc8\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\u4b4e\0\u4b8d\0\u4bcc\0\u2a93\0\u4c0b\0\u4c4a\0\u4c89\0\u07e0"+
    "\0\u4cc8\0\u4d07\0\u4d46\0\u2a93\0\u2cca\0\u2cca\0\u2d09\0\u4d85"+
    "\0\u2d48\0\u4dc4\0\u2d87\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u07e0"+
    "\0\u4eff\0\u2a93\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u07e0\0\u503a"+
    "\0\u5079\0\u50b8\0\u2fbe\0\u3234\0\u50f7\0\u5136\0\u5175\0\u07e0"+
    "\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d"+
    "\0\u53ac\0\u53eb\0\u3234\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u3720"+
    "\0\u5526\0\u5565\0\u55a4\0\u07e0\0\u55e3\0\u5622\0\u5661\0\u56a0"+
    "\0\u56df\0\u07e0\0\u39d5\0\u571e\0\u575d\0\u579c\0\u07e0\0\u57db"+
    "\0\u581a\0\u5859\0\u39d5\0\u3c0c\0\u3c0c\0\u3c4b\0\u5898\0\u3c8a"+
    "\0\u58d7\0\u3cc9\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u3e43\0\u5a90\0\u5acf\0\u5b0e\0\u07e0\0\u5b4d\0\u5b8c\0\u5bcb"+
    "\0\u407a\0\u5c0a\0\u5c49\0\u5c88\0\u07e0\0\u5cc7\0\u5d06\0\u5d45"+
    "\0\u5d84\0\u407a\0\u5dc3\0\u5e02\0\u3234\0\u5e41\0\u5e80\0\u5ebf"+
    "\0\u1dc7\0\u5efe\0\u5f3d\0\u5f7c\0\u2cca\0\u4662\0\u5fbb\0\u46a1"+
    "\0\u5ffa\0\u46e0\0\u6039\0\u1dc7\0\u4899\0\u07e0\0\u6078\0\u60b7"+
    "\0\u60f6\0\u07e0\0\u6135\0\u6174\0\u61b3\0\u4995\0\u2ad2\0\u2b11"+
    "\0\u2b50\0\u2bce\0\u2c0d\0\u2c4c\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u091b\0\u30f9\0\u3138\0\u3177\0\u3273\0\u32b2\0\u32f1\0\u336f"+
    "\0\u33ae\0\u33ed\0\u61f2\0\u6231\0\u3234\0\u3234\0\u3234\0\u6270"+
    "\0\u3234\0\u3234\0\u3234\0\u62af\0\u62ee\0\u375f\0\u379e\0\u37dd"+
    "\0\u385b\0\u389a\0\u38d9\0\u3a14\0\u3a53\0\u3a92\0\u3b10\0\u3b4f"+
    "\0\u3b8e\0\u3c4b\0\u3c8a\0\u3cc9\0\u632d\0\u636c\0\u63ab\0\u63ea"+
    "\0\u6429\0\u3e82\0\u3ec1\0\u3f00\0\u3f7e\0\u3fbd\0\u3ffc\0\u40b9"+
    "\0\u40f8\0\u4137\0\u41b5\0\u41f4\0\u4233\0\u6468\0\u64a7\0\u64e6"+
    "\0\u446a\0\u44a9\0\u44e8\0\u4566\0\u45a5\0\u45e4\0\u4662\0\u46a1"+
    "\0\u46e0\0\u4ad0\0\u4b0f\0\u4b4e\0\u3234\0\u3234\0\u6525\0\u6564"+
    "\0\u3234\0\u65a3\0\u07e0\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de"+
    "\0\u407a\0\u671d\0\u675c\0\u679b\0\u65e2\0\u67da\0\u6819\0\u6858"+
    "\0\u6897\0\u68d6\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u3234"+
    "\0\u3234\0\u6a50\0\u39d5\0\u6a8f\0\u6ace\0\u6b0d\0\u6b4c\0\u407a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[584];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\2\30\1\34\1\35\1\30"+
    "\1\36\1\37\1\30\2\40\4\30\1\41\1\40\1\42"+
    "\1\43\1\44\1\45\21\30\1\46\15\30\1\46\1\30"+
    "\1\47\5\30\1\50\1\51\2\0\3\50\1\52\1\50"+
    "\2\52\1\50\2\52\4\50\5\52\5\50\1\53\34\50"+
    "\1\52\5\50\1\54\1\55\1\56\1\0\3\54\1\57"+
    "\1\54\2\52\1\54\2\52\4\54\2\52\1\60\1\61"+
    "\1\62\42\54\1\63\5\54\1\64\1\65\1\66\1\67"+
    "\2\64\1\70\1\71\1\64\2\72\1\64\2\72\4\64"+
    "\2\72\1\73\1\74\1\75\42\64\1\76\5\64\1\77"+
    "\1\100\1\56\1\0\3\77\1\57\1\77\2\52\1\77"+
    "\2\52\4\77\2\52\1\60\1\52\1\62\17\77\1\101"+
    "\22\77\1\63\5\77\1\102\1\103\1\56\1\0\3\102"+
    "\1\52\1\102\2\52\1\102\2\52\4\102\1\104\4\52"+
    "\42\102\1\52\5\102\1\105\1\106\1\107\1\110\3\105"+
    "\1\111\1\105\2\112\1\105\2\112\4\105\2\112\1\113"+
    "\1\52\1\114\1\105\1\115\1\116\1\117\1\105\1\120"+
    "\1\121\1\122\1\105\1\123\3\105\1\124\5\105\1\125"+
    "\6\105\1\115\1\117\1\105\1\121\3\105\1\125\1\126"+
    "\1\105\1\123\1\125\2\105\1\127\1\130\1\131\1\132"+
    "\3\127\1\133\1\127\2\134\1\127\2\134\4\127\2\134"+
    "\1\135\1\52\1\136\17\127\1\137\22\127\1\140\6\127"+
    "\1\141\1\131\1\132\3\127\1\133\1\127\2\134\1\127"+
    "\2\134\4\127\2\134\1\135\1\52\1\136\42\127\1\140"+
    "\5\127\1\77\1\142\1\56\1\0\3\77\1\57\1\77"+
    "\2\52\1\77\2\52\1\77\1\143\2\144\2\52\1\60"+
    "\1\52\1\62\42\77\1\63\5\77\1\145\1\146\1\147"+
    "\1\150\2\145\1\151\1\152\1\145\1\153\1\154\1\145"+
    "\2\154\1\145\1\155\2\145\2\154\1\156\1\52\1\157"+
    "\4\145\1\160\1\161\3\145\1\162\11\145\1\163\1\164"+
    "\1\165\6\145\1\160\4\145\1\163\1\166\1\145\1\162"+
    "\1\163\2\145\1\167\1\170\1\171\1\172\3\167\1\173"+
    "\1\167\1\173\1\174\1\167\2\173\4\167\3\173\1\52"+
    "\1\173\42\167\1\173\5\167\1\175\1\176\1\177\1\200"+
    "\3\175\1\201\1\175\2\201\1\175\2\201\4\175\3\201"+
    "\1\52\1\201\4\175\1\202\1\203\1\175\1\204\4\175"+
    "\1\205\1\175\1\206\15\175\1\202\1\175\1\205\3\175"+
    "\1\201\5\175\1\207\1\210\1\56\1\0\3\207\1\211"+
    "\1\207\1\212\1\52\1\207\2\52\2\207\2\213\2\52"+
    "\1\214\1\52\1\215\42\207\1\216\5\207\1\217\1\220"+
    "\1\32\1\33\3\217\1\221\1\217\1\36\1\40\1\217"+
    "\2\40\4\217\2\40\1\222\1\52\1\223\42\217\1\224"+
    "\5\217\1\225\1\226\1\177\1\200\3\225\1\227\1\225"+
    "\1\230\1\201\1\225\2\201\2\225\2\231\2\201\1\232"+
    "\1\233\1\234\5\225\1\235\1\225\1\236\4\225\1\237"+
    "\1\225\1\240\17\225\1\237\3\225\1\241\5\225\1\102"+
    "\1\242\1\56\1\0\3\102\1\52\1\102\2\52\1\102"+
    "\2\52\4\102\5\52\42\102\1\52\5\102\1\243\1\244"+
    "\1\56\1\0\3\243\1\57\1\243\2\52\1\243\1\245"+
    "\1\52\1\243\1\246\2\243\2\52\1\60\1\52\1\62"+
    "\1\243\27\247\2\243\10\247\1\63\5\243\2\250\1\56"+
    "\74\250\1\251\1\252\1\56\1\0\3\251\1\52\1\251"+
    "\2\52\1\251\1\253\1\52\1\251\1\254\2\251\3\52"+
    "\1\255\1\52\42\251\1\52\5\251\1\256\1\257\1\56"+
    "\1\0\3\256\1\57\1\256\2\52\1\256\2\52\4\256"+
    "\2\52\1\60\1\52\1\62\42\256\1\63\5\256\1\77"+
    "\1\260\1\56\1\0\3\77\1\57\1\77\2\52\1\77"+
    "\2\52\1\77\1\261\2\77\2\52\1\60\1\52\1\62"+
    "\42\77\1\63\5\77\1\262\1\263\1\264\1\265\2\262"+
    "\1\266\1\267\1\262\2\270\1\262\2\270\2\262\2\271"+
    "\2\270\1\272\1\74\1\273\42\262\1\274\5\262\1\275"+
    "\3\0\1\276\1\277\1\275\1\0\1\300\2\0\1\275"+
    "\2\0\4\275\5\0\42\275\1\0\5\275\1\0\1\301"+
    "\2\0\1\302\1\303\2\0\1\304\70\0\1\56\1\0"+
    "\1\302\1\303\2\0\1\304\72\0\1\302\1\303\2\0"+
    "\1\304\66\0\1\275\3\0\1\276\1\277\1\275\1\0"+
    "\1\300\2\0\1\275\2\0\4\275\5\0\42\275\1\0"+
    "\1\305\4\275\4\0\1\302\1\303\1\0\1\306\1\304"+
    "\66\0\4\307\1\310\1\311\2\307\1\312\66\307\4\0"+
    "\1\302\1\303\2\0\1\304\11\0\1\313\60\0\1\302"+
    "\1\303\2\0\1\304\13\0\1\306\155\0\1\302\1\303"+
    "\2\0\1\304\15\0\1\306\50\0\1\314\3\0\1\315"+
    "\1\316\1\314\1\0\1\317\2\0\1\314\2\0\4\314"+
    "\1\320\4\0\22\314\1\321\15\314\1\321\1\314\1\0"+
    "\5\314\1\275\3\0\1\276\1\277\1\275\1\0\1\300"+
    "\2\0\1\275\2\0\4\275\5\0\5\275\1\322\34\275"+
    "\1\0\5\275\4\0\1\302\1\303\2\0\1\304\60\0"+
    "\1\306\5\0\1\50\3\0\3\50\1\0\1\50\2\0"+
    "\1\50\2\0\4\50\5\0\42\50\1\0\5\50\1\0"+
    "\1\51\75\0\1\50\3\0\3\50\1\0\1\50\2\0"+
    "\1\50\2\0\4\50\5\0\3\50\1\323\27\50\1\323"+
    "\6\50\1\0\5\50\1\54\3\0\3\54\1\0\1\54"+
    "\2\0\1\54\2\0\4\54\5\0\42\54\1\0\5\54"+
    "\1\0\1\55\77\0\1\56\103\0\1\324\113\0\1\324"+
    "\100\0\1\324\141\0\1\324\5\0\1\325\3\0\1\326"+
    "\1\327\1\325\1\0\1\330\2\0\1\325\2\0\4\325"+
    "\5\0\42\325\1\0\5\325\1\0\1\331\2\0\1\332"+
    "\1\333\2\0\1\334\70\0\1\56\1\0\1\332\1\333"+
    "\2\0\1\334\72\0\1\332\1\333\2\0\1\334\66\0"+
    "\1\325\3\0\1\326\1\327\1\325\1\0\1\330\2\0"+
    "\1\325\2\0\4\325\5\0\42\325\1\0\1\335\4\325"+
    "\4\0\1\332\1\333\1\0\1\324\1\334\72\0\1\332"+
    "\1\333\2\0\1\334\13\0\1\324\56\0\1\332\1\333"+
    "\2\0\1\334\15\0\1\324\54\0\1\332\1\333\2\0"+
    "\1\334\60\0\1\324\5\0\1\77\3\0\3\77\1\0"+
    "\1\77\2\0\1\77\2\0\4\77\5\0\42\77\1\0"+
    "\5\77\1\0\1\100\75\0\1\77\3\0\3\77\1\0"+
    "\1\77\2\0\1\77\2\0\4\77\5\0\6\77\1\336"+
    "\7\77\1\337\16\77\1\336\4\77\1\0\5\77\1\102"+
    "\3\0\3\102\1\0\1\102\2\0\1\102\2\0\4\102"+
    "\5\0\42\102\1\0\5\102\1\0\1\103\75\0\1\340"+
    "\3\0\1\341\1\342\1\340\1\0\1\343\2\0\1\340"+
    "\2\0\4\340\5\0\42\340\1\0\5\340\1\0\1\344"+
    "\2\0\1\345\1\346\2\0\1\347\70\0\1\56\1\0"+
    "\1\345\1\346\2\0\1\347\72\0\1\345\1\346\2\0"+
    "\1\347\72\0\1\345\1\346\1\0\1\324\1\347\72\0"+
    "\1\345\1\346\2\0\1\347\13\0\1\324\56\0\1\345"+
    "\1\346\2\0\1\347\15\0\1\324\50\0\1\340\3\0"+
    "\1\341\1\342\1\340\1\0\1\343\2\0\1\340\2\0"+
    "\4\340\5\0\23\340\1\350\15\340\1\350\1\0\2\340"+
    "\1\350\3\340\3\0\1\341\1\342\1\340\1\0\1\343"+
    "\2\0\1\340\2\0\4\340\5\0\22\340\1\351\15\340"+
    "\1\351\1\340\1\0\6\340\3\0\1\341\1\342\1\340"+
    "\1\0\1\343\2\0\1\340\2\0\4\340\5\0\1\340"+
    "\1\352\30\340\1\352\7\340\1\0\6\340\3\0\1\341"+
    "\1\342\1\340\1\0\1\343\2\0\1\340\2\0\4\340"+
    "\5\0\3\340\1\353\10\340\1\354\1\340\1\355\10\340"+
    "\1\356\3\340\1\353\2\340\1\354\3\340\1\0\6\340"+
    "\3\0\1\341\1\342\1\340\1\0\1\343\2\0\1\340"+
    "\2\0\4\340\5\0\17\340\1\357\22\340\1\0\6\340"+
    "\3\0\1\341\1\342\1\340\1\0\1\343\2\0\1\340"+
    "\2\0\4\340\5\0\17\340\1\360\22\340\1\0\6\340"+
    "\3\0\1\341\1\342\1\340\1\0\1\343\2\0\1\340"+
    "\2\0\4\340\5\0\6\340\1\361\26\340\1\361\4\340"+
    "\1\0\6\340\3\0\1\341\1\342\1\340\1\0\1\343"+
    "\2\0\1\340\2\0\4\340\5\0\17\340\1\362\22\340"+
    "\1\0\6\340\3\0\1\341\1\342\1\340\1\0\1\343"+
    "\2\0\1\340\2\0\4\340\5\0\5\340\1\363\2\340"+
    "\1\364\31\340\1\0\5\340\4\0\1\345\1\346\2\0"+
    "\1\347\60\0\1\324\5\0\1\365\3\0\1\366\1\367"+
    "\1\365\1\0\1\370\2\0\1\365\2\0\4\365\5\0"+
    "\42\365\1\0\5\365\1\0\1\371\2\0\1\372\1\373"+
    "\2\0\1\374\70\0\1\56\1\0\1\372\1\373\2\0"+
    "\1\374\72\0\1\372\1\373\2\0\1\374\72\0\1\372"+
    "\1\373\1\0\1\324\1\374\72\0\1\372\1\373\2\0"+
    "\1\374\13\0\1\324\56\0\1\372\1\373\2\0\1\374"+
    "\15\0\1\324\50\0\1\365\3\0\1\366\1\367\1\365"+
    "\1\0\1\370\2\0\1\365\2\0\4\365\5\0\6\365"+
    "\1\375\7\365\1\376\16\365\1\375\4\365\1\0\5\365"+
    "\4\0\1\372\1\373\2\0\1\374\60\0\1\324\6\0"+
    "\1\377\2\0\1\372\1\373\2\0\1\374\67\0\1\142"+
    "\75\0\1\77\3\0\3\77\1\0\1\77\2\0\1\77"+
    "\2\0\4\77\5\0\2\77\1\u0100\37\77\1\0\6\77"+
    "\3\0\3\77\1\0\1\77\2\0\1\77\2\0\2\77"+
    "\2\144\5\0\42\77\1\0\5\77\1\u0101\3\0\1\u0102"+
    "\1\u0103\1\u0101\1\0\1\u0104\2\0\1\u0101\2\0\4\u0101"+
    "\5\0\42\u0101\1\0\5\u0101\1\0\1\u0105\2\0\1\u0106"+
    "\1\u0107\2\0\1\u0108\70\0\1\56\1\0\1\u0106\1\u0107"+
    "\2\0\1\u0108\72\0\1\u0106\1\u0107\2\0\1\u0108\66\0"+
    "\1\u0101\3\0\1\u0102\1\u0103\1\u0109\1\0\1\u0104\2\0"+
    "\1\u0101\2\0\4\u0101\5\0\42\u0101\1\0\5\u0101\4\0"+
    "\1\u0106\1\u0107\1\0\1\324\1\u0108\66\0\4\u010a\1\u010b"+
    "\1\u010c\2\u010a\1\u010d\66\u010a\1\u0101\3\0\1\u0102\1\u0103"+
    "\1\u0101\1\0\1\u0104\2\0\1\u0101\2\0\4\u0101\5\0"+
    "\34\u0101\3\u010e\1\u0101\1\u010e\1\u0101\1\0\5\u0101\4\0"+
    "\1\u0106\1\u0107\2\0\1\u0108\13\0\1\324\56\0\1\u0106"+
    "\1\u0107\2\0\1\u0108\15\0\1\324\50\0\1\u0101\3\0"+
    "\1\u0102\1\u0103\1\u0101\1\0\1\u0104\2\0\1\u0101\2\0"+
    "\4\u0101\5\0\5\u0101\1\u010f\11\u0101\1\u0110\22\u0101\1\0"+
    "\6\u0101\3\0\1\u0102\1\u0103\1\u0101\1\0\1\u0104\2\0"+
    "\1\u0101\2\0\4\u0101\5\0\17\u0101\1\u0111\22\u0101\1\0"+
    "\6\u0101\3\0\1\u0102\1\u0103\1\u0101\1\0\1\u0104\2\0"+
    "\1\u0101\2\0\4\u0101\5\0\16\u0101\1\u0112\23\u0101\1\0"+
    "\6\u0101\3\0\1\u0102\1\u0103\1\u0101\1\0\1\u0104\2\0"+
    "\1\u0101\2\0\4\u0101\5\0\13\u0101\1\u0113\26\u0101\1\0"+
    "\4\u0101\1\u0113\1\u0101\3\0\1\u0102\1\u0103\1\u0101\1\0"+
    "\1\u0104\2\0\1\u0101\2\0\4\u0101\5\0\17\u0101\1\u0114"+
    "\22\u0101\1\0\6\u0101\3\0\1\u0102\1\u0103\1\u0101\1\0"+
    "\1\u0104\2\0\1\u0101\2\0\4\u0101\5\0\23\u0101\1\u0115"+
    "\15\u0101\1\u0115\1\0\2\u0101\1\u0115\2\u0101\4\0\1\u0106"+
    "\1\u0107\2\0\1\u0108\60\0\1\324\5\0\1\u0116\3\0"+
    "\1\u0117\1\u0118\1\u0116\1\0\1\u0119\2\0\1\u0116\2\0"+
    "\4\u0116\5\0\42\u0116\1\0\5\u0116\1\0\1\u011a\2\0"+
    "\1\u011b\1\u011c\2\0\1\u011d\70\0\1\u011e\1\0\1\u011b"+
    "\1\u011c\2\0\1\u011d\72\0\1\u011b\1\u011c\2\0\1\u011d"+
    "\66\0\1\u011f\3\0\1\u0120\1\u0121\1\u011f\1\0\1\u0122"+
    "\2\0\1\u011f\2\0\4\u011f\5\0\42\u011f\1\0\5\u011f"+
    "\1\0\1\u0123\2\0\1\u0124\1\u0125\2\0\1\u0126\70\0"+
    "\1\56\1\0\1\u0124\1\u0125\2\0\1\u0126\72\0\1\u0124"+
    "\1\u0125\2\0\1\u0126\66\0\1\u011f\3\0\1\u0120\1\u0121"+
    "\1\u011f\1\0\1\u0122\2\0\1\u011f\2\0\4\u011f\5\0"+
    "\5\u011f\1\u0127\34\u011f\1\0\6\u011f\3\0\1\u0120\1\u0121"+
    "\1\u011f\1\0\1\u0122\2\0\1\u011f\2\0\4\u011f\5\0"+
    "\21\u011f\1\u0128\1\u0129\4\u011f\1\u012a\10\u011f\1\u0129\1\u011f"+
    "\1\0\6\u011f\3\0\1\u0120\1\u0121\1\u011f\1\0\1\u0122"+
    "\2\0\1\u011f\2\0\4\u011f\5\0\5\u011f\1\u012b\16\u011f"+
    "\1\u012c\15\u011f\1\0\6\u011f\3\0\1\u0120\1\u0121\1\u011f"+
    "\1\0\1\u0122\2\0\1\u011f\2\0\4\u011f\5\0\5\u011f"+
    "\1\u012b\15\u011f\1\u012d\15\u011f\1\u012d\1\0\2\u011f\1\u012d"+
    "\3\u011f\3\0\1\u0120\1\u0121\1\u011f\1\0\1\u0122\2\0"+
    "\1\u011f\2\0\4\u011f\5\0\5\u011f\1\u012b\11\u011f\1\u012e"+
    "\22\u011f\1\0\5\u011f\1\207\3\0\3\207\1\0\1\207"+
    "\2\0\1\207\2\0\4\207\5\0\42\207\1\0\5\207"+
    "\1\0\1\210\104\0\1\74\67\0\77\307\1\207\3\0"+
    "\3\207\1\0\1\207\2\0\1\207\2\0\2\207\2\213"+
    "\5\0\42\207\1\0\5\207\24\0\1\74\100\0\1\74"+
    "\141\0\1\74\5\0\1\340\3\0\1\u012f\1\u0130\1\340"+
    "\1\0\1\u0131\2\0\1\340\2\0\4\340\5\0\42\340"+
    "\1\0\5\340\1\0\1\u0132\2\0\1\302\1\303\2\0"+
    "\1\304\72\0\1\302\1\303\1\0\1\74\1\304\72\0"+
    "\1\302\1\303\2\0\1\304\13\0\1\74\56\0\1\302"+
    "\1\303\2\0\1\304\15\0\1\74\54\0\1\302\1\303"+
    "\2\0\1\304\60\0\1\74\5\0\1\207\3\0\1\u0133"+
    "\1\u0134\1\207\1\0\1\u0135\2\0\1\207\2\0\4\207"+
    "\5\0\42\207\1\0\5\207\1\0\1\u0136\2\0\1\u0124"+
    "\1\u0125\2\0\1\u0126\72\0\1\u0124\1\u0125\1\0\1\74"+
    "\1\u0126\66\0\4\307\1\u0137\1\u0138\2\307\1\u0139\66\307"+
    "\1\207\3\0\1\u0133\1\u0134\1\207\1\0\1\u0135\2\0"+
    "\1\207\2\0\2\207\2\u013a\5\0\42\207\1\0\5\207"+
    "\4\0\1\u0124\1\u0125\2\0\1\u0126\13\0\1\74\77\0"+
    "\1\u013b\55\0\1\u0124\1\u0125\2\0\1\u0126\15\0\1\74"+
    "\50\0\1\207\3\0\1\u0133\1\u0134\1\207\1\0\1\u0135"+
    "\2\0\1\207\2\0\4\207\5\0\21\207\1\u013c\20\207"+
    "\1\0\6\207\3\0\1\u0133\1\u0134\1\207\1\0\1\u0135"+
    "\2\0\1\207\2\0\4\207\5\0\5\207\1\u013d\16\207"+
    "\1\u013e\15\207\1\0\6\207\3\0\1\u0133\1\u0134\1\207"+
    "\1\0\1\u0135\2\0\1\207\2\0\4\207\5\0\5\207"+
    "\1\u013d\15\207\1\u013f\15\207\1\u013f\1\0\2\207\1\u013f"+
    "\3\207\3\0\1\u0133\1\u0134\1\207\1\0\1\u0135\2\0"+
    "\1\207\2\0\4\207\5\0\5\207\1\u013d\11\207\1\u0140"+
    "\22\207\1\0\5\207\4\0\1\u0124\1\u0125\2\0\1\u0126"+
    "\60\0\1\74\6\0\1\242\75\0\1\243\3\0\3\243"+
    "\1\0\1\243\2\0\1\243\2\0\4\243\5\0\42\243"+
    "\1\0\5\243\1\0\1\244\115\0\2\u0141\55\0\1\243"+
    "\3\0\3\243\1\0\1\243\2\0\1\243\2\0\4\243"+
    "\5\0\24\243\1\u0142\6\243\1\u0143\3\243\1\u0143\1\243"+
    "\1\u0143\1\0\6\243\3\0\3\243\1\0\1\243\2\0"+
    "\1\243\2\0\4\243\1\u0144\4\0\1\243\27\247\2\243"+
    "\10\247\1\0\5\243\2\250\1\0\74\250\1\251\1\u0145"+
    "\2\0\3\251\1\0\1\251\2\0\1\251\1\u0146\1\0"+
    "\4\251\3\0\1\u0147\1\0\42\251\1\0\5\251\1\0"+
    "\1\252\122\0\1\255\51\0\1\251\1\u0145\2\0\3\251"+
    "\1\0\1\251\2\0\1\251\1\u0146\1\0\4\251\3\0"+
    "\1\u0147\1\0\32\251\1\u0148\4\251\1\u0148\2\251\1\0"+
    "\5\251\1\256\3\0\3\256\1\0\1\256\2\0\1\256"+
    "\2\0\4\256\5\0\42\256\1\0\5\256\1\0\1\257"+
    "\76\0\1\260\75\0\1\77\3\0\3\77\1\0\1\77"+
    "\2\0\1\77\2\0\2\77\1\u0149\1\77\5\0\42\77"+
    "\1\0\5\77\1\u014a\3\0\1\u014b\1\u014c\1\u014a\1\0"+
    "\1\u014d\2\0\1\u014a\2\0\4\u014a\5\0\42\u014a\1\0"+
    "\5\u014a\1\0\1\u014e\2\0\1\u014f\1\u0150\2\0\1\u0151"+
    "\70\0\1\56\1\0\1\u014f\1\u0150\2\0\1\u0151\72\0"+
    "\1\u014f\1\u0150\2\0\1\u0151\66\0\1\u014a\3\0\1\u014b"+
    "\1\u014c\1\u014a\1\0\1\u014d\2\0\1\u014a\2\0\4\u014a"+
    "\5\0\42\u014a\1\0\1\u0152\4\u014a\4\0\1\u014f\1\u0150"+
    "\1\0\1\324\1\u0151\66\0\1\u014a\3\0\1\u014b\1\u014c"+
    "\1\u014a\1\0\1\u014d\2\0\1\u014a\2\0\2\u014a\2\u0153"+
    "\5\0\42\u014a\1\0\5\u014a\4\0\1\u014f\1\u0150\2\0"+
    "\1\u0151\13\0\1\324\56\0\1\u014f\1\u0150\2\0\1\u0151"+
    "\15\0\1\324\54\0\1\u014f\1\u0150\2\0\1\u0151\60\0"+
    "\1\324\5\0\1\275\3\0\3\275\1\0\1\275\2\0"+
    "\1\275\2\0\4\275\5\0\42\275\1\0\5\275\1\276"+
    "\1\302\1\0\1\302\1\u0154\2\276\1\302\1\276\2\302"+
    "\1\276\2\302\4\276\5\302\30\276\1\u0155\11\276\1\302"+
    "\5\276\1\277\1\303\1\0\1\303\1\277\1\u0154\1\277"+
    "\1\303\1\277\2\303\1\277\2\303\4\277\5\303\30\277"+
    "\1\u0156\11\277\1\303\5\277\1\300\1\304\1\0\1\304"+
    "\3\300\1\304\1\u0154\2\304\1\300\2\304\4\300\5\304"+
    "\30\300\1\u0157\11\300\1\304\5\300\1\0\1\301\75\0"+
    "\2\302\1\0\1\302\1\u0158\52\302\1\u0159\17\302\2\303"+
    "\1\0\2\303\1\u0158\51\303\1\u015a\17\303\2\304\1\0"+
    "\5\304\1\u0158\46\304\1\u015b\17\304\1\275\3\0\3\275"+
    "\1\0\1\275\2\0\1\275\2\0\2\275\2\u015c\5\0"+
    "\42\275\1\0\1\u015c\4\275\12\307\1\u015d\64\307\2\310"+
    "\1\307\1\310\1\u015e\5\310\1\u015f\44\310\1\u0160\17\310"+
    "\2\311\1\307\2\311\1\u015e\4\311\1\u0161\44\311\1\u0162"+
    "\17\311\2\312\1\307\5\312\1\u015e\1\312\1\u0163\44\312"+
    "\1\u0164\17\312\1\314\3\0\3\314\1\0\1\314\2\0"+
    "\1\314\2\0\4\314\5\0\42\314\1\0\5\314\1\315"+
    "\1\302\1\0\1\302\1\314\2\315\1\302\1\315\2\302"+
    "\1\315\2\302\4\315\5\302\30\315\1\u0165\11\315\1\302"+
    "\5\315\1\316\1\303\1\0\1\303\1\316\1\314\1\316"+
    "\1\303\1\316\2\303\1\316\2\303\4\316\5\303\30\316"+
    "\1\u0166\11\316\1\303\5\316\1\317\1\304\1\0\1\304"+
    "\3\317\1\304\1\314\2\304\1\317\2\304\4\317\5\304"+
    "\30\317\1\u0167\11\317\1\304\5\317\22\0\1\u0168\54\0"+
    "\1\314\3\0\3\314\1\0\1\314\2\0\1\314\2\0"+
    "\4\314\5\0\5\314\1\u0169\34\314\1\0\5\314\1\275"+
    "\3\0\3\275\1\0\1\275\2\0\1\275\2\0\4\275"+
    "\5\0\15\275\1\u016a\24\275\1\0\5\275\1\50\3\0"+
    "\3\50\1\0\1\50\2\0\1\50\2\0\4\50\5\0"+
    "\10\50\1\u016b\31\50\1\0\5\50\1\325\3\0\3\325"+
    "\1\0\1\325\2\0\1\325\2\0\4\325\5\0\42\325"+
    "\1\0\5\325\1\326\1\332\1\0\1\332\1\325\2\326"+
    "\1\332\1\326\2\332\1\326\2\332\4\326\5\332\30\326"+
    "\1\u016c\11\326\1\332\5\326\1\327\1\333\1\0\1\333"+
    "\1\327\1\325\1\327\1\333\1\327\2\333\1\327\2\333"+
    "\4\327\5\333\30\327\1\u016d\11\327\1\333\5\327\1\330"+
    "\1\334\1\0\1\334\3\330\1\334\1\325\2\334\1\330"+
    "\2\334\4\330\5\334\30\330\1\u016e\11\330\1\334\5\330"+
    "\1\0\1\331\75\0\2\332\1\0\1\332\1\u016f\52\332"+
    "\1\u0170\17\332\2\333\1\0\2\333\1\u016f\51\333\1\u0171"+
    "\17\333\2\334\1\0\5\334\1\u016f\46\334\1\u0172\17\334"+
    "\1\325\3\0\3\325\1\0\1\325\2\0\1\325\2\0"+
    "\2\325\2\u0173\5\0\42\325\1\0\1\u0173\4\325\1\77"+
    "\3\0\3\77\1\0\1\77\2\0\1\77\2\0\4\77"+
    "\5\0\6\77\1\337\26\77\1\337\4\77\1\0\5\77"+
    "\1\340\3\0\3\340\1\0\1\340\2\0\1\340\2\0"+
    "\4\340\5\0\42\340\1\0\5\340\1\341\1\345\1\0"+
    "\1\345\1\u0174\2\341\1\345\1\341\2\345\1\341\2\345"+
    "\4\341\5\345\30\341\1\u0175\11\341\1\345\5\341\1\342"+
    "\1\346\1\0\1\346\1\342\1\u0174\1\342\1\346\1\342"+
    "\2\346\1\342\2\346\4\342\5\346\30\342\1\u0176\11\342"+
    "\1\346\5\342\1\343\1\347\1\0\1\347\3\343\1\347"+
    "\1\u0174\2\347\1\343\2\347\4\343\5\347\30\343\1\u0177"+
    "\11\343\1\347\5\343\1\0\1\344\75\0\2\345\1\0"+
    "\1\345\1\u0178\52\345\1\u0179\17\345\2\346\1\0\2\346"+
    "\1\u0178\51\346\1\u017a\17\346\2\347\1\0\5\347\1\u0178"+
    "\46\347\1\u017b\17\347\1\340\3\0\3\340\1\0\1\340"+
    "\2\0\1\340\2\0\4\340\5\0\23\340\1\u017c\15\340"+
    "\1\u017c\1\0\2\340\1\u017c\3\340\3\0\3\340\1\0"+
    "\1\340\2\0\1\340\2\0\4\340\5\0\5\340\1\u017d"+
    "\34\340\1\0\6\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\14\340\1\u017e\21\340\1\u017e"+
    "\3\340\1\0\6\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\10\340\1\u017f\31\340\1\0"+
    "\6\340\3\0\3\340\1\0\1\340\2\0\1\340\2\0"+
    "\4\340\5\0\23\340\1\u0180\15\340\1\u0180\1\0\2\340"+
    "\1\u0180\3\340\3\0\3\340\1\0\1\340\2\0\1\340"+
    "\2\0\4\340\5\0\4\340\1\u0181\27\340\1\u0181\5\340"+
    "\1\0\6\340\3\0\3\340\1\0\1\340\2\0\1\340"+
    "\2\0\4\340\5\0\11\340\1\u0182\30\340\1\0\1\340"+
    "\1\u0182\4\340\3\0\3\340\1\0\1\340\2\0\1\340"+
    "\2\0\4\340\5\0\22\340\1\u0183\15\340\1\u0183\1\340"+
    "\1\0\6\340\3\0\3\340\1\0\1\340\2\0\1\340"+
    "\2\0\4\340\5\0\24\340\1\u0184\15\340\1\0\6\340"+
    "\3\0\3\340\1\0\1\340\2\0\1\340\2\0\4\340"+
    "\5\0\22\340\1\u0185\15\340\1\u0185\1\340\1\0\6\340"+
    "\3\0\3\340\1\0\1\340\2\0\1\340\2\0\4\340"+
    "\5\0\24\340\1\u0186\15\340\1\0\6\340\3\0\3\340"+
    "\1\0\1\340\2\0\1\340\2\0\4\340\5\0\11\340"+
    "\1\u0187\30\340\1\0\1\340\1\u0187\3\340\1\365\3\0"+
    "\3\365\1\0\1\365\2\0\1\365\2\0\4\365\5\0"+
    "\42\365\1\0\5\365\1\366\1\372\1\0\1\372\1\u0188"+
    "\2\366\1\372\1\366\2\372\1\366\2\372\4\366\5\372"+
    "\30\366\1\u0189\11\366\1\372\5\366\1\367\1\373\1\0"+
    "\1\373\1\367\1\u0188\1\367\1\373\1\367\2\373\1\367"+
    "\2\373\4\367\5\373\30\367\1\u018a\11\367\1\373\5\367"+
    "\1\370\1\374\1\0\1\374\3\370\1\374\1\u0188\2\374"+
    "\1\370\2\374\4\370\5\374\30\370\1\u018b\11\370\1\374"+
    "\5\370\1\0\1\371\75\0\2\372\1\0\1\372\1\u018c"+
    "\52\372\1\u018d\17\372\2\373\1\0\2\373\1\u018c\51\373"+
    "\1\u018e\17\373\2\374\1\0\5\374\1\u018c\46\374\1\u018f"+
    "\17\374\1\365\3\0\3\365\1\0\1\365\2\0\1\365"+
    "\2\0\4\365\5\0\6\365\1\376\26\365\1\376\4\365"+
    "\1\0\6\365\1\u0190\1\u0191\1\0\3\365\1\u0192\1\365"+
    "\2\u0192\1\365\2\0\4\365\2\0\1\u0192\1\0\1\u0192"+
    "\42\365\1\u0192\5\365\1\0\1\377\75\0\1\u0101\3\0"+
    "\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101\5\0"+
    "\42\u0101\1\0\5\u0101\1\u0102\1\u0106\1\0\1\u0106\1\u0193"+
    "\2\u0102\1\u0106\1\u0102\2\u0106\1\u0102\2\u0106\4\u0102\5\u0106"+
    "\30\u0102\1\u0194\11\u0102\1\u0106\5\u0102\1\u0103\1\u0107\1\0"+
    "\1\u0107\1\u0103\1\u0193\1\u0103\1\u0107\1\u0103\2\u0107\1\u0103"+
    "\2\u0107\4\u0103\5\u0107\30\u0103\1\u0195\11\u0103\1\u0107\5\u0103"+
    "\1\u0104\1\u0108\1\0\1\u0108\3\u0104\1\u0108\1\u0193\2\u0108"+
    "\1\u0104\2\u0108\4\u0104\5\u0108\30\u0104\1\u0196\11\u0104\1\u0108"+
    "\5\u0104\1\0\1\u0105\75\0\2\u0106\1\0\1\u0106\1\u0197"+
    "\52\u0106\1\u0198\17\u0106\2\u0107\1\0\2\u0107\1\u0197\51\u0107"+
    "\1\u0199\17\u0107\2\u0108\1\0\5\u0108\1\u0197\46\u0108\1\u019a"+
    "\17\u0108\1\u0101\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101"+
    "\2\0\4\u0101\5\0\1\u0101\27\u019b\2\u0101\10\u019b\1\0"+
    "\5\u0101\12\u010a\1\u019c\64\u010a\2\u010b\1\u010a\1\u010b\1\u019d"+
    "\5\u010b\1\u019e\44\u010b\1\u019f\17\u010b\2\u010c\1\u010a\2\u010c"+
    "\1\u019d\4\u010c\1\u01a0\44\u010c\1\u01a1\17\u010c\2\u010d\1\u010a"+
    "\5\u010d\1\u019d\1\u010d\1\u01a2\44\u010d\1\u01a3\17\u010d\1\u0101"+
    "\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101"+
    "\5\0\14\u0101\1\u01a4\21\u0101\1\u01a4\3\u0101\1\0\6\u0101"+
    "\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101"+
    "\5\0\14\u0101\1\u01a5\21\u0101\1\u01a5\3\u0101\1\0\6\u0101"+
    "\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101"+
    "\5\0\11\u0101\1\u01a6\30\u0101\1\0\1\u0101\1\u01a6\4\u0101"+
    "\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101"+
    "\5\0\13\u0101\1\u01a7\26\u0101\1\0\4\u0101\1\u01a7\1\u0101"+
    "\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101"+
    "\5\0\5\u0101\1\u01a8\34\u0101\1\0\5\u0101\1\u0116\3\0"+
    "\3\u0116\1\0\1\u0116\2\0\1\u0116\2\0\4\u0116\5\0"+
    "\42\u0116\1\0\5\u0116\1\u0117\1\u011b\1\0\1\u011b\1\u01a9"+
    "\2\u0117\1\u011b\1\u0117\2\u011b\1\u0117\2\u011b\4\u0117\5\u011b"+
    "\30\u0117\1\u01aa\11\u0117\1\u011b\5\u0117\1\u0118\1\u011c\1\0"+
    "\1\u011c\1\u0118\1\u01a9\1\u0118\1\u011c\1\u0118\2\u011c\1\u0118"+
    "\2\u011c\4\u0118\5\u011c\30\u0118\1\u01ab\11\u0118\1\u011c\5\u0118"+
    "\1\u0119\1\u011d\1\0\1\u011d\3\u0119\1\u011d\1\u01a9\2\u011d"+
    "\1\u0119\2\u011d\4\u0119\5\u011d\30\u0119\1\u01ac\11\u0119\1\u011d"+
    "\5\u0119\1\0\1\u011a\75\0\2\u011b\1\0\1\u011b\1\u01ad"+
    "\52\u011b\1\u01ae\17\u011b\2\u011c\1\0\2\u011c\1\u01ad\51\u011c"+
    "\1\u01af\17\u011c\2\u011d\1\0\5\u011d\1\u01ad\46\u011d\1\u01b0"+
    "\17\u011d\2\0\1\u011e\74\0\1\u011f\3\0\3\u011f\1\0"+
    "\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\42\u011f\1\0"+
    "\5\u011f\1\u0120\1\u0124\1\0\1\u0124\1\u01b1\2\u0120\1\u0124"+
    "\1\u0120\2\u0124\1\u0120\2\u0124\4\u0120\5\u0124\30\u0120\1\u01b2"+
    "\11\u0120\1\u0124\5\u0120\1\u0121\1\u0125\1\0\1\u0125\1\u0121"+
    "\1\u01b1\1\u0121\1\u0125\1\u0121\2\u0125\1\u0121\2\u0125\4\u0121"+
    "\5\u0125\30\u0121\1\u01b3\11\u0121\1\u0125\5\u0121\1\u0122\1\u0126"+
    "\1\0\1\u0126\3\u0122\1\u0126\1\u01b1\2\u0126\1\u0122\2\u0126"+
    "\4\u0122\5\u0126\30\u0122\1\u01b4\11\u0122\1\u0126\5\u0122\1\0"+
    "\1\u0123\75\0\2\u0124\1\0\1\u0124\1\u01b5\52\u0124\1\u01b6"+
    "\17\u0124\2\u0125\1\0\2\u0125\1\u01b5\51\u0125\1\u01b7\17\u0125"+
    "\2\u0126\1\0\5\u0126\1\u01b5\46\u0126\1\u01b8\17\u0126\1\u011f"+
    "\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f"+
    "\5\0\6\u011f\1\u01b9\26\u011f\1\u01b9\4\u011f\1\0\6\u011f"+
    "\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f"+
    "\5\0\25\u011f\1\u01ba\14\u011f\1\0\6\u011f\3\0\3\u011f"+
    "\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\22\u011f"+
    "\1\u01bb\15\u011f\1\u01bb\1\u011f\1\0\6\u011f\3\0\3\u011f"+
    "\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\11\u011f"+
    "\1\u01bc\30\u011f\1\0\1\u011f\1\u01bc\4\u011f\3\0\3\u011f"+
    "\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\21\u011f"+
    "\1\u01ba\20\u011f\1\0\6\u011f\3\0\3\u011f\1\0\1\u011f"+
    "\2\0\1\u011f\2\0\4\u011f\5\0\22\u011f\1\u01ba\15\u011f"+
    "\1\u01ba\1\u011f\1\0\6\u011f\3\0\3\u011f\1\0\1\u011f"+
    "\2\0\1\u011f\2\0\4\u011f\5\0\23\u011f\1\u01ba\15\u011f"+
    "\1\u01ba\1\0\2\u011f\1\u01ba\3\u011f\3\0\3\u011f\1\0"+
    "\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\24\u011f\1\u01ba"+
    "\15\u011f\1\0\5\u011f\1\u012f\1\302\1\0\1\302\1\u01bd"+
    "\2\u012f\1\302\1\u012f\2\302\1\u012f\2\302\4\u012f\5\302"+
    "\30\u012f\1\u01be\11\u012f\1\302\5\u012f\1\u0130\1\303\1\0"+
    "\1\303\1\u0130\1\u01bd\1\u0130\1\303\1\u0130\2\303\1\u0130"+
    "\2\303\4\u0130\5\303\30\u0130\1\u01bf\11\u0130\1\303\5\u0130"+
    "\1\u0131\1\304\1\0\1\304\3\u0131\1\304\1\u01bd\2\304"+
    "\1\u0131\2\304\4\u0131\5\304\30\u0131\1\u01c0\11\u0131\1\304"+
    "\5\u0131\1\0\1\u0132\75\0\1\u0133\1\u0124\1\0\1\u0124"+
    "\1\u01c1\2\u0133\1\u0124\1\u0133\2\u0124\1\u0133\2\u0124\4\u0133"+
    "\5\u0124\30\u0133\1\u01c2\11\u0133\1\u0124\5\u0133\1\u0134\1\u0125"+
    "\1\0\1\u0125\1\u0134\1\u01c1\1\u0134\1\u0125\1\u0134\2\u0125"+
    "\1\u0134\2\u0125\4\u0134\5\u0125\30\u0134\1\u01c3\11\u0134\1\u0125"+
    "\5\u0134\1\u0135\1\u0126\1\0\1\u0126\3\u0135\1\u0126\1\u01c1"+
    "\2\u0126\1\u0135\2\u0126\4\u0135\5\u0126\30\u0135\1\u01c4\11\u0135"+
    "\1\u0126\5\u0135\1\0\1\u0136\75\0\2\u0137\1\307\1\u0137"+
    "\1\u01c5\5\u0137\1\u01c6\44\u0137\1\u01c7\17\u0137\2\u0138\1\307"+
    "\2\u0138\1\u01c5\4\u0138\1\u01c8\44\u0138\1\u01c9\17\u0138\2\u0139"+
    "\1\307\5\u0139\1\u01c5\1\u0139\1\u01ca\44\u0139\1\u01cb\17\u0139"+
    "\1\207\3\0\3\207\1\0\1\207\2\0\1\207\2\0"+
    "\2\207\2\u013a\5\0\42\207\1\0\6\207\3\0\3\207"+
    "\1\0\1\207\2\0\1\207\2\0\4\207\5\0\25\207"+
    "\1\u01cc\14\207\1\0\6\207\3\0\3\207\1\0\1\207"+
    "\2\0\1\207\2\0\4\207\5\0\21\207\1\u01cc\20\207"+
    "\1\0\6\207\3\0\3\207\1\0\1\207\2\0\1\207"+
    "\2\0\4\207\5\0\22\207\1\u01cc\15\207\1\u01cc\1\207"+
    "\1\0\6\207\3\0\3\207\1\0\1\207\2\0\1\207"+
    "\2\0\4\207\5\0\23\207\1\u01cc\15\207\1\u01cc\1\0"+
    "\2\207\1\u01cc\3\207\3\0\3\207\1\0\1\207\2\0"+
    "\1\207\2\0\4\207\5\0\24\207\1\u01cc\15\207\1\0"+
    "\5\207\1\243\3\0\3\243\1\0\1\243\2\0\1\243"+
    "\2\0\2\243\2\u01cd\5\0\42\243\1\0\5\243\1\u0144"+
    "\3\0\3\u0144\1\0\1\u0144\2\0\1\u0144\2\0\4\u0144"+
    "\5\0\42\u0144\1\0\5\u0144\1\0\1\u0145\11\0\2\u0146"+
    "\1\0\2\u0146\5\0\1\u0147\76\0\1\u01ce\51\0\1\u014a"+
    "\3\0\3\u014a\1\0\1\u014a\2\0\1\u014a\2\0\4\u014a"+
    "\5\0\42\u014a\1\0\5\u014a\1\u014b\1\u014f\1\0\1\u014f"+
    "\1\u014a\2\u014b\1\u014f\1\u014b\2\u014f\1\u014b\2\u014f\4\u014b"+
    "\5\u014f\30\u014b\1\u01cf\11\u014b\1\u014f\5\u014b\1\u014c\1\u0150"+
    "\1\0\1\u0150\1\u014c\1\u014a\1\u014c\1\u0150\1\u014c\2\u0150"+
    "\1\u014c\2\u0150\4\u014c\5\u0150\30\u014c\1\u01d0\11\u014c\1\u0150"+
    "\5\u014c\1\u014d\1\u0151\1\0\1\u0151\3\u014d\1\u0151\1\u014a"+
    "\2\u0151\1\u014d\2\u0151\4\u014d\5\u0151\30\u014d\1\u01d1\11\u014d"+
    "\1\u0151\5\u014d\1\0\1\u014e\75\0\2\u014f\1\0\1\u014f"+
    "\1\u01d2\52\u014f\1\u01d3\17\u014f\2\u0150\1\0\2\u0150\1\u01d2"+
    "\51\u0150\1\u01d4\17\u0150\2\u0151\1\0\5\u0151\1\u01d2\46\u0151"+
    "\1\u01d5\17\u0151\1\u014a\3\0\3\u014a\1\0\1\u014a\2\0"+
    "\1\u014a\2\0\2\u014a\2\u01d6\5\0\42\u014a\1\0\1\u01d6"+
    "\5\u014a\3\0\3\u014a\1\0\1\u014a\2\0\1\u014a\2\0"+
    "\2\u014a\2\u0153\5\0\42\u014a\1\0\5\u014a\1\276\1\302"+
    "\1\0\1\302\1\u01d7\2\276\1\302\1\276\2\302\1\276"+
    "\2\302\4\276\5\302\30\276\1\u0155\11\276\1\302\5\276"+
    "\1\277\1\303\1\0\1\303\1\277\1\u01d8\1\277\1\303"+
    "\1\277\2\303\1\277\2\303\4\277\5\303\30\277\1\u0156"+
    "\11\277\1\303\5\277\1\300\1\304\1\0\1\304\3\300"+
    "\1\304\1\u01d9\2\304\1\300\2\304\4\300\5\304\30\300"+
    "\1\u0157\11\300\1\304\5\300\2\302\1\0\1\302\1\u01da"+
    "\52\302\1\u0159\17\302\2\303\1\0\2\303\1\u01db\51\303"+
    "\1\u015a\17\303\2\304\1\0\5\304\1\u01dc\46\304\1\u015b"+
    "\17\304\2\310\1\307\1\310\1\u01dd\5\310\1\u015f\44\310"+
    "\1\u0160\17\310\2\311\1\307\2\311\1\u01de\4\311\1\u0161"+
    "\44\311\1\u0162\17\311\2\312\1\307\5\312\1\u01df\1\312"+
    "\1\u0163\44\312\1\u0164\17\312\1\315\1\302\1\0\1\302"+
    "\3\315\1\302\1\315\2\302\1\315\2\302\4\315\5\302"+
    "\30\315\1\u0165\11\315\1\302\5\315\1\316\1\303\1\0"+
    "\1\303\3\316\1\303\1\316\2\303\1\316\2\303\4\316"+
    "\5\303\30\316\1\u0166\11\316\1\303\5\316\1\317\1\304"+
    "\1\0\1\304\3\317\1\304\1\317\2\304\1\317\2\304"+
    "\4\317\5\304\30\317\1\u0167\11\317\1\304\5\317\1\314"+
    "\3\0\3\314\1\0\1\314\2\0\1\314\2\0\4\314"+
    "\5\0\15\314\1\u01e0\24\314\1\0\5\314\1\50\3\0"+
    "\3\50\1\0\1\50\2\0\1\50\2\0\4\50\5\0"+
    "\17\50\1\u01e1\22\50\1\0\5\50\1\326\1\332\1\0"+
    "\1\332\3\326\1\332\1\326\2\332\1\326\2\332\4\326"+
    "\5\332\30\326\1\u016c\11\326\1\332\5\326\1\327\1\333"+
    "\1\0\1\333\3\327\1\333\1\327\2\333\1\327\2\333"+
    "\4\327\5\333\30\327\1\u016d\11\327\1\333\5\327\1\330"+
    "\1\334\1\0\1\334\3\330\1\334\1\330\2\334\1\330"+
    "\2\334\4\330\5\334\30\330\1\u016e\11\330\1\334\5\330"+
    "\2\332\1\0\1\332\1\u01e2\52\332\1\u0170\17\332\2\333"+
    "\1\0\2\333\1\u01e3\51\333\1\u0171\17\333\2\334\1\0"+
    "\5\334\1\u01e4\46\334\1\u0172\17\334\1\341\1\345\1\0"+
    "\1\345\1\u01e5\2\341\1\345\1\341\2\345\1\341\2\345"+
    "\4\341\5\345\30\341\1\u0175\11\341\1\345\5\341\1\342"+
    "\1\346\1\0\1\346\1\342\1\u01e6\1\342\1\346\1\342"+
    "\2\346\1\342\2\346\4\342\5\346\30\342\1\u0176\11\342"+
    "\1\346\5\342\1\343\1\347\1\0\1\347\3\343\1\347"+
    "\1\u01e7\2\347\1\343\2\347\4\343\5\347\30\343\1\u0177"+
    "\11\343\1\347\5\343\2\345\1\0\1\345\1\u01e8\52\345"+
    "\1\u0179\17\345\2\346\1\0\2\346\1\u01e9\51\346\1\u017a"+
    "\17\346\2\347\1\0\5\347\1\u01ea\46\347\1\u017b\17\347"+
    "\1\340\3\0\3\340\1\0\1\340\2\0\1\340\2\0"+
    "\4\340\5\0\17\340\1\u01eb\22\340\1\0\6\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\1\340\1\u01ec\30\340\1\u01ec\7\340\1\0\6\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\14\340\1\u01ed\21\340\1\u01ed\3\340\1\0\6\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\17\340\1\u01ee\22\340\1\0\6\340\3\0\3\340\1\0"+
    "\1\340\2\0\1\340\2\0\4\340\5\0\5\340\1\u01ef"+
    "\34\340\1\0\6\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\14\340\1\u01f0\21\340\1\u01f0"+
    "\3\340\1\0\6\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\24\340\1\u01f1\15\340\1\0"+
    "\6\340\3\0\3\340\1\0\1\340\2\0\1\340\2\0"+
    "\4\340\5\0\17\340\1\u01f2\22\340\1\0\6\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\5\340\1\u01f3\34\340\1\0\6\340\3\0\3\340\1\0"+
    "\1\340\2\0\1\340\2\0\4\340\5\0\14\340\1\u01f4"+
    "\21\340\1\u01f4\3\340\1\0\6\340\3\0\3\340\1\0"+
    "\1\340\2\0\1\340\2\0\4\340\5\0\6\340\1\u01f5"+
    "\26\340\1\u01f5\4\340\1\0\5\340\1\366\1\372\1\0"+
    "\1\372\1\u01f6\2\366\1\372\1\366\2\372\1\366\2\372"+
    "\4\366\5\372\30\366\1\u0189\11\366\1\372\5\366\1\367"+
    "\1\373\1\0\1\373\1\367\1\u01f7\1\367\1\373\1\367"+
    "\2\373\1\367\2\373\4\367\5\373\30\367\1\u018a\11\367"+
    "\1\373\5\367\1\370\1\374\1\0\1\374\3\370\1\374"+
    "\1\u01f8\2\374\1\370\2\374\4\370\5\374\30\370\1\u018b"+
    "\11\370\1\374\5\370\2\372\1\0\1\372\1\u01f9\52\372"+
    "\1\u018d\17\372\2\373\1\0\2\373\1\u01fa\51\373\1\u018e"+
    "\17\373\2\374\1\0\5\374\1\u01fb\46\374\1\u018f\17\374"+
    "\1\0\1\u0190\1\u0191\4\0\1\u0192\1\0\2\u0192\11\0"+
    "\1\u0192\1\0\1\u0192\42\0\1\u0192\7\0\1\u0191\74\0"+
    "\1\u0102\1\u0106\1\0\1\u0106\1\u01fc\2\u0102\1\u0106\1\u0102"+
    "\2\u0106\1\u0102\2\u0106\4\u0102\5\u0106\30\u0102\1\u0194\11\u0102"+
    "\1\u0106\5\u0102\1\u0103\1\u0107\1\0\1\u0107\1\u0103\1\u01fd"+
    "\1\u0103\1\u0107\1\u0103\2\u0107\1\u0103\2\u0107\4\u0103\5\u0107"+
    "\30\u0103\1\u0195\11\u0103\1\u0107\5\u0103\1\u0104\1\u0108\1\0"+
    "\1\u0108\3\u0104\1\u0108\1\u01fe\2\u0108\1\u0104\2\u0108\4\u0104"+
    "\5\u0108\30\u0104\1\u0196\11\u0104\1\u0108\5\u0104\2\u0106\1\0"+
    "\1\u0106\1\u01ff\52\u0106\1\u0198\17\u0106\2\u0107\1\0\2\u0107"+
    "\1\u0200\51\u0107\1\u0199\17\u0107\2\u0108\1\0\5\u0108\1\u0201"+
    "\46\u0108\1\u019a\17\u0108\2\u010b\1\u010a\1\u010b\1\u0202\5\u010b"+
    "\1\u019e\44\u010b\1\u019f\17\u010b\2\u010c\1\u010a\2\u010c\1\u0203"+
    "\4\u010c\1\u01a0\44\u010c\1\u01a1\17\u010c\2\u010d\1\u010a\5\u010d"+
    "\1\u0204\1\u010d\1\u01a2\44\u010d\1\u01a3\17\u010d\1\u0101\3\0"+
    "\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101\5\0"+
    "\11\u0101\1\u0205\30\u0101\1\0\1\u0101\1\u0205\4\u0101\3\0"+
    "\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101\3\0"+
    "\1\u0206\1\0\42\u0101\1\0\6\u0101\3\0\3\u0101\1\0"+
    "\1\u0101\2\0\1\u0101\2\0\4\u0101\5\0\20\u0101\1\u0207"+
    "\16\u0101\1\u0207\2\u0101\1\0\6\u0101\3\0\3\u0101\1\0"+
    "\1\u0101\2\0\1\u0101\2\0\4\u0101\5\0\5\u0101\1\u0208"+
    "\34\u0101\1\0\6\u0101\3\0\3\u0101\1\0\1\u0101\2\0"+
    "\1\u0101\2\0\4\u0101\5\0\2\u0101\1\u0209\37\u0101\1\0"+
    "\5\u0101\1\u0117\1\u011b\1\0\1\u011b\1\u020a\2\u0117\1\u011b"+
    "\1\u0117\2\u011b\1\u0117\2\u011b\4\u0117\5\u011b\30\u0117\1\u01aa"+
    "\11\u0117\1\u011b\5\u0117\1\u0118\1\u011c\1\0\1\u011c\1\u0118"+
    "\1\u020b\1\u0118\1\u011c\1\u0118\2\u011c\1\u0118\2\u011c\4\u0118"+
    "\5\u011c\30\u0118\1\u01ab\11\u0118\1\u011c\5\u0118\1\u0119\1\u011d"+
    "\1\0\1\u011d\3\u0119\1\u011d\1\u020c\2\u011d\1\u0119\2\u011d"+
    "\4\u0119\5\u011d\30\u0119\1\u01ac\11\u0119\1\u011d\5\u0119\2\u011b"+
    "\1\0\1\u011b\1\u020d\52\u011b\1\u01ae\17\u011b\2\u011c\1\0"+
    "\2\u011c\1\u020e\51\u011c\1\u01af\17\u011c\2\u011d\1\0\5\u011d"+
    "\1\u020f\46\u011d\1\u01b0\17\u011d\1\u0120\1\u0124\1\0\1\u0124"+
    "\1\u0210\2\u0120\1\u0124\1\u0120\2\u0124\1\u0120\2\u0124\4\u0120"+
    "\5\u0124\30\u0120\1\u01b2\11\u0120\1\u0124\5\u0120\1\u0121\1\u0125"+
    "\1\0\1\u0125\1\u0121\1\u0211\1\u0121\1\u0125\1\u0121\2\u0125"+
    "\1\u0121\2\u0125\4\u0121\5\u0125\30\u0121\1\u01b3\11\u0121\1\u0125"+
    "\5\u0121\1\u0122\1\u0126\1\0\1\u0126\3\u0122\1\u0126\1\u0212"+
    "\2\u0126\1\u0122\2\u0126\4\u0122\5\u0126\30\u0122\1\u01b4\11\u0122"+
    "\1\u0126\5\u0122\2\u0124\1\0\1\u0124\1\u0213\52\u0124\1\u01b6"+
    "\17\u0124\2\u0125\1\0\2\u0125\1\u0214\51\u0125\1\u01b7\17\u0125"+
    "\2\u0126\1\0\5\u0126\1\u0215\46\u0126\1\u01b8\17\u0126\1\u011f"+
    "\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f"+
    "\5\0\11\u011f\1\u0216\30\u011f\1\0\1\u011f\1\u0216\4\u011f"+
    "\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f"+
    "\5\0\17\u011f\1\u0217\22\u011f\1\0\6\u011f\3\0\3\u011f"+
    "\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\23\u011f"+
    "\1\u0218\15\u011f\1\u0218\1\0\2\u011f\1\u0218\2\u011f\1\u012f"+
    "\1\302\1\0\1\302\1\u0219\2\u012f\1\302\1\u012f\2\302"+
    "\1\u012f\2\302\4\u012f\5\302\30\u012f\1\u01be\11\u012f\1\302"+
    "\5\u012f\1\u0130\1\303\1\0\1\303\1\u0130\1\u021a\1\u0130"+
    "\1\303\1\u0130\2\303\1\u0130\2\303\4\u0130\5\303\30\u0130"+
    "\1\u01bf\11\u0130\1\303\5\u0130\1\u0131\1\304\1\0\1\304"+
    "\3\u0131\1\304\1\u021b\2\304\1\u0131\2\304\4\u0131\5\304"+
    "\30\u0131\1\u01c0\11\u0131\1\304\5\u0131\1\u0133\1\u0124\1\0"+
    "\1\u0124\1\u021c\2\u0133\1\u0124\1\u0133\2\u0124\1\u0133\2\u0124"+
    "\4\u0133\5\u0124\30\u0133\1\u01c2\11\u0133\1\u0124\5\u0133\1\u0134"+
    "\1\u0125\1\0\1\u0125\1\u0134\1\u021d\1\u0134\1\u0125\1\u0134"+
    "\2\u0125\1\u0134\2\u0125\4\u0134\5\u0125\30\u0134\1\u01c3\11\u0134"+
    "\1\u0125\5\u0134\1\u0135\1\u0126\1\0\1\u0126\3\u0135\1\u0126"+
    "\1\u021e\2\u0126\1\u0135\2\u0126\4\u0135\5\u0126\30\u0135\1\u01c4"+
    "\11\u0135\1\u0126\5\u0135\2\u0137\1\307\1\u0137\1\u021f\5\u0137"+
    "\1\u01c6\44\u0137\1\u01c7\17\u0137\2\u0138\1\307\2\u0138\1\u0220"+
    "\4\u0138\1\u01c8\44\u0138\1\u01c9\17\u0138\2\u0139\1\307\5\u0139"+
    "\1\u0221\1\u0139\1\u01ca\44\u0139\1\u01cb\17\u0139\1\u014b\1\u014f"+
    "\1\0\1\u014f\3\u014b\1\u014f\1\u014b\2\u014f\1\u014b\2\u014f"+
    "\4\u014b\5\u014f\30\u014b\1\u01cf\11\u014b\1\u014f\5\u014b\1\u014c"+
    "\1\u0150\1\0\1\u0150\3\u014c\1\u0150\1\u014c\2\u0150\1\u014c"+
    "\2\u0150\4\u014c\5\u0150\30\u014c\1\u01d0\11\u014c\1\u0150\5\u014c"+
    "\1\u014d\1\u0151\1\0\1\u0151\3\u014d\1\u0151\1\u014d\2\u0151"+
    "\1\u014d\2\u0151\4\u014d\5\u0151\30\u014d\1\u01d1\11\u014d\1\u0151"+
    "\5\u014d\2\u014f\1\0\1\u014f\1\u0222\52\u014f\1\u01d3\17\u014f"+
    "\2\u0150\1\0\2\u0150\1\u0223\51\u0150\1\u01d4\17\u0150\2\u0151"+
    "\1\0\5\u0151\1\u0224\46\u0151\1\u01d5\17\u0151\1\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\3\340\1\u0225\27\340\1\u0225\6\340\1\0\6\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\13\340\1\u0226\26\340\1\0\4\340\1\u0226\1\340\3\0"+
    "\3\340\1\0\1\340\2\0\1\340\2\0\4\340\5\0"+
    "\17\340\1\u0227\22\340\1\0\6\340\3\0\3\340\1\0"+
    "\1\340\2\0\1\340\2\0\4\340\5\0\17\340\1\u0228"+
    "\22\340\1\0\6\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\24\340\1\u0229\15\340\1\0"+
    "\5\340\1\u0101\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101"+
    "\2\0\4\u0101\5\0\15\u0101\1\u022a\24\u0101\1\0\5\u0101"+
    "\20\0\2\u022b\6\0\27\u022b\1\0\11\u022b\2\0\4\u022b"+
    "\1\u0101\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0"+
    "\4\u0101\3\0\1\u022c\1\0\42\u0101\1\0\6\u0101\3\0"+
    "\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0\4\u0101\5\0"+
    "\16\u0101\1\u022d\23\u0101\1\0\6\u0101\3\0\3\u0101\1\0"+
    "\1\u0101\2\0\1\u0101\2\0\4\u0101\5\0\1\u0101\1\u022e"+
    "\30\u0101\1\u022e\7\u0101\1\0\5\u0101\1\u011f\3\0\3\u011f"+
    "\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\16\u011f"+
    "\1\u022f\23\u011f\1\0\6\u011f\3\0\3\u011f\1\0\1\u011f"+
    "\2\0\1\u011f\2\0\4\u011f\5\0\22\u011f\1\u0230\15\u011f"+
    "\1\u0230\1\u011f\1\0\6\u011f\3\0\3\u011f\1\0\1\u011f"+
    "\2\0\1\u011f\2\0\4\u011f\5\0\24\u011f\1\u0231\15\u011f"+
    "\1\0\5\u011f\1\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\3\340\1\u0232\27\340\1\u0232"+
    "\6\340\1\0\6\340\3\0\3\340\1\0\1\340\2\0"+
    "\1\340\2\0\4\340\5\0\3\340\1\u0233\27\340\1\u0233"+
    "\6\340\1\0\5\340\1\u0101\3\0\3\u0101\1\0\1\u0101"+
    "\2\0\1\u0101\2\0\4\u0101\5\0\23\u0101\1\u0234\15\u0101"+
    "\1\u0234\1\0\2\u0101\1\u0234\2\u0101\20\0\2\u0235\53\0"+
    "\1\u0235\1\0\1\u0101\3\0\3\u0101\1\0\1\u0101\2\0"+
    "\1\u0101\2\0\4\u0101\5\0\23\u0101\1\u0236\15\u0101\1\u0236"+
    "\1\0\2\u0101\1\u0236\3\u0101\3\0\3\u0101\1\0\1\u0101"+
    "\2\0\1\u0101\2\0\4\u0101\5\0\3\u0101\1\u0237\27\u0101"+
    "\1\u0237\6\u0101\1\0\5\u0101\1\u011f\3\0\3\u011f\1\0"+
    "\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\5\u011f\1\u0238"+
    "\34\u011f\1\0\6\u011f\3\0\3\u011f\1\0\1\u011f\2\0"+
    "\1\u011f\2\0\4\u011f\5\0\14\u011f\1\u0239\21\u011f\1\u0239"+
    "\3\u011f\1\0\5\u011f\1\340\3\0\3\340\1\0\1\340"+
    "\2\0\1\340\2\0\4\340\5\0\1\340\1\u023a\30\340"+
    "\1\u023a\7\340\1\0\6\340\3\0\3\340\1\0\1\340"+
    "\2\0\1\340\2\0\4\340\5\0\1\340\1\u023b\30\340"+
    "\1\u023b\7\340\1\0\5\340\1\u0101\3\0\3\u0101\1\0"+
    "\1\u0101\2\0\1\u0101\2\0\4\u0101\3\0\1\u023c\1\0"+
    "\42\u0101\1\0\6\u0101\3\0\3\u0101\1\0\1\u0101\2\0"+
    "\1\u0101\2\0\4\u0101\3\0\1\u023d\1\0\42\u0101\1\0"+
    "\6\u0101\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101\2\0"+
    "\4\u0101\5\0\13\u0101\1\u023e\26\u0101\1\0\4\u0101\1\u023e"+
    "\1\u011f\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0"+
    "\4\u011f\5\0\4\u011f\1\u0231\27\u011f\1\u0231\5\u011f\1\0"+
    "\6\u011f\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0"+
    "\4\u011f\5\0\5\u011f\1\u023f\34\u011f\1\0\5\u011f\1\340"+
    "\3\0\3\340\1\0\1\340\2\0\1\340\2\0\4\340"+
    "\5\0\14\340\1\u0240\21\340\1\u0240\3\340\1\0\6\340"+
    "\3\0\3\340\1\0\1\340\2\0\1\340\2\0\4\340"+
    "\5\0\14\340\1\u0241\21\340\1\u0241\3\340\1\0\5\340"+
    "\13\0\2\u022b\1\0\4\u022b\3\0\1\u022b\2\0\27\u022b"+
    "\1\0\11\u022b\2\0\4\u022b\20\0\2\u0242\53\0\1\u0242"+
    "\1\0\1\u0101\3\0\3\u0101\1\0\1\u0101\2\0\1\u0101"+
    "\2\0\4\u0101\5\0\21\u0101\1\u0243\20\u0101\1\0\5\u0101"+
    "\1\u011f\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f\2\0"+
    "\4\u011f\5\0\26\u011f\1\u0244\13\u011f\1\0\5\u011f\13\0"+
    "\1\u022b\1\0\1\u023d\1\u0245\60\0\1\u011f\3\0\3\u011f"+
    "\1\0\1\u011f\2\0\1\u011f\2\0\4\u011f\5\0\5\u011f"+
    "\1\u0246\34\u011f\1\0\5\u011f\20\0\2\u0247\53\0\1\u0247"+
    "\1\0\1\u011f\3\0\3\u011f\1\0\1\u011f\2\0\1\u011f"+
    "\2\0\4\u011f\5\0\14\u011f\1\u0248\21\u011f\1\u0248\3\u011f"+
    "\1\0\5\u011f\13\0\1\u022b\1\0\1\u023d\61\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27531];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\3\1\1\0\7\1\1\11\6\1\1\11\6\1"+
    "\1\11\5\1\1\0\4\1\1\11\7\1\1\11\3\1"+
    "\1\0\21\1\1\0\15\1\1\0\21\1\1\0\5\1"+
    "\1\0\54\1\1\11\7\1\1\0\14\1\3\0\1\1"+
    "\1\11\4\0\1\11\4\1\1\0\3\1\1\11\5\1"+
    "\3\0\10\1\3\0\22\1\3\0\11\1\3\0\1\1"+
    "\4\0\15\1\3\0\6\1\3\0\20\1\3\0\1\1"+
    "\1\11\11\1\2\0\1\11\7\1\3\0\6\1\1\11"+
    "\3\0\4\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\6\1\1\11\3\0\5\1\1\11\3\0\20\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\3\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\11\1\1\11\3\0"+
    "\4\1\1\11\3\0\16\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\3\1\1\11\3\0\60\1\1\0"+
    "\44\1\1\11\1\0\20\1\1\0\7\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[584];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 98: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 99: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 100: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 101: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 102: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 103: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 104: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 105: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 106: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 107: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 108: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 109: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 110: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 111: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 112: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 113: break;
          case 17:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 114: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 115: break;
          case 19:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 116: break;
          case 20:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 117: break;
          case 21:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 118: break;
          case 22:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 119: break;
          case 23:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 24:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 121: break;
          case 25:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 122: break;
          case 26:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 123: break;
          case 27:
            { yybegin(FOR); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 124: break;
          case 28:
            { yybegin(FOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 125: break;
          case 29:
            { yybegin(FOR); yypushback(yylength()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 126: break;
          case 30:
            { yybegin(FOR_COLLECTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 127: break;
          case 31:
            { yybegin(FOR); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 128: break;
          case 32:
            { yybegin(IF_STANDARD); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 129: break;
          case 33:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 34:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 131: break;
          case 35:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 132: break;
          case 36:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 133: break;
          case 37:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 134: break;
          case 38:
            { yybegin(IF_STANDARD); return BatchTypes.NUMERIC;
            }
          // fall through
          case 135: break;
          case 39:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 136: break;
          case 40:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 137: break;
          case 41:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 138: break;
          case 42:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 139: break;
          case 43:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 140: break;
          case 44:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 141: break;
          case 45:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 142: break;
          case 46:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 143: break;
          case 47:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 144: break;
          case 48:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 145: break;
          case 49:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 146: break;
          case 50:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 147: break;
          case 51:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 148: break;
          case 52:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 149: break;
          case 53:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 150: break;
          case 54:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 151: break;
          case 55:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 152: break;
          case 56:
            { yybegin(FOR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 153: break;
          case 57:
            { yybegin(YYINITIAL); return BatchTypes.DO_COMMAND;
            }
          // fall through
          case 154: break;
          case 58:
            { yybegin(FOR); return BatchTypes.IN_COMMAND;
            }
          // fall through
          case 155: break;
          case 59:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 156: break;
          case 60:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 157: break;
          case 61:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 158: break;
          case 62:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 159: break;
          case 63:
            { yybegin(SET); return BatchTypes.EXTENSION;
            }
          // fall through
          case 160: break;
          case 64:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 161: break;
          case 65:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 162: break;
          case 66:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 163: break;
          case 67:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 164: break;
          case 68:
            { yybegin(ASSOC_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 165: break;
          case 69:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 166: break;
          case 70:
            { yybegin(FOR); return BatchTypes.FOR_COMMAND;
            }
          // fall through
          case 167: break;
          case 71:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 168: break;
          case 72:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 169: break;
          case 73:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 170: break;
          case 74:
            { yybegin(YYINITIAL); yypushback(1); return BatchTypes.TOGGLE;
            }
          // fall through
          case 171: break;
          case 75:
            { yybegin(FOR); return BatchTypes.STRING;
            }
          // fall through
          case 172: break;
          case 76:
            { yybegin(FOR); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 173: break;
          case 77:
            { yybegin(FOR_COLLECTION); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 174: break;
          case 78:
            { yybegin(FOR_COLLECTION); return BatchTypes.STRING;
            }
          // fall through
          case 175: break;
          case 79:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 176: break;
          case 80:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 177: break;
          case 81:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 178: break;
          case 82:
            { ybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 179: break;
          case 83:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 180: break;
          case 84:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 181: break;
          case 85:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 182: break;
          case 86:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 183: break;
          case 87:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 184: break;
          case 88:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 185: break;
          case 89:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 186: break;
          case 90:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 187: break;
          case 91:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 188: break;
          case 92:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 189: break;
          case 93:
            { yybegin(FOR); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 190: break;
          case 94:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 191: break;
          case 95:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 192: break;
          case 96:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 193: break;
          case 97:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
