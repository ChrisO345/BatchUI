// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Batch.flex

package io.github.chriso345.batchui.lexer;

import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import io.github.chriso345.batchui.psi.BatchTypes;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


class BatchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int ASSOC = 4;
  public static final int ASSOC_VALUE = 6;
  public static final int BREAK = 8;
  public static final int CALL = 10;
  public static final int COMMAND = 12;
  public static final int ECHO = 14;
  public static final int ECHO_STRING = 16;
  public static final int EXIT = 18;
  public static final int FOR = 20;
  public static final int FOR_COLLECTION = 22;
  public static final int GOTO = 24;
  public static final int IF = 26;
  public static final int IF_ERRORLEVEL = 28;
  public static final int IF_EXIST = 30;
  public static final int IF_STANDARD = 32;
  public static final int LABEL = 34;
  public static final int MORE = 36;
  public static final int REM = 38;
  public static final int SET = 40;
  public static final int SET_LOCAL = 42;
  public static final int SHIFT = 44;
  public static final int SET_VALUE = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  5,  5, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\11\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\41\1\56\2\41"+
    "\1\0\1\57\2\0\1\60\1\0\1\61\1\31\1\62"+
    "\1\63\1\34\1\64\1\36\1\37\1\40\1\41\1\42"+
    "\1\65\1\44\1\45\1\46\1\66\1\50\1\67\1\70"+
    "\1\53\1\54\1\55\1\41\1\56\2\41\1\0\1\71"+
    "\1\0\1\72\53\0\1\60\12\0\1\60\4\0\1\60"+
    "\5\0\27\60\1\0\37\60\1\0\70\60\2\73\115\60"+
    "\1\74\u0142\60\4\0\14\60\16\0\5\60\7\0\1\60"+
    "\1\0\1\60\21\0\165\60\1\0\2\60\2\0\4\60"+
    "\1\0\1\60\6\0\1\60\1\0\3\60\1\0\1\60"+
    "\1\0\24\60\1\0\123\60\1\0\213\60\1\0\255\60"+
    "\1\0\46\60\2\0\1\60\6\0\51\60\10\0\55\60"+
    "\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60"+
    "\10\0\33\60\4\0\4\60\35\0\13\60\5\0\100\60"+
    "\12\75\4\0\146\60\1\0\10\60\2\0\12\60\1\0"+
    "\6\60\12\75\3\60\2\0\1\60\20\0\73\60\2\0"+
    "\145\60\16\0\12\75\54\60\4\0\1\60\2\0\1\60"+
    "\2\0\56\60\22\0\34\60\4\0\13\60\65\0\25\60"+
    "\1\0\10\60\25\0\17\60\1\0\201\60\2\0\12\75"+
    "\1\0\23\60\1\0\10\60\2\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\1\60\3\0\4\60\2\0\11\60"+
    "\2\0\2\60\2\0\4\60\10\0\1\60\4\0\2\60"+
    "\1\0\5\60\2\0\12\75\2\60\12\0\1\60\1\0"+
    "\1\60\2\0\3\60\1\0\6\60\4\0\2\60\2\0"+
    "\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0"+
    "\2\60\2\0\1\60\1\0\5\60\4\0\2\60\2\0"+
    "\3\60\3\0\1\60\7\0\4\60\1\0\1\60\7\0"+
    "\12\75\6\60\13\0\3\60\1\0\11\60\1\0\3\60"+
    "\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\12\60\1\0\3\60\1\0\3\60\2\0\1\60"+
    "\17\0\4\60\2\0\12\75\11\0\7\60\1\0\3\60"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\5\60\2\0\11\60\2\0\2\60"+
    "\2\0\3\60\10\0\2\60\4\0\2\60\1\0\5\60"+
    "\2\0\12\75\1\0\1\60\20\0\2\60\1\0\6\60"+
    "\3\0\3\60\1\0\4\60\3\0\2\60\1\0\1\60"+
    "\1\0\2\60\3\0\2\60\3\0\3\60\3\0\14\60"+
    "\4\0\5\60\3\0\3\60\1\0\4\60\2\0\1\60"+
    "\6\0\1\60\16\0\12\75\20\0\15\60\1\0\3\60"+
    "\1\0\27\60\1\0\20\60\3\0\10\60\1\0\3\60"+
    "\1\0\4\60\7\0\2\60\1\0\3\60\5\0\4\60"+
    "\2\0\12\75\20\0\4\60\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\11\60"+
    "\1\0\3\60\1\0\4\60\7\0\2\60\7\0\1\60"+
    "\1\0\4\60\2\0\12\75\1\0\2\60\15\0\4\60"+
    "\1\0\10\60\1\0\3\60\1\0\63\60\1\0\3\60"+
    "\1\0\5\60\5\0\4\60\7\0\5\60\2\0\12\75"+
    "\12\0\6\60\2\0\2\60\1\0\22\60\3\0\30\60"+
    "\1\0\11\60\1\0\1\60\2\0\7\60\3\0\1\60"+
    "\4\0\6\60\1\0\1\60\1\0\10\60\6\0\12\75"+
    "\2\0\2\60\15\0\72\60\5\0\17\60\1\0\12\75"+
    "\47\0\2\60\1\0\1\60\1\0\5\60\1\0\30\60"+
    "\1\0\1\60\1\0\27\60\2\0\5\60\1\0\1\60"+
    "\1\0\6\60\2\0\12\75\2\0\4\60\40\0\1\60"+
    "\27\0\2\60\6\0\12\75\13\0\1\60\1\0\1\60"+
    "\1\0\1\60\4\0\12\60\1\0\44\60\4\0\24\60"+
    "\1\0\22\60\1\0\44\60\11\0\1\60\71\0\100\60"+
    "\12\75\6\0\100\60\12\75\4\60\2\0\46\60\1\0"+
    "\1\60\5\0\1\60\2\0\53\60\1\0\u014d\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0"+
    "\51\60\1\0\4\60\2\0\41\60\1\0\4\60\2\0"+
    "\7\60\1\0\1\60\1\0\4\60\2\0\17\60\1\0"+
    "\71\60\1\0\4\60\2\0\103\60\2\0\3\60\40\0"+
    "\20\60\20\0\126\60\2\0\6\60\3\0\u016c\60\2\0"+
    "\21\60\1\0\32\60\5\0\113\60\3\0\13\60\7\0"+
    "\15\60\1\0\7\60\13\0\25\60\13\0\24\60\14\0"+
    "\15\60\1\0\3\60\1\0\2\60\14\0\124\60\3\0"+
    "\1\60\4\0\2\60\2\0\12\75\41\0\3\60\2\0"+
    "\12\75\6\0\131\60\7\0\53\60\5\0\106\60\12\0"+
    "\37\60\1\0\14\60\4\0\14\60\12\0\12\75\36\60"+
    "\2\0\5\60\13\0\54\60\4\0\32\60\6\0\12\75"+
    "\46\0\34\60\4\0\77\60\1\0\35\60\2\0\1\60"+
    "\12\75\6\0\12\75\15\0\1\60\10\0\17\60\101\0"+
    "\114\60\4\0\12\75\21\0\11\60\14\0\60\60\12\75"+
    "\72\60\14\0\70\60\10\0\12\75\3\0\3\60\12\75"+
    "\44\60\2\0\11\60\7\0\53\60\2\0\3\60\20\0"+
    "\3\60\1\0\47\60\5\0\372\60\1\0\33\60\2\0"+
    "\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0"+
    "\65\60\1\0\7\60\1\0\1\60\3\0\3\60\1\0"+
    "\7\60\3\0\4\60\2\0\6\60\4\0\15\60\5\0"+
    "\3\60\1\0\7\60\102\0\2\60\23\0\1\60\34\0"+
    "\1\60\15\0\1\60\20\0\15\60\63\0\41\60\21\0"+
    "\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0"+
    "\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\76\3\60\1\0\13\60\2\0\4\60\5\0\5\60"+
    "\4\0\1\60\21\0\51\60\u022d\0\64\60\26\0\57\60"+
    "\1\0\57\60\1\0\205\60\6\0\11\60\14\0\46\60"+
    "\1\0\1\60\5\0\1\60\2\0\70\60\7\0\1\60"+
    "\17\0\30\60\11\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\40\60\57\0\1\60\325\0\3\60"+
    "\31\0\17\60\1\0\5\60\2\0\5\60\4\0\126\60"+
    "\2\0\2\60\2\0\3\60\1\0\132\60\1\0\4\60"+
    "\5\0\53\60\1\0\136\60\21\0\33\60\65\0\306\60"+
    "\112\0\360\60\20\0\215\60\103\0\56\60\2\0\15\60"+
    "\3\0\20\60\12\75\2\60\24\0\63\60\1\0\12\60"+
    "\1\0\163\60\45\0\11\60\2\0\147\60\2\0\65\60"+
    "\2\0\5\60\60\0\61\60\30\0\64\60\14\0\106\60"+
    "\12\0\12\75\6\0\30\60\3\0\1\60\1\0\3\60"+
    "\12\75\44\60\2\0\44\60\14\0\35\60\3\0\101\60"+
    "\16\0\1\60\12\75\6\0\20\60\12\75\5\60\1\0"+
    "\67\60\11\0\16\60\2\0\12\75\6\0\27\60\3\0"+
    "\111\60\30\0\3\60\2\0\20\60\2\0\5\60\12\0"+
    "\6\60\2\0\6\60\2\0\6\60\11\0\7\60\1\0"+
    "\7\60\1\0\53\60\1\0\14\60\10\0\173\60\1\0"+
    "\2\60\2\0\12\75\6\0\244\60\14\0\27\60\4\0"+
    "\61\60\u0104\0\156\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\14\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0"+
    "\153\60\22\0\100\60\2\0\66\60\50\0\14\60\4\0"+
    "\20\60\20\0\20\60\3\0\2\60\30\0\3\60\40\0"+
    "\5\60\1\0\207\60\23\0\12\75\7\0\32\60\4\0"+
    "\1\60\1\0\32\60\13\0\131\60\3\0\6\60\2\0"+
    "\6\60\2\0\6\60\2\0\3\60\43\0\14\60\1\0"+
    "\32\60\1\0\23\60\1\0\2\60\1\0\17\60\2\0"+
    "\16\60\42\0\173\60\105\0\65\60\210\0\1\60\202\0"+
    "\35\60\3\0\61\60\17\0\1\60\37\0\40\60\15\0"+
    "\36\60\5\0\53\60\5\0\36\60\2\0\44\60\4\0"+
    "\10\60\1\0\5\60\52\0\236\60\2\0\12\75\6\0"+
    "\44\60\4\0\44\60\4\0\50\60\10\0\64\60\234\0"+
    "\67\60\11\0\26\60\12\0\10\60\230\0\6\60\2\0"+
    "\1\60\1\0\54\60\1\0\2\60\3\0\1\60\2\0"+
    "\27\60\12\0\27\60\11\0\37\60\101\0\23\60\1\0"+
    "\2\60\12\0\26\60\12\0\32\60\106\0\70\60\6\0"+
    "\2\60\100\0\4\60\1\0\2\60\5\0\10\60\1\0"+
    "\3\60\1\0\35\60\2\0\3\60\4\0\1\60\40\0"+
    "\35\60\3\0\35\60\43\0\10\60\1\0\36\60\31\0"+
    "\66\60\12\0\26\60\12\0\23\60\15\0\22\60\156\0"+
    "\111\60\67\0\63\60\15\0\63\60\15\0\50\60\10\0"+
    "\12\75\306\0\35\60\12\0\1\60\10\0\41\60\217\0"+
    "\27\60\11\0\107\60\37\0\12\75\17\0\74\60\25\0"+
    "\31\60\7\0\12\75\6\0\65\60\1\0\12\75\4\0"+
    "\3\60\11\0\44\60\2\0\1\60\11\0\105\60\4\0"+
    "\4\60\3\0\12\75\1\60\1\0\1\60\43\0\22\60"+
    "\1\0\45\60\6\0\1\60\101\0\7\60\1\0\1\60"+
    "\1\0\4\60\1\0\17\60\1\0\12\60\7\0\73\60"+
    "\5\0\12\75\6\0\4\60\1\0\10\60\2\0\2\60"+
    "\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\1\0\12\60\2\0\2\60\2\0\3\60\2\0\1\60"+
    "\6\0\1\60\5\0\7\60\2\0\7\60\3\0\5\60"+
    "\213\0\113\60\5\0\12\75\4\0\2\60\40\0\106\60"+
    "\1\0\1\60\10\0\12\75\246\0\66\60\2\0\11\60"+
    "\27\0\6\60\42\0\101\60\3\0\1\60\13\0\12\75"+
    "\46\0\71\60\7\0\12\75\66\0\33\60\2\0\17\60"+
    "\4\0\12\75\306\0\73\60\145\0\100\60\12\75\25\0"+
    "\1\60\240\0\10\60\2\0\56\60\2\0\10\60\1\0"+
    "\2\60\33\0\77\60\10\0\1\60\10\0\112\60\3\0"+
    "\1\60\42\0\71\60\7\0\11\60\1\0\55\60\1\0"+
    "\11\60\17\0\12\75\30\0\36\60\2\0\26\60\1\0"+
    "\16\60\111\0\7\60\1\0\2\60\1\0\54\60\3\0"+
    "\1\60\1\0\2\60\1\0\11\60\10\0\12\75\6\0"+
    "\6\60\1\0\2\60\1\0\45\60\1\0\2\60\1\0"+
    "\6\60\7\0\12\75\u0136\0\27\60\11\0\232\60\146\0"+
    "\157\60\21\0\304\60\274\0\57\60\321\0\107\60\271\0"+
    "\71\60\7\0\37\60\1\0\12\75\146\0\36\60\2\0"+
    "\5\60\13\0\67\60\11\0\4\60\14\0\12\75\11\0"+
    "\25\60\5\0\23\60\260\0\100\60\200\0\113\60\4\0"+
    "\71\60\7\0\21\60\100\0\2\60\1\0\1\60\34\0"+
    "\370\60\10\0\363\60\15\0\37\60\61\0\3\60\21\0"+
    "\4\60\10\0\u018c\60\4\0\153\60\5\0\15\60\3\0"+
    "\11\60\7\0\12\60\3\0\2\60\306\0\5\60\3\0"+
    "\6\60\10\0\10\60\2\0\7\60\36\0\4\60\224\0"+
    "\3\60\273\0\125\60\1\0\107\60\1\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\4\60\1\0\14\60\1\0"+
    "\1\60\1\0\7\60\1\0\101\60\1\0\4\60\2\0"+
    "\10\60\1\0\7\60\1\0\34\60\1\0\4\60\1\0"+
    "\5\60\1\0\1\60\3\0\7\60\1\0\u0154\60\2\0"+
    "\31\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\37\60\1\0\31\60\1\0"+
    "\37\60\1\0\31\60\1\0\10\60\2\0\62\75\67\60"+
    "\4\0\62\60\10\0\1\60\16\0\1\60\26\0\5\60"+
    "\1\0\17\60\120\0\7\60\1\0\21\60\2\0\7\60"+
    "\1\0\2\60\1\0\5\60\325\0\55\60\3\0\16\60"+
    "\2\0\12\75\4\0\1\60\u0171\0\60\60\12\75\6\0"+
    "\305\60\13\0\7\60\51\0\114\60\4\0\12\75\246\0"+
    "\4\60\1\0\33\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\12\60\1\0\4\60\1\0\1\60\1\0"+
    "\1\60\6\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\3\60\1\0\2\60\1\0\1\60\2\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\2\60\1\0\1\60\2\0\4\60\1\0"+
    "\7\60\1\0\4\60\1\0\4\60\1\0\1\60\1\0"+
    "\12\60\1\0\21\60\5\0\3\60\1\0\5\60\1\0"+
    "\21\60\164\0\32\60\6\0\32\60\6\0\32\60\166\0"+
    "\327\60\51\0\65\60\13\0\336\60\2\0\u0182\60\16\0"+
    "\u0131\60\37\0\36\60\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\2\2\1\0\2\1\1\3\1\1\1\4"+
    "\1\5\1\4\1\6\1\3\1\7\1\3\2\1\1\3"+
    "\1\10\1\11\1\4\1\10\1\12\1\13\1\2\2\14"+
    "\1\15\2\14\1\16\1\17\1\2\1\0\2\16\1\14"+
    "\1\16\1\4\1\14\1\20\2\14\1\4\1\21\1\4"+
    "\1\22\1\23\1\6\1\24\1\25\1\2\1\0\1\24"+
    "\1\14\1\24\1\4\2\14\11\24\1\14\1\26\1\27"+
    "\1\2\1\0\1\26\1\14\1\26\1\4\2\14\1\26"+
    "\1\14\1\30\1\31\1\4\1\32\1\33\1\34\1\2"+
    "\1\0\2\33\1\14\1\33\2\4\1\33\2\14\6\33"+
    "\1\14\1\35\2\36\1\0\1\35\1\4\1\35\1\37"+
    "\1\40\1\41\1\2\1\0\1\40\1\4\6\40\1\14"+
    "\1\42\1\20\1\4\1\43\3\20\1\24\1\44\1\24"+
    "\1\20\1\24\3\20\1\14\1\45\1\14\1\20\1\14"+
    "\1\4\1\46\1\20\1\4\1\20\4\14\1\20\1\47"+
    "\1\50\1\51\1\4\2\50\1\52\1\4\1\53\2\4"+
    "\1\54\1\55\1\56\1\57\1\4\1\60\1\61\1\2"+
    "\1\0\2\60\1\14\1\60\1\4\1\62\3\14\2\1"+
    "\1\2\1\0\1\1\1\0\1\1\1\63\2\1\1\3"+
    "\1\1\1\0\2\1\2\0\1\64\2\65\1\0\1\65"+
    "\1\1\1\10\1\14\2\16\1\17\1\0\1\16\1\0"+
    "\4\16\1\0\2\16\1\4\1\66\2\24\1\25\1\0"+
    "\1\24\1\0\1\24\1\67\2\24\1\0\13\24\1\70"+
    "\3\24\2\26\1\27\1\0\1\26\1\0\1\26\1\71"+
    "\2\26\1\0\4\26\1\30\1\72\2\33\1\34\1\0"+
    "\1\33\1\0\1\33\1\73\3\33\1\0\2\33\2\0"+
    "\1\74\1\75\1\33\1\76\1\33\1\77\3\33\2\35"+
    "\1\36\1\0\1\36\1\35\1\0\1\35\1\100\2\35"+
    "\1\0\2\35\2\40\1\41\1\0\1\40\1\0\1\40"+
    "\1\101\2\40\1\0\12\40\1\24\1\44\2\24\1\63"+
    "\4\24\1\14\1\45\2\14\1\101\4\14\1\0\1\46"+
    "\1\102\5\14\1\103\1\50\1\103\1\104\2\0\1\105"+
    "\1\106\1\107\2\60\1\61\1\0\1\60\1\0\4\60"+
    "\1\0\2\60\1\62\1\1\1\63\3\0\2\63\1\1"+
    "\1\32\2\0\1\63\1\1\1\110\1\63\1\110\1\0"+
    "\1\65\1\111\1\65\1\64\1\10\2\16\3\0\1\16"+
    "\1\112\2\0\1\16\1\24\1\67\3\0\2\67\1\24"+
    "\2\0\1\67\10\24\1\113\2\24\1\114\1\24\1\26"+
    "\1\71\3\0\2\71\1\26\2\0\1\71\1\26\1\0"+
    "\1\115\1\116\1\33\1\73\3\0\2\73\1\33\1\117"+
    "\2\0\1\73\1\33\1\73\1\74\1\0\5\33\1\35"+
    "\1\100\3\0\2\100\1\35\2\0\1\100\1\35\1\40"+
    "\1\101\3\0\2\101\1\40\2\0\1\101\2\40\1\120"+
    "\2\40\1\24\2\63\1\24\1\63\1\24\1\14\2\101"+
    "\1\14\1\101\1\14\1\101\1\110\1\0\1\102\1\103"+
    "\1\121\2\60\3\0\1\60\1\62\2\0\1\60\2\63"+
    "\1\0\2\63\1\0\2\63\1\111\1\122\2\16\1\0"+
    "\1\16\1\0\2\67\1\0\2\67\1\0\1\67\2\24"+
    "\1\123\1\124\1\125\1\24\1\126\1\127\1\130\2\24"+
    "\2\71\1\0\2\71\1\0\1\71\2\73\1\0\2\73"+
    "\1\0\2\73\1\33\1\0\3\33\2\100\1\0\2\100"+
    "\1\0\1\100\2\101\1\0\2\101\1\0\1\101\3\40"+
    "\2\63\3\101\2\60\1\0\1\60\1\0\2\63\2\16"+
    "\2\67\1\131\1\132\2\24\1\133\2\71\2\73\1\33"+
    "\1\134\1\0\2\33\2\100\2\101\2\40\1\135\2\60"+
    "\2\24\1\33\1\134\2\33\2\40\2\24\1\134\1\0"+
    "\1\33\1\40\1\136\1\137\2\134\1\40\1\0\1\40"+
    "\1\134\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u0666\0\u0666\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b"+
    "\0\u095a\0\u0999\0\u09d8\0\u085e\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u085e\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0ccc\0\u0e07\0\u085e"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u085e"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u10bc"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569"+
    "\0\u15a8\0\u15e7\0\u1626\0\u1569\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u191a\0\u1a94\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1dc7\0\u1e45\0\u1dc7"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1f41\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6"+
    "\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u085e\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2d48\0\u2e83\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u2f7f"+
    "\0\u3138\0\u3177\0\u085e\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u32f1\0\u085e\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b"+
    "\0\u085e\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u0ec4"+
    "\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u381c"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u381c\0\u3d47"+
    "\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f"+
    "\0\u3f7e\0\u3e04\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8"+
    "\0\u4137\0\u4176\0\u0ec4\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1"+
    "\0\u42f0\0\u432f\0\u41b5\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a"+
    "\0\u44a9\0\u44e8\0\u4527\0\u44e8\0\u41b5\0\u4566\0\u41b5\0\u45a5"+
    "\0\u41b5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u479d\0\u47dc\0\u481b\0\u485a\0\u46a1\0\u4899\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\u4b4e\0\u49d4\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8"+
    "\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0"+
    "\0\u4eff\0\u4f3e\0\u4f7d\0\u381c\0\u4fbc\0\u4ffb\0\u503a\0\u5079"+
    "\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u2139\0\u51b4\0\u51f3\0\u5232"+
    "\0\u5271\0\u52b0\0\u52ef\0\u085e\0\u532e\0\u536d\0\u53ac\0\u53eb"+
    "\0\u542a\0\u2997\0\u5469\0\u2919\0\u54a8\0\u54e7\0\u5526\0\u085e"+
    "\0\u2a93\0\u0ec4\0\u5565\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u56a0"+
    "\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898"+
    "\0\u58d7\0\u085e\0\u5916\0\u5955\0\u5994\0\u307b\0\u2fbe\0\u59d3"+
    "\0\u2f7f\0\u5a12\0\u5a51\0\u31b6\0\u5a90\0\u32b2\0\u32b2\0\u32f1"+
    "\0\u5acf\0\u5b0e\0\u085e\0\u5b4d\0\u2f7f\0\u5b8c\0\u5bcb\0\u085e"+
    "\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7\0\u34aa\0\u5d06\0\u5d45\0\u5d84"+
    "\0\u5dc3\0\u085e\0\u5e02\0\u5e41\0\u5e80\0\u3918\0\u385b\0\u5ebf"+
    "\0\u5efe\0\u5f3d\0\u3a14\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078"+
    "\0\u60b7\0\u60f6\0\u6135\0\u381c\0\u6174\0\u61b3\0\u61f2\0\u6231"+
    "\0\u6270\0\u085e\0\u62af\0\u62ee\0\u632d\0\u3f00\0\u3e43\0\u636c"+
    "\0\u63ab\0\u63ea\0\u3ffc\0\u6429\0\u6468\0\u64a7\0\u085e\0\u64e6"+
    "\0\u085e\0\u6525\0\u6564\0\u65a3\0\u42b1\0\u41f4\0\u65e2\0\u41b5"+
    "\0\u6621\0\u6660\0\u43ec\0\u669f\0\u44e8\0\u4527\0\u66de\0\u671d"+
    "\0\u675c\0\u679b\0\u67da\0\u6819\0\u6858\0\u085e\0\u6897\0\u68d6"+
    "\0\u6915\0\u47dc\0\u46e0\0\u6954\0\u6993\0\u69d2\0\u48d8\0\u6a11"+
    "\0\u6a50\0\u085e\0\u6a8f\0\u6ace\0\u6b0d\0\u4ad0\0\u4a13\0\u6b4c"+
    "\0\u6b8b\0\u6bca\0\u4bcc\0\u6c09\0\u6c48\0\u49d4\0\u6c87\0\u6cc6"+
    "\0\u6d05\0\u4f3e\0\u4ec0\0\u6d44\0\u4ffb\0\u6d83\0\u6dc2\0\u5136"+
    "\0\u50b8\0\u6e01\0\u51f3\0\u6e40\0\u32b2\0\u52b0\0\u6e7f\0\u2139"+
    "\0\u5469\0\u085e\0\u6ebe\0\u085e\0\u6efd\0\u6f3c\0\u6f7b\0\u6fba"+
    "\0\u5565\0\u6ff9\0\u7038\0\u7077\0\u303c\0\u30ba\0\u70b6\0\u30f9"+
    "\0\u31f5\0\u70f5\0\u3234\0\u32f1\0\u3330\0\u0999\0\u3567\0\u35e5"+
    "\0\u7134\0\u3720\0\u7173\0\u38d9\0\u3957\0\u71b2\0\u3996\0\u3a53"+
    "\0\u71f1\0\u3a92\0\u7230\0\u726f\0\u381c\0\u381c\0\u381c\0\u72ae"+
    "\0\u381c\0\u381c\0\u381c\0\u72ed\0\u732c\0\u3ec1\0\u3f3f\0\u736b"+
    "\0\u3f7e\0\u403b\0\u73aa\0\u407a\0\u4272\0\u42f0\0\u73e9\0\u432f"+
    "\0\u442b\0\u7428\0\u446a\0\u4527\0\u7467\0\u74a6\0\u74e5\0\u7524"+
    "\0\u7563\0\u475e\0\u481b\0\u75a2\0\u485a\0\u4917\0\u75e1\0\u4956"+
    "\0\u4a91\0\u4b0f\0\u7620\0\u4b4e\0\u4c0b\0\u765f\0\u4c4a\0\u769e"+
    "\0\u76dd\0\u771c\0\u4f7d\0\u503a\0\u5175\0\u5232\0\u52b0\0\u5622"+
    "\0\u56a0\0\u775b\0\u57db\0\u779a\0\u5994\0\u5a51\0\u5c88\0\u5d45"+
    "\0\u5e80\0\u5f3d\0\u381c\0\u381c\0\u77d9\0\u7818\0\u381c\0\u632d"+
    "\0\u63ea\0\u65a3\0\u6660\0\u7857\0\u085e\0\u7896\0\u78d5\0\u7914"+
    "\0\u6915\0\u69d2\0\u6b0d\0\u6bca\0\u7953\0\u7992\0\u49d4\0\u6f7b"+
    "\0\u7038\0\u79d1\0\u7a10\0\u7a4f\0\u7896\0\u7a8e\0\u7acd\0\u7b0c"+
    "\0\u7b4b\0\u7b8a\0\u7bc9\0\u7c08\0\u7c47\0\u7c86\0\u7cc5\0\u381c"+
    "\0\u381c\0\u7d04\0\u41b5\0\u7d43\0\u7d82\0\u7dc1\0\u7e00\0\u49d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\1\30\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\30\2\42\4\30\1\43\1\42"+
    "\1\44\1\45\1\46\1\47\21\30\1\50\15\30\1\50"+
    "\1\30\1\51\5\30\1\52\1\53\2\0\3\52\1\54"+
    "\1\52\2\54\1\52\2\54\4\52\5\54\5\52\1\55"+
    "\34\52\1\54\5\52\1\56\1\57\1\60\1\0\3\56"+
    "\1\61\1\56\2\54\1\56\2\54\4\56\2\54\1\62"+
    "\1\63\1\64\42\56\1\65\5\56\1\66\1\67\1\70"+
    "\1\71\1\66\1\72\1\73\1\74\1\75\2\76\1\66"+
    "\2\76\4\66\2\76\1\77\1\100\1\101\42\66\1\102"+
    "\5\66\1\103\1\104\1\60\1\0\3\103\1\61\1\103"+
    "\2\54\1\103\2\54\4\103\2\54\1\62\1\54\1\64"+
    "\17\103\1\105\22\103\1\65\5\103\1\106\1\107\1\60"+
    "\1\0\3\106\1\54\1\106\2\54\1\106\2\54\4\106"+
    "\1\110\4\54\42\106\1\54\5\106\1\111\1\112\1\113"+
    "\1\114\1\111\1\115\1\111\1\116\1\117\2\120\1\111"+
    "\2\120\4\111\2\120\1\121\1\54\1\122\1\111\1\123"+
    "\1\124\1\125\1\111\1\126\1\127\1\130\1\111\1\131"+
    "\3\111\1\132\5\111\1\133\6\111\1\123\1\125\1\111"+
    "\1\127\3\111\1\133\1\134\1\111\1\131\1\133\2\111"+
    "\1\135\1\136\1\137\1\140\1\135\1\141\1\135\1\142"+
    "\1\143\2\144\1\135\2\144\4\135\2\144\1\145\1\54"+
    "\1\146\17\135\1\147\22\135\1\150\6\135\1\151\1\137"+
    "\1\140\1\135\1\141\1\135\1\142\1\143\2\144\1\135"+
    "\2\144\4\135\2\144\1\145\1\54\1\146\42\135\1\150"+
    "\5\135\1\103\1\152\1\60\1\0\3\103\1\61\1\103"+
    "\2\54\1\103\2\54\1\103\1\153\2\154\2\54\1\62"+
    "\1\54\1\64\42\103\1\65\5\103\1\155\1\156\1\157"+
    "\1\160\1\155\1\161\1\162\1\163\1\164\1\165\1\166"+
    "\1\155\2\166\1\155\1\167\2\155\2\166\1\170\1\54"+
    "\1\171\4\155\1\172\1\173\3\155\1\174\11\155\1\175"+
    "\1\176\1\177\6\155\1\172\4\155\1\175\1\200\1\155"+
    "\1\174\1\175\2\155\1\201\1\202\1\203\1\204\1\201"+
    "\1\205\1\201\1\206\1\207\1\206\1\210\1\201\2\206"+
    "\4\201\3\206\1\54\1\206\42\201\1\206\5\201\1\211"+
    "\1\212\1\213\1\214\1\211\1\215\1\211\1\216\1\217"+
    "\2\216\1\211\2\216\4\211\3\216\1\54\1\216\4\211"+
    "\1\220\1\221\1\211\1\222\4\211\1\223\1\211\1\224"+
    "\15\211\1\220\1\211\1\223\3\211\1\216\5\211\1\225"+
    "\1\226\1\60\1\0\3\225\1\227\1\225\1\230\1\54"+
    "\1\225\2\54\2\225\2\231\2\54\1\232\1\54\1\233"+
    "\42\225\1\234\5\225\1\235\1\236\1\32\1\33\1\235"+
    "\1\237\1\235\1\240\1\241\1\40\1\42\1\235\2\42"+
    "\4\235\2\42\1\242\1\54\1\243\42\235\1\244\5\235"+
    "\1\245\1\246\1\213\1\214\1\245\1\247\1\245\1\250"+
    "\1\251\1\252\1\216\1\245\2\216\2\245\2\253\2\216"+
    "\1\254\1\255\1\256\5\245\1\257\1\245\1\260\4\245"+
    "\1\261\1\245\1\262\17\245\1\261\3\245\1\263\5\245"+
    "\1\106\1\264\1\60\1\0\3\106\1\54\1\106\2\54"+
    "\1\106\2\54\4\106\5\54\42\106\1\54\5\106\1\265"+
    "\1\266\1\60\1\0\3\265\1\61\1\265\2\54\1\265"+
    "\1\267\1\54\1\265\1\270\2\265\2\54\1\62\1\54"+
    "\1\64\1\265\27\271\2\265\10\271\1\65\5\265\2\272"+
    "\1\60\74\272\1\273\1\274\1\60\1\0\3\273\1\54"+
    "\1\273\2\54\1\273\1\275\1\54\1\273\1\276\2\273"+
    "\3\54\1\277\1\54\42\273\1\54\5\273\1\300\1\301"+
    "\1\60\1\0\3\300\1\61\1\300\2\54\1\300\2\54"+
    "\4\300\2\54\1\62\1\54\1\64\42\300\1\65\5\300"+
    "\1\103\1\302\1\60\1\0\3\103\1\61\1\103\2\54"+
    "\1\103\2\54\1\103\1\303\2\103\2\54\1\62\1\54"+
    "\1\64\42\103\1\65\5\103\1\304\1\305\1\306\1\307"+
    "\1\304\1\310\1\311\1\312\1\313\2\314\1\304\2\314"+
    "\2\304\2\315\2\314\1\316\1\100\1\317\42\304\1\320"+
    "\5\304\1\321\3\0\1\322\2\321\1\0\1\321\2\0"+
    "\1\321\2\0\4\321\5\0\42\321\1\0\5\321\1\0"+
    "\1\323\2\0\1\324\74\0\1\60\1\0\1\324\76\0"+
    "\1\324\72\0\1\325\1\326\1\0\1\326\1\327\1\330"+
    "\1\325\1\326\1\325\2\326\1\325\2\326\4\325\5\326"+
    "\30\325\1\331\11\325\1\326\5\325\1\321\3\0\1\322"+
    "\2\321\1\0\1\321\2\0\1\321\2\0\4\321\5\0"+
    "\42\321\1\0\1\332\4\321\4\0\1\324\2\0\1\333"+
    "\67\0\1\334\1\335\1\0\1\335\1\336\2\334\1\335"+
    "\1\330\2\335\1\334\2\335\4\334\5\335\30\334\1\337"+
    "\11\334\1\335\5\334\4\340\1\341\72\340\4\0\1\324"+
    "\15\0\1\342\60\0\1\324\17\0\1\333\155\0\1\324"+
    "\21\0\1\333\50\0\1\343\3\0\1\344\2\343\1\0"+
    "\1\343\2\0\1\343\2\0\4\343\1\345\4\0\22\343"+
    "\1\346\15\343\1\346\1\343\1\0\5\343\1\321\3\0"+
    "\1\322\2\321\1\0\1\321\2\0\1\321\2\0\4\321"+
    "\5\0\5\321\1\347\34\321\1\0\5\321\4\0\1\324"+
    "\64\0\1\333\5\0\1\52\3\0\3\52\1\0\1\52"+
    "\2\0\1\52\2\0\4\52\5\0\42\52\1\0\5\52"+
    "\1\0\1\53\75\0\1\52\3\0\3\52\1\0\1\52"+
    "\2\0\1\52\2\0\4\52\5\0\3\52\1\350\27\52"+
    "\1\350\6\52\1\0\5\52\1\56\3\0\3\56\1\0"+
    "\1\56\2\0\1\56\2\0\4\56\5\0\42\56\1\0"+
    "\5\56\1\0\1\57\77\0\1\60\103\0\1\351\113\0"+
    "\1\351\100\0\1\351\141\0\1\351\5\0\1\352\3\0"+
    "\1\353\2\352\1\0\1\352\2\0\1\352\2\0\4\352"+
    "\5\0\42\352\1\0\5\352\1\0\1\354\2\0\1\355"+
    "\74\0\1\60\1\0\1\355\76\0\1\355\72\0\1\356"+
    "\1\357\1\0\1\357\1\360\1\352\1\356\1\357\1\356"+
    "\2\357\1\356\2\357\4\356\5\357\30\356\1\361\11\356"+
    "\1\357\5\356\1\352\3\0\1\353\2\352\1\0\1\352"+
    "\2\0\1\352\2\0\4\352\5\0\42\352\1\0\1\362"+
    "\4\352\4\0\1\355\2\0\1\351\67\0\1\363\1\364"+
    "\1\0\1\364\1\365\2\363\1\364\1\352\2\364\1\363"+
    "\2\364\4\363\5\364\30\363\1\366\11\363\1\364\5\363"+
    "\4\0\1\355\17\0\1\351\56\0\1\355\21\0\1\351"+
    "\54\0\1\355\64\0\1\351\5\0\1\103\3\0\3\103"+
    "\1\0\1\103\2\0\1\103\2\0\4\103\5\0\42\103"+
    "\1\0\5\103\1\0\1\104\75\0\1\103\3\0\3\103"+
    "\1\0\1\103\2\0\1\103\2\0\4\103\5\0\6\103"+
    "\1\367\7\103\1\370\16\103\1\367\4\103\1\0\5\103"+
    "\1\106\3\0\3\106\1\0\1\106\2\0\1\106\2\0"+
    "\4\106\5\0\42\106\1\0\5\106\1\0\1\107\75\0"+
    "\1\371\3\0\1\372\2\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\42\371\1\0\5\371\1\0\1\373"+
    "\2\0\1\374\74\0\1\60\1\0\1\374\76\0\1\374"+
    "\72\0\1\375\1\376\1\0\1\376\1\377\1\u0100\1\375"+
    "\1\376\1\375\2\376\1\375\2\376\4\375\5\376\30\375"+
    "\1\u0101\11\375\1\376\5\375\4\0\1\374\2\0\1\351"+
    "\67\0\1\u0102\1\u0103\1\0\1\u0103\1\u0104\2\u0102\1\u0103"+
    "\1\u0100\2\u0103\1\u0102\2\u0103\4\u0102\5\u0103\30\u0102\1\u0105"+
    "\11\u0102\1\u0103\5\u0102\4\0\1\374\17\0\1\351\56\0"+
    "\1\374\21\0\1\351\50\0\1\371\3\0\1\372\2\371"+
    "\1\0\1\371\2\0\1\371\2\0\4\371\5\0\23\371"+
    "\1\u0106\15\371\1\u0106\1\0\2\371\1\u0106\3\371\3\0"+
    "\1\372\2\371\1\0\1\371\2\0\1\371\2\0\4\371"+
    "\5\0\22\371\1\u0107\15\371\1\u0107\1\371\1\0\6\371"+
    "\3\0\1\372\2\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\1\371\1\u0108\30\371\1\u0108\7\371\1\0"+
    "\6\371\3\0\1\372\2\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\3\371\1\u0109\10\371\1\u010a\1\371"+
    "\1\u010b\10\371\1\u010c\3\371\1\u0109\2\371\1\u010a\3\371"+
    "\1\0\6\371\3\0\1\372\2\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\17\371\1\u010d\22\371\1\0"+
    "\6\371\3\0\1\372\2\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\17\371\1\u010e\22\371\1\0\6\371"+
    "\3\0\1\372\2\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\6\371\1\u010f\26\371\1\u010f\4\371\1\0"+
    "\6\371\3\0\1\372\2\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\17\371\1\u0110\22\371\1\0\6\371"+
    "\3\0\1\372\2\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\5\371\1\u0111\2\371\1\u0112\31\371\1\0"+
    "\5\371\4\0\1\374\64\0\1\351\5\0\1\u0113\3\0"+
    "\1\u0114\2\u0113\1\0\1\u0113\2\0\1\u0113\2\0\4\u0113"+
    "\5\0\42\u0113\1\0\5\u0113\1\0\1\u0115\2\0\1\u0116"+
    "\74\0\1\60\1\0\1\u0116\76\0\1\u0116\72\0\1\u0117"+
    "\1\u0118\1\0\1\u0118\1\u0119\1\u011a\1\u0117\1\u0118\1\u0117"+
    "\2\u0118\1\u0117\2\u0118\4\u0117\5\u0118\30\u0117\1\u011b\11\u0117"+
    "\1\u0118\5\u0117\4\0\1\u0116\2\0\1\351\67\0\1\u011c"+
    "\1\u011d\1\0\1\u011d\1\u011e\2\u011c\1\u011d\1\u011a\2\u011d"+
    "\1\u011c\2\u011d\4\u011c\5\u011d\30\u011c\1\u011f\11\u011c\1\u011d"+
    "\5\u011c\4\0\1\u0116\17\0\1\351\56\0\1\u0116\21\0"+
    "\1\351\50\0\1\u0113\3\0\1\u0114\2\u0113\1\0\1\u0113"+
    "\2\0\1\u0113\2\0\4\u0113\5\0\6\u0113\1\u0120\7\u0113"+
    "\1\u0121\16\u0113\1\u0120\4\u0113\1\0\5\u0113\4\0\1\u0116"+
    "\64\0\1\351\6\0\1\u0122\2\0\1\u0116\73\0\1\152"+
    "\75\0\1\103\3\0\3\103\1\0\1\103\2\0\1\103"+
    "\2\0\4\103\5\0\2\103\1\u0123\37\103\1\0\6\103"+
    "\3\0\3\103\1\0\1\103\2\0\1\103\2\0\2\103"+
    "\2\154\5\0\42\103\1\0\5\103\1\u0124\3\0\1\u0125"+
    "\2\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0"+
    "\42\u0124\1\0\5\u0124\1\0\1\u0126\2\0\1\u0127\74\0"+
    "\1\60\1\0\1\u0127\76\0\1\u0127\72\0\1\u0128\1\u0129"+
    "\1\0\1\u0129\1\u012a\1\u012b\1\u0128\1\u0129\1\u0128\2\u0129"+
    "\1\u0128\2\u0129\4\u0128\5\u0129\30\u0128\1\u012c\11\u0128\1\u0129"+
    "\5\u0128\1\u0124\3\0\1\u0125\1\u0124\1\u012d\1\0\1\u0124"+
    "\2\0\1\u0124\2\0\4\u0124\5\0\42\u0124\1\0\5\u0124"+
    "\4\0\1\u0127\2\0\1\351\67\0\1\u012e\1\u012f\1\0"+
    "\1\u012f\1\u0130\2\u012e\1\u012f\1\u012b\2\u012f\1\u012e\2\u012f"+
    "\4\u012e\5\u012f\30\u012e\1\u0131\11\u012e\1\u012f\5\u012e\4\u0132"+
    "\1\u0133\5\u0132\1\u0134\64\u0132\1\u0124\3\0\1\u0125\2\u0124"+
    "\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0\34\u0124"+
    "\3\u0135\1\u0124\1\u0135\1\u0124\1\0\5\u0124\4\0\1\u0127"+
    "\17\0\1\351\56\0\1\u0127\21\0\1\351\50\0\1\u0124"+
    "\3\0\1\u0125\2\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\5\u0124\1\u0136\11\u0124\1\u0137\22\u0124\1\0"+
    "\6\u0124\3\0\1\u0125\2\u0124\1\0\1\u0124\2\0\1\u0124"+
    "\2\0\4\u0124\5\0\17\u0124\1\u0138\22\u0124\1\0\6\u0124"+
    "\3\0\1\u0125\2\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\16\u0124\1\u0139\23\u0124\1\0\6\u0124\3\0"+
    "\1\u0125\2\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124"+
    "\5\0\13\u0124\1\u013a\26\u0124\1\0\4\u0124\1\u013a\1\u0124"+
    "\3\0\1\u0125\2\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\17\u0124\1\u013b\22\u0124\1\0\6\u0124\3\0"+
    "\1\u0125\2\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124"+
    "\5\0\23\u0124\1\u013c\15\u0124\1\u013c\1\0\2\u0124\1\u013c"+
    "\2\u0124\4\0\1\u0127\64\0\1\351\5\0\1\u013d\3\0"+
    "\1\u013e\2\u013d\1\0\1\u013d\2\0\1\u013d\2\0\4\u013d"+
    "\5\0\42\u013d\1\0\5\u013d\1\0\1\u013f\2\0\1\u0140"+
    "\74\0\1\u0141\1\0\1\u0140\76\0\1\u0140\72\0\1\u0142"+
    "\1\u0143\1\0\1\u0143\1\u0144\1\u0145\1\u0142\1\u0143\1\u0142"+
    "\2\u0143\1\u0142\2\u0143\4\u0142\5\u0143\30\u0142\1\u0146\11\u0142"+
    "\1\u0143\5\u0142\1\u0147\1\u0148\1\0\1\u0148\1\u0149\2\u0147"+
    "\1\u0148\1\u0145\2\u0148\1\u0147\2\u0148\4\u0147\5\u0148\30\u0147"+
    "\1\u014a\11\u0147\1\u0148\5\u0147\1\u014b\3\0\1\u014c\2\u014b"+
    "\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0\42\u014b"+
    "\1\0\5\u014b\1\0\1\u014d\2\0\1\u014e\74\0\1\60"+
    "\1\0\1\u014e\76\0\1\u014e\72\0\1\u014f\1\u0150\1\0"+
    "\1\u0150\1\u0151\1\u0152\1\u014f\1\u0150\1\u014f\2\u0150\1\u014f"+
    "\2\u0150\4\u014f\5\u0150\30\u014f\1\u0153\11\u014f\1\u0150\5\u014f"+
    "\1\u0154\1\u0155\1\0\1\u0155\1\u0156\2\u0154\1\u0155\1\u0152"+
    "\2\u0155\1\u0154\2\u0155\4\u0154\5\u0155\30\u0154\1\u0157\11\u0154"+
    "\1\u0155\5\u0154\1\u014b\3\0\1\u014c\2\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\5\u014b\1\u0158\34\u014b"+
    "\1\0\6\u014b\3\0\1\u014c\2\u014b\1\0\1\u014b\2\0"+
    "\1\u014b\2\0\4\u014b\5\0\21\u014b\1\u0159\1\u015a\4\u014b"+
    "\1\u015b\10\u014b\1\u015a\1\u014b\1\0\6\u014b\3\0\1\u014c"+
    "\2\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0"+
    "\5\u014b\1\u015c\16\u014b\1\u015d\15\u014b\1\0\6\u014b\3\0"+
    "\1\u014c\2\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b"+
    "\5\0\5\u014b\1\u015c\15\u014b\1\u015e\15\u014b\1\u015e\1\0"+
    "\2\u014b\1\u015e\3\u014b\3\0\1\u014c\2\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\5\u014b\1\u015c\11\u014b"+
    "\1\u015f\22\u014b\1\0\5\u014b\1\225\3\0\3\225\1\0"+
    "\1\225\2\0\1\225\2\0\4\225\5\0\42\225\1\0"+
    "\5\225\1\0\1\226\104\0\1\100\67\0\77\340\1\225"+
    "\3\0\3\225\1\0\1\225\2\0\1\225\2\0\2\225"+
    "\2\231\5\0\42\225\1\0\5\225\24\0\1\100\100\0"+
    "\1\100\141\0\1\100\5\0\1\371\3\0\1\u0160\2\371"+
    "\1\0\1\371\2\0\1\371\2\0\4\371\5\0\42\371"+
    "\1\0\5\371\1\0\1\u0161\2\0\1\324\72\0\1\u0162"+
    "\1\326\1\0\1\326\1\u0163\1\u0164\1\u0162\1\326\1\u0162"+
    "\2\326\1\u0162\2\326\4\u0162\5\326\30\u0162\1\u0165\11\u0162"+
    "\1\326\5\u0162\4\0\1\324\2\0\1\100\67\0\1\u0166"+
    "\1\335\1\0\1\335\1\u0167\2\u0166\1\335\1\u0164\2\335"+
    "\1\u0166\2\335\4\u0166\5\335\30\u0166\1\u0168\11\u0166\1\335"+
    "\5\u0166\4\0\1\324\17\0\1\100\56\0\1\324\21\0"+
    "\1\100\54\0\1\324\64\0\1\100\5\0\1\225\3\0"+
    "\1\u0169\2\225\1\0\1\225\2\0\1\225\2\0\4\225"+
    "\5\0\42\225\1\0\5\225\1\0\1\u016a\2\0\1\u014e"+
    "\72\0\1\u016b\1\u0150\1\0\1\u0150\1\u016c\1\u016d\1\u016b"+
    "\1\u0150\1\u016b\2\u0150\1\u016b\2\u0150\4\u016b\5\u0150\30\u016b"+
    "\1\u016e\11\u016b\1\u0150\5\u016b\4\0\1\u014e\2\0\1\100"+
    "\67\0\1\u016f\1\u0155\1\0\1\u0155\1\u0170\2\u016f\1\u0155"+
    "\1\u016d\2\u0155\1\u016f\2\u0155\4\u016f\5\u0155\30\u016f\1\u0171"+
    "\11\u016f\1\u0155\5\u016f\4\340\1\u0172\72\340\1\225\3\0"+
    "\1\u0169\2\225\1\0\1\225\2\0\1\225\2\0\2\225"+
    "\2\u0173\5\0\42\225\1\0\5\225\4\0\1\u014e\17\0"+
    "\1\100\77\0\1\u0174\55\0\1\u014e\21\0\1\100\50\0"+
    "\1\225\3\0\1\u0169\2\225\1\0\1\225\2\0\1\225"+
    "\2\0\4\225\5\0\21\225\1\u0175\20\225\1\0\6\225"+
    "\3\0\1\u0169\2\225\1\0\1\225\2\0\1\225\2\0"+
    "\4\225\5\0\5\225\1\u0176\16\225\1\u0177\15\225\1\0"+
    "\6\225\3\0\1\u0169\2\225\1\0\1\225\2\0\1\225"+
    "\2\0\4\225\5\0\5\225\1\u0176\15\225\1\u0178\15\225"+
    "\1\u0178\1\0\2\225\1\u0178\3\225\3\0\1\u0169\2\225"+
    "\1\0\1\225\2\0\1\225\2\0\4\225\5\0\5\225"+
    "\1\u0176\11\225\1\u0179\22\225\1\0\5\225\4\0\1\u014e"+
    "\64\0\1\100\6\0\1\264\75\0\1\265\3\0\3\265"+
    "\1\0\1\265\2\0\1\265\2\0\4\265\5\0\42\265"+
    "\1\0\5\265\1\0\1\266\115\0\2\u017a\55\0\1\265"+
    "\3\0\3\265\1\0\1\265\2\0\1\265\2\0\4\265"+
    "\5\0\24\265\1\u017b\6\265\1\u017c\3\265\1\u017c\1\265"+
    "\1\u017c\1\0\6\265\3\0\3\265\1\0\1\265\2\0"+
    "\1\265\2\0\4\265\1\u017d\4\0\1\265\27\271\2\265"+
    "\10\271\1\0\5\265\2\272\1\0\74\272\1\273\1\u017e"+
    "\2\0\3\273\1\0\1\273\2\0\1\273\1\u017f\1\0"+
    "\4\273\3\0\1\u0180\1\0\42\273\1\0\5\273\1\0"+
    "\1\274\122\0\1\277\51\0\1\273\1\u017e\2\0\3\273"+
    "\1\0\1\273\2\0\1\273\1\u017f\1\0\4\273\3\0"+
    "\1\u0180\1\0\32\273\1\u0181\4\273\1\u0181\2\273\1\0"+
    "\5\273\1\300\3\0\3\300\1\0\1\300\2\0\1\300"+
    "\2\0\4\300\5\0\42\300\1\0\5\300\1\0\1\301"+
    "\76\0\1\302\75\0\1\103\3\0\3\103\1\0\1\103"+
    "\2\0\1\103\2\0\2\103\1\u0182\1\103\5\0\42\103"+
    "\1\0\5\103\1\u0183\3\0\1\u0184\2\u0183\1\0\1\u0183"+
    "\2\0\1\u0183\2\0\4\u0183\5\0\42\u0183\1\0\5\u0183"+
    "\1\0\1\u0185\2\0\1\u0186\74\0\1\60\1\0\1\u0186"+
    "\76\0\1\u0186\72\0\1\u0187\1\u0188\1\0\1\u0188\1\u0189"+
    "\1\u0183\1\u0187\1\u0188\1\u0187\2\u0188\1\u0187\2\u0188\4\u0187"+
    "\5\u0188\30\u0187\1\u018a\11\u0187\1\u0188\5\u0187\1\u0183\3\0"+
    "\1\u0184\2\u0183\1\0\1\u0183\2\0\1\u0183\2\0\4\u0183"+
    "\5\0\42\u0183\1\0\1\u018b\4\u0183\4\0\1\u0186\2\0"+
    "\1\351\67\0\1\u018c\1\u018d\1\0\1\u018d\1\u018e\2\u018c"+
    "\1\u018d\1\u0183\2\u018d\1\u018c\2\u018d\4\u018c\5\u018d\30\u018c"+
    "\1\u018f\11\u018c\1\u018d\5\u018c\1\u0183\3\0\1\u0184\2\u0183"+
    "\1\0\1\u0183\2\0\1\u0183\2\0\2\u0183\2\u0190\5\0"+
    "\42\u0183\1\0\5\u0183\4\0\1\u0186\17\0\1\351\56\0"+
    "\1\u0186\21\0\1\351\54\0\1\u0186\64\0\1\351\5\0"+
    "\1\321\3\0\3\321\1\0\1\321\2\0\1\321\2\0"+
    "\4\321\5\0\42\321\1\0\5\321\1\322\1\324\1\0"+
    "\1\324\1\330\2\322\1\324\1\322\2\324\1\322\2\324"+
    "\4\322\5\324\30\322\1\u0191\11\322\1\324\5\322\1\0"+
    "\1\323\75\0\2\324\1\0\1\324\1\u0192\52\324\1\u0193"+
    "\17\324\1\325\1\326\1\0\1\326\1\325\1\330\1\325"+
    "\1\326\1\325\2\326\1\325\2\326\4\325\5\326\30\325"+
    "\1\331\11\325\1\326\5\325\2\326\1\0\2\326\1\u0192"+
    "\51\326\1\u0194\17\326\1\327\1\u0195\1\0\1\u0195\1\u0196"+
    "\1\u0197\1\327\1\u0195\1\327\2\u0195\1\327\2\u0195\4\327"+
    "\5\u0195\30\327\1\u0198\11\327\1\u0195\5\327\1\325\1\326"+
    "\1\0\1\326\1\325\1\u0196\1\325\1\326\1\325\2\326"+
    "\1\325\2\326\4\325\5\326\30\325\1\331\11\325\1\326"+
    "\5\325\1\321\3\0\3\321\1\0\1\321\2\0\1\321"+
    "\2\0\2\321\2\u0199\5\0\42\321\1\0\1\u0199\4\321"+
    "\1\334\1\335\1\0\1\335\3\334\1\335\1\330\2\335"+
    "\1\334\2\335\4\334\5\335\30\334\1\337\11\334\1\335"+
    "\5\334\2\335\1\0\5\335\1\u0192\46\335\1\u019a\17\335"+
    "\1\336\1\u019b\1\0\1\u019b\1\u019c\2\336\1\u019b\1\u0197"+
    "\2\u019b\1\336\2\u019b\4\336\5\u019b\30\336\1\u019d\11\336"+
    "\1\u019b\5\336\1\334\1\335\1\0\1\335\3\334\1\335"+
    "\1\u019c\2\335\1\334\2\335\4\334\5\335\30\334\1\337"+
    "\11\334\1\335\5\334\12\340\1\u019e\64\340\2\341\1\340"+
    "\1\341\1\u019f\5\341\1\u01a0\44\341\1\u01a1\17\341\1\343"+
    "\3\0\3\343\1\0\1\343\2\0\1\343\2\0\4\343"+
    "\5\0\42\343\1\0\5\343\1\344\1\324\1\0\1\324"+
    "\1\343\2\344\1\324\1\344\2\324\1\344\2\324\4\344"+
    "\5\324\30\344\1\u01a2\11\344\1\324\5\344\22\0\1\u01a3"+
    "\54\0\1\343\3\0\3\343\1\0\1\343\2\0\1\343"+
    "\2\0\4\343\5\0\5\343\1\u01a4\34\343\1\0\5\343"+
    "\1\321\3\0\3\321\1\0\1\321\2\0\1\321\2\0"+
    "\4\321\5\0\15\321\1\u01a5\24\321\1\0\5\321\1\52"+
    "\3\0\3\52\1\0\1\52\2\0\1\52\2\0\4\52"+
    "\5\0\10\52\1\u01a6\31\52\1\0\5\52\1\352\3\0"+
    "\3\352\1\0\1\352\2\0\1\352\2\0\4\352\5\0"+
    "\42\352\1\0\5\352\1\353\1\355\1\0\1\355\1\352"+
    "\2\353\1\355\1\353\2\355\1\353\2\355\4\353\5\355"+
    "\30\353\1\u01a7\11\353\1\355\5\353\1\0\1\354\75\0"+
    "\2\355\1\0\1\355\1\u01a8\52\355\1\u01a9\17\355\1\356"+
    "\1\357\1\0\1\357\1\356\1\352\1\356\1\357\1\356"+
    "\2\357\1\356\2\357\4\356\5\357\30\356\1\361\11\356"+
    "\1\357\5\356\2\357\1\0\2\357\1\u01a8\51\357\1\u01aa"+
    "\17\357\1\360\1\u01ab\1\0\1\u01ab\1\356\1\353\1\360"+
    "\1\u01ab\1\360\2\u01ab\1\360\2\u01ab\4\360\5\u01ab\30\360"+
    "\1\u01ac\11\360\1\u01ab\5\360\1\356\1\357\1\0\1\357"+
    "\3\356\1\357\1\356\2\357\1\356\2\357\4\356\5\357"+
    "\30\356\1\361\11\356\1\357\5\356\1\352\3\0\3\352"+
    "\1\0\1\352\2\0\1\352\2\0\2\352\2\u01ad\5\0"+
    "\42\352\1\0\1\u01ad\4\352\1\363\1\364\1\0\1\364"+
    "\3\363\1\364\1\352\2\364\1\363\2\364\4\363\5\364"+
    "\30\363\1\366\11\363\1\364\5\363\2\364\1\0\5\364"+
    "\1\u01a8\46\364\1\u01ae\17\364\1\365\1\u01af\1\0\1\u01af"+
    "\1\363\2\365\1\u01af\1\353\2\u01af\1\365\2\u01af\4\365"+
    "\5\u01af\30\365\1\u01b0\11\365\1\u01af\5\365\1\363\1\364"+
    "\1\0\1\364\3\363\1\364\1\363\2\364\1\363\2\364"+
    "\4\363\5\364\30\363\1\366\11\363\1\364\5\363\1\103"+
    "\3\0\3\103\1\0\1\103\2\0\1\103\2\0\4\103"+
    "\5\0\6\103\1\370\26\103\1\370\4\103\1\0\5\103"+
    "\1\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\42\371\1\0\5\371\1\372\1\374\1\0"+
    "\1\374\1\u0100\2\372\1\374\1\372\2\374\1\372\2\374"+
    "\4\372\5\374\30\372\1\u01b1\11\372\1\374\5\372\1\0"+
    "\1\373\75\0\2\374\1\0\1\374\1\u01b2\52\374\1\u01b3"+
    "\17\374\1\375\1\376\1\0\1\376\1\375\1\u0100\1\375"+
    "\1\376\1\375\2\376\1\375\2\376\4\375\5\376\30\375"+
    "\1\u0101\11\375\1\376\5\375\2\376\1\0\2\376\1\u01b2"+
    "\51\376\1\u01b4\17\376\1\377\1\u01b5\1\0\1\u01b5\1\u01b6"+
    "\1\u01b7\1\377\1\u01b5\1\377\2\u01b5\1\377\2\u01b5\4\377"+
    "\5\u01b5\30\377\1\u01b8\11\377\1\u01b5\5\377\1\375\1\376"+
    "\1\0\1\376\1\375\1\u01b6\1\375\1\376\1\375\2\376"+
    "\1\375\2\376\4\375\5\376\30\375\1\u0101\11\375\1\376"+
    "\5\375\1\u0102\1\u0103\1\0\1\u0103\3\u0102\1\u0103\1\u0100"+
    "\2\u0103\1\u0102\2\u0103\4\u0102\5\u0103\30\u0102\1\u0105\11\u0102"+
    "\1\u0103\5\u0102\2\u0103\1\0\5\u0103\1\u01b2\46\u0103\1\u01b9"+
    "\17\u0103\1\u0104\1\u01ba\1\0\1\u01ba\1\u01bb\2\u0104\1\u01ba"+
    "\1\u01b7\2\u01ba\1\u0104\2\u01ba\4\u0104\5\u01ba\30\u0104\1\u01bc"+
    "\11\u0104\1\u01ba\5\u0104\1\u0102\1\u0103\1\0\1\u0103\3\u0102"+
    "\1\u0103\1\u01bb\2\u0103\1\u0102\2\u0103\4\u0102\5\u0103\30\u0102"+
    "\1\u0105\11\u0102\1\u0103\5\u0102\1\371\3\0\3\371\1\0"+
    "\1\371\2\0\1\371\2\0\4\371\5\0\23\371\1\u01bd"+
    "\15\371\1\u01bd\1\0\2\371\1\u01bd\3\371\3\0\3\371"+
    "\1\0\1\371\2\0\1\371\2\0\4\371\5\0\5\371"+
    "\1\u01be\34\371\1\0\6\371\3\0\3\371\1\0\1\371"+
    "\2\0\1\371\2\0\4\371\5\0\14\371\1\u01bf\21\371"+
    "\1\u01bf\3\371\1\0\6\371\3\0\3\371\1\0\1\371"+
    "\2\0\1\371\2\0\4\371\5\0\10\371\1\u01c0\31\371"+
    "\1\0\6\371\3\0\3\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\23\371\1\u01c1\15\371\1\u01c1\1\0"+
    "\2\371\1\u01c1\3\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\4\371\1\u01c2\27\371\1\u01c2"+
    "\5\371\1\0\6\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\11\371\1\u01c3\30\371\1\0"+
    "\1\371\1\u01c3\4\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\22\371\1\u01c4\15\371\1\u01c4"+
    "\1\371\1\0\6\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\24\371\1\u01c5\15\371\1\0"+
    "\6\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\22\371\1\u01c6\15\371\1\u01c6\1\371\1\0"+
    "\6\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\24\371\1\u01c7\15\371\1\0\6\371\3\0"+
    "\3\371\1\0\1\371\2\0\1\371\2\0\4\371\5\0"+
    "\11\371\1\u01c8\30\371\1\0\1\371\1\u01c8\3\371\1\u0113"+
    "\3\0\3\u0113\1\0\1\u0113\2\0\1\u0113\2\0\4\u0113"+
    "\5\0\42\u0113\1\0\5\u0113\1\u0114\1\u0116\1\0\1\u0116"+
    "\1\u011a\2\u0114\1\u0116\1\u0114\2\u0116\1\u0114\2\u0116\4\u0114"+
    "\5\u0116\30\u0114\1\u01c9\11\u0114\1\u0116\5\u0114\1\0\1\u0115"+
    "\75\0\2\u0116\1\0\1\u0116\1\u01ca\52\u0116\1\u01cb\17\u0116"+
    "\1\u0117\1\u0118\1\0\1\u0118\1\u0117\1\u011a\1\u0117\1\u0118"+
    "\1\u0117\2\u0118\1\u0117\2\u0118\4\u0117\5\u0118\30\u0117\1\u011b"+
    "\11\u0117\1\u0118\5\u0117\2\u0118\1\0\2\u0118\1\u01ca\51\u0118"+
    "\1\u01cc\17\u0118\1\u0119\1\u01cd\1\0\1\u01cd\1\u01ce\1\u01cf"+
    "\1\u0119\1\u01cd\1\u0119\2\u01cd\1\u0119\2\u01cd\4\u0119\5\u01cd"+
    "\30\u0119\1\u01d0\11\u0119\1\u01cd\5\u0119\1\u0117\1\u0118\1\0"+
    "\1\u0118\1\u0117\1\u01ce\1\u0117\1\u0118\1\u0117\2\u0118\1\u0117"+
    "\2\u0118\4\u0117\5\u0118\30\u0117\1\u011b\11\u0117\1\u0118\5\u0117"+
    "\1\u011c\1\u011d\1\0\1\u011d\3\u011c\1\u011d\1\u011a\2\u011d"+
    "\1\u011c\2\u011d\4\u011c\5\u011d\30\u011c\1\u011f\11\u011c\1\u011d"+
    "\5\u011c\2\u011d\1\0\5\u011d\1\u01ca\46\u011d\1\u01d1\17\u011d"+
    "\1\u011e\1\u01d2\1\0\1\u01d2\1\u01d3\2\u011e\1\u01d2\1\u01cf"+
    "\2\u01d2\1\u011e\2\u01d2\4\u011e\5\u01d2\30\u011e\1\u01d4\11\u011e"+
    "\1\u01d2\5\u011e\1\u011c\1\u011d\1\0\1\u011d\3\u011c\1\u011d"+
    "\1\u01d3\2\u011d\1\u011c\2\u011d\4\u011c\5\u011d\30\u011c\1\u011f"+
    "\11\u011c\1\u011d\5\u011c\1\u0113\3\0\3\u0113\1\0\1\u0113"+
    "\2\0\1\u0113\2\0\4\u0113\5\0\6\u0113\1\u0121\26\u0113"+
    "\1\u0121\4\u0113\1\0\6\u0113\1\u01d5\1\u01d6\1\0\3\u0113"+
    "\1\u01d7\1\u0113\2\u01d7\1\u0113\2\0\4\u0113\2\0\1\u01d7"+
    "\1\0\1\u01d7\42\u0113\1\u01d7\5\u0113\1\0\1\u0122\75\0"+
    "\1\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\42\u0124\1\0\5\u0124\1\u0125\1\u0127\1\0"+
    "\1\u0127\1\u012b\2\u0125\1\u0127\1\u0125\2\u0127\1\u0125\2\u0127"+
    "\4\u0125\5\u0127\30\u0125\1\u01d8\11\u0125\1\u0127\5\u0125\1\0"+
    "\1\u0126\75\0\2\u0127\1\0\1\u0127\1\u01d9\52\u0127\1\u01da"+
    "\17\u0127\1\u0128\1\u0129\1\0\1\u0129\1\u0128\1\u012b\1\u0128"+
    "\1\u0129\1\u0128\2\u0129\1\u0128\2\u0129\4\u0128\5\u0129\30\u0128"+
    "\1\u012c\11\u0128\1\u0129\5\u0128\2\u0129\1\0\2\u0129\1\u01d9"+
    "\51\u0129\1\u01db\17\u0129\1\u012a\1\u01dc\1\0\1\u01dc\1\u01dd"+
    "\1\u01de\1\u012a\1\u01dc\1\u012a\2\u01dc\1\u012a\2\u01dc\4\u012a"+
    "\5\u01dc\30\u012a\1\u01df\11\u012a\1\u01dc\5\u012a\1\u0128\1\u0129"+
    "\1\0\1\u0129\1\u0128\1\u01dd\1\u0128\1\u0129\1\u0128\2\u0129"+
    "\1\u0128\2\u0129\4\u0128\5\u0129\30\u0128\1\u012c\11\u0128\1\u0129"+
    "\5\u0128\1\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124"+
    "\2\0\4\u0124\5\0\1\u0124\27\u01e0\2\u0124\10\u01e0\1\0"+
    "\5\u0124\1\u012e\1\u012f\1\0\1\u012f\3\u012e\1\u012f\1\u012b"+
    "\2\u012f\1\u012e\2\u012f\4\u012e\5\u012f\30\u012e\1\u0131\11\u012e"+
    "\1\u012f\5\u012e\2\u012f\1\0\5\u012f\1\u01d9\46\u012f\1\u01e1"+
    "\17\u012f\1\u0130\1\u01e2\1\0\1\u01e2\1\u01e3\2\u0130\1\u01e2"+
    "\1\u01de\2\u01e2\1\u0130\2\u01e2\4\u0130\5\u01e2\30\u0130\1\u01e4"+
    "\11\u0130\1\u01e2\5\u0130\1\u012e\1\u012f\1\0\1\u012f\3\u012e"+
    "\1\u012f\1\u01e3\2\u012f\1\u012e\2\u012f\4\u012e\5\u012f\30\u012e"+
    "\1\u0131\11\u012e\1\u012f\5\u012e\12\u0132\1\u0134\64\u0132\2\u0133"+
    "\1\u0132\1\u0133\1\u01e5\5\u0133\1\u01e6\44\u0133\1\u01e7\17\u0133"+
    "\1\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\14\u0124\1\u01e8\21\u0124\1\u01e8\3\u0124\1\0"+
    "\6\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\14\u0124\1\u01e9\21\u0124\1\u01e9\3\u0124\1\0"+
    "\6\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\11\u0124\1\u01ea\30\u0124\1\0\1\u0124\1\u01ea"+
    "\4\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\13\u0124\1\u01eb\26\u0124\1\0\4\u0124\1\u01eb"+
    "\1\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\5\u0124\1\u01ec\34\u0124\1\0\5\u0124\1\u013d"+
    "\3\0\3\u013d\1\0\1\u013d\2\0\1\u013d\2\0\4\u013d"+
    "\5\0\42\u013d\1\0\5\u013d\1\u013e\1\u0140\1\0\1\u0140"+
    "\1\u0145\2\u013e\1\u0140\1\u013e\2\u0140\1\u013e\2\u0140\4\u013e"+
    "\5\u0140\30\u013e\1\u01ed\11\u013e\1\u0140\5\u013e\1\0\1\u013f"+
    "\75\0\2\u0140\1\0\1\u0140\1\u01ee\52\u0140\1\u01ef\17\u0140"+
    "\2\0\1\u0141\74\0\1\u0142\1\u0143\1\0\1\u0143\1\u0142"+
    "\1\u0145\1\u0142\1\u0143\1\u0142\2\u0143\1\u0142\2\u0143\4\u0142"+
    "\5\u0143\30\u0142\1\u0146\11\u0142\1\u0143\5\u0142\2\u0143\1\0"+
    "\2\u0143\1\u01ee\51\u0143\1\u01f0\17\u0143\1\u0144\1\u01f1\1\0"+
    "\1\u01f1\1\u01f2\1\u01f3\1\u0144\1\u01f1\1\u0144\2\u01f1\1\u0144"+
    "\2\u01f1\4\u0144\5\u01f1\30\u0144\1\u01f4\11\u0144\1\u01f1\5\u0144"+
    "\1\u0142\1\u0143\1\0\1\u0143\1\u0142\1\u01f2\1\u0142\1\u0143"+
    "\1\u0142\2\u0143\1\u0142\2\u0143\4\u0142\5\u0143\30\u0142\1\u0146"+
    "\11\u0142\1\u0143\5\u0142\1\u0147\1\u0148\1\0\1\u0148\3\u0147"+
    "\1\u0148\1\u0145\2\u0148\1\u0147\2\u0148\4\u0147\5\u0148\30\u0147"+
    "\1\u014a\11\u0147\1\u0148\5\u0147\2\u0148\1\0\5\u0148\1\u01ee"+
    "\46\u0148\1\u01f5\17\u0148\1\u0149\1\u01f6\1\0\1\u01f6\1\u01f7"+
    "\2\u0149\1\u01f6\1\u01f3\2\u01f6\1\u0149\2\u01f6\4\u0149\5\u01f6"+
    "\30\u0149\1\u01f8\11\u0149\1\u01f6\5\u0149\1\u0147\1\u0148\1\0"+
    "\1\u0148\3\u0147\1\u0148\1\u01f7\2\u0148\1\u0147\2\u0148\4\u0147"+
    "\5\u0148\30\u0147\1\u014a\11\u0147\1\u0148\5\u0147\1\u014b\3\0"+
    "\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0"+
    "\42\u014b\1\0\5\u014b\1\u014c\1\u014e\1\0\1\u014e\1\u0152"+
    "\2\u014c\1\u014e\1\u014c\2\u014e\1\u014c\2\u014e\4\u014c\5\u014e"+
    "\30\u014c\1\u01f9\11\u014c\1\u014e\5\u014c\1\0\1\u014d\75\0"+
    "\2\u014e\1\0\1\u014e\1\u01fa\52\u014e\1\u01fb\17\u014e\1\u014f"+
    "\1\u0150\1\0\1\u0150\1\u014f\1\u0152\1\u014f\1\u0150\1\u014f"+
    "\2\u0150\1\u014f\2\u0150\4\u014f\5\u0150\30\u014f\1\u0153\11\u014f"+
    "\1\u0150\5\u014f\2\u0150\1\0\2\u0150\1\u01fa\51\u0150\1\u01fc"+
    "\17\u0150\1\u0151\1\u01fd\1\0\1\u01fd\1\u01fe\1\u01ff\1\u0151"+
    "\1\u01fd\1\u0151\2\u01fd\1\u0151\2\u01fd\4\u0151\5\u01fd\30\u0151"+
    "\1\u0200\11\u0151\1\u01fd\5\u0151\1\u014f\1\u0150\1\0\1\u0150"+
    "\1\u014f\1\u01fe\1\u014f\1\u0150\1\u014f\2\u0150\1\u014f\2\u0150"+
    "\4\u014f\5\u0150\30\u014f\1\u0153\11\u014f\1\u0150\5\u014f\1\u0154"+
    "\1\u0155\1\0\1\u0155\3\u0154\1\u0155\1\u0152\2\u0155\1\u0154"+
    "\2\u0155\4\u0154\5\u0155\30\u0154\1\u0157\11\u0154\1\u0155\5\u0154"+
    "\2\u0155\1\0\5\u0155\1\u01fa\46\u0155\1\u0201\17\u0155\1\u0156"+
    "\1\u0202\1\0\1\u0202\1\u0203\2\u0156\1\u0202\1\u01ff\2\u0202"+
    "\1\u0156\2\u0202\4\u0156\5\u0202\30\u0156\1\u0204\11\u0156\1\u0202"+
    "\5\u0156\1\u0154\1\u0155\1\0\1\u0155\3\u0154\1\u0155\1\u0203"+
    "\2\u0155\1\u0154\2\u0155\4\u0154\5\u0155\30\u0154\1\u0157\11\u0154"+
    "\1\u0155\5\u0154\1\u014b\3\0\3\u014b\1\0\1\u014b\2\0"+
    "\1\u014b\2\0\4\u014b\5\0\6\u014b\1\u0205\26\u014b\1\u0205"+
    "\4\u014b\1\0\6\u014b\3\0\3\u014b\1\0\1\u014b\2\0"+
    "\1\u014b\2\0\4\u014b\5\0\25\u014b\1\u0206\14\u014b\1\0"+
    "\6\u014b\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0"+
    "\4\u014b\5\0\22\u014b\1\u0207\15\u014b\1\u0207\1\u014b\1\0"+
    "\6\u014b\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0"+
    "\4\u014b\5\0\11\u014b\1\u0208\30\u014b\1\0\1\u014b\1\u0208"+
    "\4\u014b\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0"+
    "\4\u014b\5\0\21\u014b\1\u0206\20\u014b\1\0\6\u014b\3\0"+
    "\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0"+
    "\22\u014b\1\u0206\15\u014b\1\u0206\1\u014b\1\0\6\u014b\3\0"+
    "\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0"+
    "\23\u014b\1\u0206\15\u014b\1\u0206\1\0\2\u014b\1\u0206\3\u014b"+
    "\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b"+
    "\5\0\24\u014b\1\u0206\15\u014b\1\0\5\u014b\1\u0160\1\324"+
    "\1\0\1\324\1\u0164\2\u0160\1\324\1\u0160\2\324\1\u0160"+
    "\2\324\4\u0160\5\324\30\u0160\1\u0209\11\u0160\1\324\5\u0160"+
    "\1\0\1\u0161\75\0\1\u0162\1\326\1\0\1\326\1\u0162"+
    "\1\u0164\1\u0162\1\326\1\u0162\2\326\1\u0162\2\326\4\u0162"+
    "\5\326\30\u0162\1\u0165\11\u0162\1\326\5\u0162\1\u0163\1\u0195"+
    "\1\0\1\u0195\1\u020a\1\u020b\1\u0163\1\u0195\1\u0163\2\u0195"+
    "\1\u0163\2\u0195\4\u0163\5\u0195\30\u0163\1\u020c\11\u0163\1\u0195"+
    "\5\u0163\1\u0162\1\326\1\0\1\326\1\u0162\1\u020a\1\u0162"+
    "\1\326\1\u0162\2\326\1\u0162\2\326\4\u0162\5\326\30\u0162"+
    "\1\u0165\11\u0162\1\326\5\u0162\1\u0166\1\335\1\0\1\335"+
    "\3\u0166\1\335\1\u0164\2\335\1\u0166\2\335\4\u0166\5\335"+
    "\30\u0166\1\u0168\11\u0166\1\335\5\u0166\1\u0167\1\u019b\1\0"+
    "\1\u019b\1\u020d\2\u0167\1\u019b\1\u020b\2\u019b\1\u0167\2\u019b"+
    "\4\u0167\5\u019b\30\u0167\1\u020e\11\u0167\1\u019b\5\u0167\1\u0166"+
    "\1\335\1\0\1\335\3\u0166\1\335\1\u020d\2\335\1\u0166"+
    "\2\335\4\u0166\5\335\30\u0166\1\u0168\11\u0166\1\335\5\u0166"+
    "\1\u0169\1\u014e\1\0\1\u014e\1\u016d\2\u0169\1\u014e\1\u0169"+
    "\2\u014e\1\u0169\2\u014e\4\u0169\5\u014e\30\u0169\1\u020f\11\u0169"+
    "\1\u014e\5\u0169\1\0\1\u016a\75\0\1\u016b\1\u0150\1\0"+
    "\1\u0150\1\u016b\1\u016d\1\u016b\1\u0150\1\u016b\2\u0150\1\u016b"+
    "\2\u0150\4\u016b\5\u0150\30\u016b\1\u016e\11\u016b\1\u0150\5\u016b"+
    "\1\u016c\1\u01fd\1\0\1\u01fd\1\u0210\1\u0211\1\u016c\1\u01fd"+
    "\1\u016c\2\u01fd\1\u016c\2\u01fd\4\u016c\5\u01fd\30\u016c\1\u0212"+
    "\11\u016c\1\u01fd\5\u016c\1\u016b\1\u0150\1\0\1\u0150\1\u016b"+
    "\1\u0210\1\u016b\1\u0150\1\u016b\2\u0150\1\u016b\2\u0150\4\u016b"+
    "\5\u0150\30\u016b\1\u016e\11\u016b\1\u0150\5\u016b\1\u016f\1\u0155"+
    "\1\0\1\u0155\3\u016f\1\u0155\1\u016d\2\u0155\1\u016f\2\u0155"+
    "\4\u016f\5\u0155\30\u016f\1\u0171\11\u016f\1\u0155\5\u016f\1\u0170"+
    "\1\u0202\1\0\1\u0202\1\u0213\2\u0170\1\u0202\1\u0211\2\u0202"+
    "\1\u0170\2\u0202\4\u0170\5\u0202\30\u0170\1\u0214\11\u0170\1\u0202"+
    "\5\u0170\1\u016f\1\u0155\1\0\1\u0155\3\u016f\1\u0155\1\u0213"+
    "\2\u0155\1\u016f\2\u0155\4\u016f\5\u0155\30\u016f\1\u0171\11\u016f"+
    "\1\u0155\5\u016f\2\u0172\1\340\1\u0172\1\u0215\5\u0172\1\u0216"+
    "\44\u0172\1\u0217\17\u0172\1\225\3\0\3\225\1\0\1\225"+
    "\2\0\1\225\2\0\2\225\2\u0173\5\0\42\225\1\0"+
    "\6\225\3\0\3\225\1\0\1\225\2\0\1\225\2\0"+
    "\4\225\5\0\25\225\1\u0218\14\225\1\0\6\225\3\0"+
    "\3\225\1\0\1\225\2\0\1\225\2\0\4\225\5\0"+
    "\21\225\1\u0218\20\225\1\0\6\225\3\0\3\225\1\0"+
    "\1\225\2\0\1\225\2\0\4\225\5\0\22\225\1\u0218"+
    "\15\225\1\u0218\1\225\1\0\6\225\3\0\3\225\1\0"+
    "\1\225\2\0\1\225\2\0\4\225\5\0\23\225\1\u0218"+
    "\15\225\1\u0218\1\0\2\225\1\u0218\3\225\3\0\3\225"+
    "\1\0\1\225\2\0\1\225\2\0\4\225\5\0\24\225"+
    "\1\u0218\15\225\1\0\5\225\1\265\3\0\3\265\1\0"+
    "\1\265\2\0\1\265\2\0\2\265\2\u0219\5\0\42\265"+
    "\1\0\5\265\1\u017d\3\0\3\u017d\1\0\1\u017d\2\0"+
    "\1\u017d\2\0\4\u017d\5\0\42\u017d\1\0\5\u017d\1\0"+
    "\1\u017e\11\0\2\u017f\1\0\2\u017f\5\0\1\u0180\76\0"+
    "\1\u021a\51\0\1\u0183\3\0\3\u0183\1\0\1\u0183\2\0"+
    "\1\u0183\2\0\4\u0183\5\0\42\u0183\1\0\5\u0183\1\u0184"+
    "\1\u0186\1\0\1\u0186\1\u0183\2\u0184\1\u0186\1\u0184\2\u0186"+
    "\1\u0184\2\u0186\4\u0184\5\u0186\30\u0184\1\u021b\11\u0184\1\u0186"+
    "\5\u0184\1\0\1\u0185\75\0\2\u0186\1\0\1\u0186\1\u021c"+
    "\52\u0186\1\u021d\17\u0186\1\u0187\1\u0188\1\0\1\u0188\1\u0187"+
    "\1\u0183\1\u0187\1\u0188\1\u0187\2\u0188\1\u0187\2\u0188\4\u0187"+
    "\5\u0188\30\u0187\1\u018a\11\u0187\1\u0188\5\u0187\2\u0188\1\0"+
    "\2\u0188\1\u021c\51\u0188\1\u021e\17\u0188\1\u0189\1\u021f\1\0"+
    "\1\u021f\1\u0187\1\u0184\1\u0189\1\u021f\1\u0189\2\u021f\1\u0189"+
    "\2\u021f\4\u0189\5\u021f\30\u0189\1\u0220\11\u0189\1\u021f\5\u0189"+
    "\1\u0187\1\u0188\1\0\1\u0188\3\u0187\1\u0188\1\u0187\2\u0188"+
    "\1\u0187\2\u0188\4\u0187\5\u0188\30\u0187\1\u018a\11\u0187\1\u0188"+
    "\5\u0187\1\u0183\3\0\3\u0183\1\0\1\u0183\2\0\1\u0183"+
    "\2\0\2\u0183\2\u0221\5\0\42\u0183\1\0\1\u0221\4\u0183"+
    "\1\u018c\1\u018d\1\0\1\u018d\3\u018c\1\u018d\1\u0183\2\u018d"+
    "\1\u018c\2\u018d\4\u018c\5\u018d\30\u018c\1\u018f\11\u018c\1\u018d"+
    "\5\u018c\2\u018d\1\0\5\u018d\1\u021c\46\u018d\1\u0222\17\u018d"+
    "\1\u018e\1\u0223\1\0\1\u0223\1\u018c\2\u018e\1\u0223\1\u0184"+
    "\2\u0223\1\u018e\2\u0223\4\u018e\5\u0223\30\u018e\1\u0224\11\u018e"+
    "\1\u0223\5\u018e\1\u018c\1\u018d\1\0\1\u018d\3\u018c\1\u018d"+
    "\1\u018c\2\u018d\1\u018c\2\u018d\4\u018c\5\u018d\30\u018c\1\u018f"+
    "\11\u018c\1\u018d\5\u018c\1\u0183\3\0\3\u0183\1\0\1\u0183"+
    "\2\0\1\u0183\2\0\2\u0183\2\u0190\5\0\42\u0183\1\0"+
    "\5\u0183\1\322\1\324\1\0\1\324\1\u0197\2\322\1\324"+
    "\1\322\2\324\1\322\2\324\4\322\5\324\30\322\1\u0191"+
    "\11\322\1\324\5\322\2\324\1\0\1\324\1\u0225\52\324"+
    "\1\u0193\17\324\2\326\1\0\2\326\1\u0226\51\326\1\u0194"+
    "\17\326\2\u0195\1\0\1\u0195\1\u0226\1\u0225\51\u0195\1\u0227"+
    "\17\u0195\1\327\1\u0195\1\0\1\u0195\2\u0228\1\327\1\u0195"+
    "\1\327\2\u0195\1\327\2\u0195\4\327\5\u0195\30\327\1\u0198"+
    "\11\327\1\u0195\5\327\2\335\1\0\5\335\1\u0229\46\335"+
    "\1\u019a\17\335\2\u019b\1\0\1\u019b\1\u0229\3\u019b\1\u0225"+
    "\46\u019b\1\u022a\17\u019b\1\336\1\u019b\1\0\1\u019b\1\u022b"+
    "\2\336\1\u019b\1\u022b\2\u019b\1\336\2\u019b\4\336\5\u019b"+
    "\30\336\1\u019d\11\336\1\u019b\5\336\2\341\1\340\1\341"+
    "\1\u022c\5\341\1\u01a0\44\341\1\u01a1\17\341\1\344\1\324"+
    "\1\0\1\324\3\344\1\324\1\344\2\324\1\344\2\324"+
    "\4\344\5\324\30\344\1\u01a2\11\344\1\324\5\344\1\343"+
    "\3\0\3\343\1\0\1\343\2\0\1\343\2\0\4\343"+
    "\5\0\15\343\1\u022d\24\343\1\0\5\343\1\52\3\0"+
    "\3\52\1\0\1\52\2\0\1\52\2\0\4\52\5\0"+
    "\17\52\1\u022e\22\52\1\0\5\52\1\353\1\355\1\0"+
    "\1\355\3\353\1\355\1\353\2\355\1\353\2\355\4\353"+
    "\5\355\30\353\1\u01a7\11\353\1\355\5\353\2\355\1\0"+
    "\1\355\1\u022f\52\355\1\u01a9\17\355\2\357\1\0\2\357"+
    "\1\u0230\51\357\1\u01aa\17\357\2\u01ab\1\0\1\u01ab\1\u0230"+
    "\1\u022f\51\u01ab\1\u0231\17\u01ab\1\360\1\u01ab\1\0\1\u01ab"+
    "\3\360\1\u01ab\1\360\2\u01ab\1\360\2\u01ab\4\360\5\u01ab"+
    "\30\360\1\u01ac\11\360\1\u01ab\5\360\2\364\1\0\5\364"+
    "\1\u0232\46\364\1\u01ae\17\364\2\u01af\1\0\1\u01af\1\u0232"+
    "\3\u01af\1\u022f\46\u01af\1\u0233\17\u01af\1\365\1\u01af\1\0"+
    "\1\u01af\3\365\1\u01af\1\365\2\u01af\1\365\2\u01af\4\365"+
    "\5\u01af\30\365\1\u01b0\11\365\1\u01af\5\365\1\372\1\374"+
    "\1\0\1\374\1\u01b7\2\372\1\374\1\372\2\374\1\372"+
    "\2\374\4\372\5\374\30\372\1\u01b1\11\372\1\374\5\372"+
    "\2\374\1\0\1\374\1\u0234\52\374\1\u01b3\17\374\2\376"+
    "\1\0\2\376\1\u0235\51\376\1\u01b4\17\376\2\u01b5\1\0"+
    "\1\u01b5\1\u0235\1\u0234\51\u01b5\1\u0236\17\u01b5\1\377\1\u01b5"+
    "\1\0\1\u01b5\2\u0237\1\377\1\u01b5\1\377\2\u01b5\1\377"+
    "\2\u01b5\4\377\5\u01b5\30\377\1\u01b8\11\377\1\u01b5\5\377"+
    "\2\u0103\1\0\5\u0103\1\u0238\46\u0103\1\u01b9\17\u0103\2\u01ba"+
    "\1\0\1\u01ba\1\u0238\3\u01ba\1\u0234\46\u01ba\1\u0239\17\u01ba"+
    "\1\u0104\1\u01ba\1\0\1\u01ba\1\u023a\2\u0104\1\u01ba\1\u023a"+
    "\2\u01ba\1\u0104\2\u01ba\4\u0104\5\u01ba\30\u0104\1\u01bc\11\u0104"+
    "\1\u01ba\5\u0104\1\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\17\371\1\u023b\22\371\1\0"+
    "\6\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\1\371\1\u023c\30\371\1\u023c\7\371\1\0"+
    "\6\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\14\371\1\u023d\21\371\1\u023d\3\371\1\0"+
    "\6\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\17\371\1\u023e\22\371\1\0\6\371\3\0"+
    "\3\371\1\0\1\371\2\0\1\371\2\0\4\371\5\0"+
    "\5\371\1\u023f\34\371\1\0\6\371\3\0\3\371\1\0"+
    "\1\371\2\0\1\371\2\0\4\371\5\0\14\371\1\u0240"+
    "\21\371\1\u0240\3\371\1\0\6\371\3\0\3\371\1\0"+
    "\1\371\2\0\1\371\2\0\4\371\5\0\24\371\1\u0241"+
    "\15\371\1\0\6\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\17\371\1\u0242\22\371\1\0"+
    "\6\371\3\0\3\371\1\0\1\371\2\0\1\371\2\0"+
    "\4\371\5\0\5\371\1\u0243\34\371\1\0\6\371\3\0"+
    "\3\371\1\0\1\371\2\0\1\371\2\0\4\371\5\0"+
    "\14\371\1\u0244\21\371\1\u0244\3\371\1\0\6\371\3\0"+
    "\3\371\1\0\1\371\2\0\1\371\2\0\4\371\5\0"+
    "\6\371\1\u0245\26\371\1\u0245\4\371\1\0\5\371\1\u0114"+
    "\1\u0116\1\0\1\u0116\1\u01cf\2\u0114\1\u0116\1\u0114\2\u0116"+
    "\1\u0114\2\u0116\4\u0114\5\u0116\30\u0114\1\u01c9\11\u0114\1\u0116"+
    "\5\u0114\2\u0116\1\0\1\u0116\1\u0246\52\u0116\1\u01cb\17\u0116"+
    "\2\u0118\1\0\2\u0118\1\u0247\51\u0118\1\u01cc\17\u0118\2\u01cd"+
    "\1\0\1\u01cd\1\u0247\1\u0246\51\u01cd\1\u0248\17\u01cd\1\u0119"+
    "\1\u01cd\1\0\1\u01cd\2\u0249\1\u0119\1\u01cd\1\u0119\2\u01cd"+
    "\1\u0119\2\u01cd\4\u0119\5\u01cd\30\u0119\1\u01d0\11\u0119\1\u01cd"+
    "\5\u0119\2\u011d\1\0\5\u011d\1\u024a\46\u011d\1\u01d1\17\u011d"+
    "\2\u01d2\1\0\1\u01d2\1\u024a\3\u01d2\1\u0246\46\u01d2\1\u024b"+
    "\17\u01d2\1\u011e\1\u01d2\1\0\1\u01d2\1\u024c\2\u011e\1\u01d2"+
    "\1\u024c\2\u01d2\1\u011e\2\u01d2\4\u011e\5\u01d2\30\u011e\1\u01d4"+
    "\11\u011e\1\u01d2\5\u011e\1\0\1\u01d5\1\u01d6\4\0\1\u01d7"+
    "\1\0\2\u01d7\11\0\1\u01d7\1\0\1\u01d7\42\0\1\u01d7"+
    "\7\0\1\u01d6\74\0\1\u0125\1\u0127\1\0\1\u0127\1\u01de"+
    "\2\u0125\1\u0127\1\u0125\2\u0127\1\u0125\2\u0127\4\u0125\5\u0127"+
    "\30\u0125\1\u01d8\11\u0125\1\u0127\5\u0125\2\u0127\1\0\1\u0127"+
    "\1\u024d\52\u0127\1\u01da\17\u0127\2\u0129\1\0\2\u0129\1\u024e"+
    "\51\u0129\1\u01db\17\u0129\2\u01dc\1\0\1\u01dc\1\u024e\1\u024d"+
    "\51\u01dc\1\u024f\17\u01dc\1\u012a\1\u01dc\1\0\1\u01dc\2\u0250"+
    "\1\u012a\1\u01dc\1\u012a\2\u01dc\1\u012a\2\u01dc\4\u012a\5\u01dc"+
    "\30\u012a\1\u01df\11\u012a\1\u01dc\5\u012a\2\u012f\1\0\5\u012f"+
    "\1\u0251\46\u012f\1\u01e1\17\u012f\2\u01e2\1\0\1\u01e2\1\u0251"+
    "\3\u01e2\1\u024d\46\u01e2\1\u0252\17\u01e2\1\u0130\1\u01e2\1\0"+
    "\1\u01e2\1\u0253\2\u0130\1\u01e2\1\u0253\2\u01e2\1\u0130\2\u01e2"+
    "\4\u0130\5\u01e2\30\u0130\1\u01e4\11\u0130\1\u01e2\5\u0130\2\u0133"+
    "\1\u0132\1\u0133\1\u0254\5\u0133\1\u01e6\44\u0133\1\u01e7\17\u0133"+
    "\1\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\5\0\11\u0124\1\u0255\30\u0124\1\0\1\u0124\1\u0255"+
    "\4\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0"+
    "\4\u0124\3\0\1\u0256\1\0\42\u0124\1\0\6\u0124\3\0"+
    "\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0"+
    "\20\u0124\1\u0257\16\u0124\1\u0257\2\u0124\1\0\6\u0124\3\0"+
    "\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0"+
    "\5\u0124\1\u0258\34\u0124\1\0\6\u0124\3\0\3\u0124\1\0"+
    "\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0\2\u0124\1\u0259"+
    "\37\u0124\1\0\5\u0124\1\u013e\1\u0140\1\0\1\u0140\1\u01f3"+
    "\2\u013e\1\u0140\1\u013e\2\u0140\1\u013e\2\u0140\4\u013e\5\u0140"+
    "\30\u013e\1\u01ed\11\u013e\1\u0140\5\u013e\2\u0140\1\0\1\u0140"+
    "\1\u025a\52\u0140\1\u01ef\17\u0140\2\u0143\1\0\2\u0143\1\u025b"+
    "\51\u0143\1\u01f0\17\u0143\2\u01f1\1\0\1\u01f1\1\u025b\1\u025a"+
    "\51\u01f1\1\u025c\17\u01f1\1\u0144\1\u01f1\1\0\1\u01f1\2\u025d"+
    "\1\u0144\1\u01f1\1\u0144\2\u01f1\1\u0144\2\u01f1\4\u0144\5\u01f1"+
    "\30\u0144\1\u01f4\11\u0144\1\u01f1\5\u0144\2\u0148\1\0\5\u0148"+
    "\1\u025e\46\u0148\1\u01f5\17\u0148\2\u01f6\1\0\1\u01f6\1\u025e"+
    "\3\u01f6\1\u025a\46\u01f6\1\u025f\17\u01f6\1\u0149\1\u01f6\1\0"+
    "\1\u01f6\1\u0260\2\u0149\1\u01f6\1\u0260\2\u01f6\1\u0149\2\u01f6"+
    "\4\u0149\5\u01f6\30\u0149\1\u01f8\11\u0149\1\u01f6\5\u0149\1\u014c"+
    "\1\u014e\1\0\1\u014e\1\u01ff\2\u014c\1\u014e\1\u014c\2\u014e"+
    "\1\u014c\2\u014e\4\u014c\5\u014e\30\u014c\1\u01f9\11\u014c\1\u014e"+
    "\5\u014c\2\u014e\1\0\1\u014e\1\u0261\52\u014e\1\u01fb\17\u014e"+
    "\2\u0150\1\0\2\u0150\1\u0262\51\u0150\1\u01fc\17\u0150\2\u01fd"+
    "\1\0\1\u01fd\1\u0262\1\u0261\51\u01fd\1\u0263\17\u01fd\1\u0151"+
    "\1\u01fd\1\0\1\u01fd\2\u0264\1\u0151\1\u01fd\1\u0151\2\u01fd"+
    "\1\u0151\2\u01fd\4\u0151\5\u01fd\30\u0151\1\u0200\11\u0151\1\u01fd"+
    "\5\u0151\2\u0155\1\0\5\u0155\1\u0265\46\u0155\1\u0201\17\u0155"+
    "\2\u0202\1\0\1\u0202\1\u0265\3\u0202\1\u0261\46\u0202\1\u0266"+
    "\17\u0202\1\u0156\1\u0202\1\0\1\u0202\1\u0267\2\u0156\1\u0202"+
    "\1\u0267\2\u0202\1\u0156\2\u0202\4\u0156\5\u0202\30\u0156\1\u0204"+
    "\11\u0156\1\u0202\5\u0156\1\u014b\3\0\3\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\11\u014b\1\u0268\30\u014b"+
    "\1\0\1\u014b\1\u0268\4\u014b\3\0\3\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\17\u014b\1\u0269\22\u014b"+
    "\1\0\6\u014b\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b"+
    "\2\0\4\u014b\5\0\23\u014b\1\u026a\15\u014b\1\u026a\1\0"+
    "\2\u014b\1\u026a\2\u014b\1\u0160\1\324\1\0\1\324\1\u020b"+
    "\2\u0160\1\324\1\u0160\2\324\1\u0160\2\324\4\u0160\5\324"+
    "\30\u0160\1\u0209\11\u0160\1\324\5\u0160\1\u0163\1\u0195\1\0"+
    "\1\u0195\2\u026b\1\u0163\1\u0195\1\u0163\2\u0195\1\u0163\2\u0195"+
    "\4\u0163\5\u0195\30\u0163\1\u020c\11\u0163\1\u0195\5\u0163\1\u0167"+
    "\1\u019b\1\0\1\u019b\1\u026c\2\u0167\1\u019b\1\u026c\2\u019b"+
    "\1\u0167\2\u019b\4\u0167\5\u019b\30\u0167\1\u020e\11\u0167\1\u019b"+
    "\5\u0167\1\u0169\1\u014e\1\0\1\u014e\1\u0211\2\u0169\1\u014e"+
    "\1\u0169\2\u014e\1\u0169\2\u014e\4\u0169\5\u014e\30\u0169\1\u020f"+
    "\11\u0169\1\u014e\5\u0169\1\u016c\1\u01fd\1\0\1\u01fd\2\u026d"+
    "\1\u016c\1\u01fd\1\u016c\2\u01fd\1\u016c\2\u01fd\4\u016c\5\u01fd"+
    "\30\u016c\1\u0212\11\u016c\1\u01fd\5\u016c\1\u0170\1\u0202\1\0"+
    "\1\u0202\1\u026e\2\u0170\1\u0202\1\u026e\2\u0202\1\u0170\2\u0202"+
    "\4\u0170\5\u0202\30\u0170\1\u0214\11\u0170\1\u0202\5\u0170\2\u0172"+
    "\1\340\1\u0172\1\u026f\5\u0172\1\u0216\44\u0172\1\u0217\17\u0172"+
    "\1\u0184\1\u0186\1\0\1\u0186\3\u0184\1\u0186\1\u0184\2\u0186"+
    "\1\u0184\2\u0186\4\u0184\5\u0186\30\u0184\1\u021b\11\u0184\1\u0186"+
    "\5\u0184\2\u0186\1\0\1\u0186\1\u0270\52\u0186\1\u021d\17\u0186"+
    "\2\u0188\1\0\2\u0188\1\u0271\51\u0188\1\u021e\17\u0188\2\u021f"+
    "\1\0\1\u021f\1\u0271\1\u0270\51\u021f\1\u0272\17\u021f\1\u0189"+
    "\1\u021f\1\0\1\u021f\3\u0189\1\u021f\1\u0189\2\u021f\1\u0189"+
    "\2\u021f\4\u0189\5\u021f\30\u0189\1\u0220\11\u0189\1\u021f\5\u0189"+
    "\2\u018d\1\0\5\u018d\1\u0273\46\u018d\1\u0222\17\u018d\2\u0223"+
    "\1\0\1\u0223\1\u0273\3\u0223\1\u0270\46\u0223\1\u0274\17\u0223"+
    "\1\u018e\1\u0223\1\0\1\u0223\3\u018e\1\u0223\1\u018e\2\u0223"+
    "\1\u018e\2\u0223\4\u018e\5\u0223\30\u018e\1\u0224\11\u018e\1\u0223"+
    "\5\u018e\2\u0195\1\0\1\u0195\2\u0275\51\u0195\1\u0227\17\u0195"+
    "\2\u019b\1\0\1\u019b\1\u0276\3\u019b\1\u0276\46\u019b\1\u022a"+
    "\17\u019b\2\u01ab\1\0\1\u01ab\2\u0277\51\u01ab\1\u0231\17\u01ab"+
    "\2\u01af\1\0\1\u01af\1\u0278\3\u01af\1\u0278\46\u01af\1\u0233"+
    "\17\u01af\2\u01b5\1\0\1\u01b5\2\u0279\51\u01b5\1\u0236\17\u01b5"+
    "\2\u01ba\1\0\1\u01ba\1\u027a\3\u01ba\1\u027a\46\u01ba\1\u0239"+
    "\17\u01ba\1\371\3\0\3\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\3\371\1\u027b\27\371\1\u027b\6\371"+
    "\1\0\6\371\3\0\3\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\13\371\1\u027c\26\371\1\0\4\371"+
    "\1\u027c\1\371\3\0\3\371\1\0\1\371\2\0\1\371"+
    "\2\0\4\371\5\0\17\371\1\u027d\22\371\1\0\6\371"+
    "\3\0\3\371\1\0\1\371\2\0\1\371\2\0\4\371"+
    "\5\0\17\371\1\u027e\22\371\1\0\6\371\3\0\3\371"+
    "\1\0\1\371\2\0\1\371\2\0\4\371\5\0\24\371"+
    "\1\u027f\15\371\1\0\5\371\2\u01cd\1\0\1\u01cd\2\u0280"+
    "\51\u01cd\1\u0248\17\u01cd\2\u01d2\1\0\1\u01d2\1\u0281\3\u01d2"+
    "\1\u0281\46\u01d2\1\u024b\17\u01d2\2\u01dc\1\0\1\u01dc\2\u0282"+
    "\51\u01dc\1\u024f\17\u01dc\2\u01e2\1\0\1\u01e2\1\u0283\3\u01e2"+
    "\1\u0283\46\u01e2\1\u0252\17\u01e2\1\u0124\3\0\3\u0124\1\0"+
    "\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0\15\u0124\1\u0284"+
    "\24\u0124\1\0\5\u0124\20\0\2\u0285\6\0\27\u0285\1\0"+
    "\11\u0285\2\0\4\u0285\1\u0124\3\0\3\u0124\1\0\1\u0124"+
    "\2\0\1\u0124\2\0\4\u0124\3\0\1\u0286\1\0\42\u0124"+
    "\1\0\6\u0124\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124"+
    "\2\0\4\u0124\5\0\16\u0124\1\u0287\23\u0124\1\0\6\u0124"+
    "\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124"+
    "\5\0\1\u0124\1\u0288\30\u0124\1\u0288\7\u0124\1\0\5\u0124"+
    "\2\u01f1\1\0\1\u01f1\2\u0289\51\u01f1\1\u025c\17\u01f1\2\u01f6"+
    "\1\0\1\u01f6\1\u028a\3\u01f6\1\u028a\46\u01f6\1\u025f\17\u01f6"+
    "\2\u01fd\1\0\1\u01fd\2\u028b\51\u01fd\1\u0263\17\u01fd\2\u0202"+
    "\1\0\1\u0202\1\u028c\3\u0202\1\u028c\46\u0202\1\u0266\17\u0202"+
    "\1\u014b\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0"+
    "\4\u014b\5\0\16\u014b\1\u028d\23\u014b\1\0\6\u014b\3\0"+
    "\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0"+
    "\22\u014b\1\u028e\15\u014b\1\u028e\1\u014b\1\0\6\u014b\3\0"+
    "\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0"+
    "\24\u014b\1\u028f\15\u014b\1\0\5\u014b\2\u021f\1\0\1\u021f"+
    "\2\u0290\51\u021f\1\u0272\17\u021f\2\u0223\1\0\1\u0223\1\u0291"+
    "\3\u0223\1\u0291\46\u0223\1\u0274\17\u0223\1\371\3\0\3\371"+
    "\1\0\1\371\2\0\1\371\2\0\4\371\5\0\3\371"+
    "\1\u0292\27\371\1\u0292\6\371\1\0\6\371\3\0\3\371"+
    "\1\0\1\371\2\0\1\371\2\0\4\371\5\0\3\371"+
    "\1\u0293\27\371\1\u0293\6\371\1\0\5\371\1\u0124\3\0"+
    "\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0"+
    "\23\u0124\1\u0294\15\u0124\1\u0294\1\0\2\u0124\1\u0294\2\u0124"+
    "\20\0\2\u0295\53\0\1\u0295\1\0\1\u0124\3\0\3\u0124"+
    "\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0\23\u0124"+
    "\1\u0296\15\u0124\1\u0296\1\0\2\u0124\1\u0296\3\u0124\3\0"+
    "\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0"+
    "\3\u0124\1\u0297\27\u0124\1\u0297\6\u0124\1\0\5\u0124\1\u014b"+
    "\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b"+
    "\5\0\5\u014b\1\u0298\34\u014b\1\0\6\u014b\3\0\3\u014b"+
    "\1\0\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0\14\u014b"+
    "\1\u0299\21\u014b\1\u0299\3\u014b\1\0\5\u014b\1\371\3\0"+
    "\3\371\1\0\1\371\2\0\1\371\2\0\4\371\5\0"+
    "\1\371\1\u029a\30\371\1\u029a\7\371\1\0\6\371\3\0"+
    "\3\371\1\0\1\371\2\0\1\371\2\0\4\371\5\0"+
    "\1\371\1\u029b\30\371\1\u029b\7\371\1\0\5\371\1\u0124"+
    "\3\0\3\u0124\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124"+
    "\3\0\1\u029c\1\0\42\u0124\1\0\6\u0124\3\0\3\u0124"+
    "\1\0\1\u0124\2\0\1\u0124\2\0\4\u0124\3\0\1\u029d"+
    "\1\0\42\u0124\1\0\6\u0124\3\0\3\u0124\1\0\1\u0124"+
    "\2\0\1\u0124\2\0\4\u0124\5\0\13\u0124\1\u029e\26\u0124"+
    "\1\0\4\u0124\1\u029e\1\u014b\3\0\3\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\4\u014b\1\u028f\27\u014b"+
    "\1\u028f\5\u014b\1\0\6\u014b\3\0\3\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\5\u014b\1\u029f\34\u014b"+
    "\1\0\5\u014b\1\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\14\371\1\u02a0\21\371\1\u02a0"+
    "\3\371\1\0\6\371\3\0\3\371\1\0\1\371\2\0"+
    "\1\371\2\0\4\371\5\0\14\371\1\u02a1\21\371\1\u02a1"+
    "\3\371\1\0\5\371\13\0\2\u0285\1\0\4\u0285\3\0"+
    "\1\u0285\2\0\27\u0285\1\0\11\u0285\2\0\4\u0285\20\0"+
    "\2\u02a2\53\0\1\u02a2\1\0\1\u0124\3\0\3\u0124\1\0"+
    "\1\u0124\2\0\1\u0124\2\0\4\u0124\5\0\21\u0124\1\u02a3"+
    "\20\u0124\1\0\5\u0124\1\u014b\3\0\3\u014b\1\0\1\u014b"+
    "\2\0\1\u014b\2\0\4\u014b\5\0\26\u014b\1\u02a4\13\u014b"+
    "\1\0\5\u014b\13\0\1\u0285\1\0\1\u029d\1\u02a5\60\0"+
    "\1\u014b\3\0\3\u014b\1\0\1\u014b\2\0\1\u014b\2\0"+
    "\4\u014b\5\0\5\u014b\1\u02a6\34\u014b\1\0\5\u014b\20\0"+
    "\2\u02a7\53\0\1\u02a7\1\0\1\u014b\3\0\3\u014b\1\0"+
    "\1\u014b\2\0\1\u014b\2\0\4\u014b\5\0\14\u014b\1\u02a8"+
    "\21\u014b\1\u02a8\3\u014b\1\0\5\u014b\13\0\1\u0285\1\0"+
    "\1\u029d\61\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32319];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\3\1\1\0\11\1\1\11\6\1\1\11\6\1"+
    "\1\11\5\1\1\0\6\1\1\11\7\1\1\11\3\1"+
    "\1\0\23\1\1\0\17\1\1\0\23\1\1\0\7\1"+
    "\1\0\62\1\1\11\7\1\1\0\14\1\1\0\1\1"+
    "\1\0\4\1\1\11\1\1\1\0\2\1\2\0\1\11"+
    "\2\1\1\0\3\1\1\11\3\1\1\0\1\1\1\0"+
    "\4\1\1\0\7\1\1\0\1\1\1\0\4\1\1\0"+
    "\22\1\1\0\1\1\1\0\4\1\1\0\11\1\1\0"+
    "\1\1\1\0\5\1\1\0\2\1\2\0\14\1\1\0"+
    "\2\1\1\0\4\1\1\0\5\1\1\0\1\1\1\0"+
    "\4\1\1\0\34\1\1\0\1\1\1\11\11\1\2\0"+
    "\1\11\5\1\1\0\1\1\1\0\4\1\1\0\4\1"+
    "\1\11\3\0\4\1\2\0\5\1\1\0\1\1\1\11"+
    "\4\1\1\11\3\0\2\1\2\0\2\1\1\11\3\0"+
    "\3\1\2\0\17\1\1\11\3\0\3\1\2\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\3\0\4\1\2\0"+
    "\4\1\1\0\6\1\1\11\3\0\3\1\2\0\3\1"+
    "\1\11\3\0\3\1\2\0\24\1\1\0\2\1\1\11"+
    "\1\1\1\11\3\0\2\1\2\0\3\1\1\0\2\1"+
    "\1\0\6\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\16\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\5\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\0\13\1\1\0\1\1\1\0\20\1"+
    "\1\11\1\0\26\1\1\0\7\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(COMMAND); yypushback(yylength());
            }
          // fall through
          case 97: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 3:
            { yybegin(YYINITIAL); return BatchTypes.COMMAND_TERMINATOR;
            }
          // fall through
          case 99: break;
          case 4:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 100: break;
          case 5:
            { yybegin(YYINITIAL); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 101: break;
          case 6:
            { yybegin(LABEL); return BatchTypes.LABEL_MARKER;
            }
          // fall through
          case 102: break;
          case 7:
            { yybegin(YYINITIAL); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 103: break;
          case 8:
            { yybegin(YYINITIAL); return BatchTypes.DECORATOR;
            }
          // fall through
          case 104: break;
          case 9:
            { yybegin(ANNOTATION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 105: break;
          case 10:
            { yybegin(ASSOC); return BatchTypes.VARIABLE;
            }
          // fall through
          case 106: break;
          case 11:
            { yybegin(ASSOC); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 107: break;
          case 12:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 108: break;
          case 13:
            { yybegin(ASSOC_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 109: break;
          case 14:
            { yybegin(ASSOC_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 110: break;
          case 15:
            { yybegin(ASSOC_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 16:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 112: break;
          case 17:
            { yybegin(BREAK); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 113: break;
          case 18:
            { yybegin(YYINITIAL); return BatchTypes.FUNC_LABEL;
            }
          // fall through
          case 114: break;
          case 19:
            { yybegin(GOTO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 115: break;
          case 20:
            { yybegin(YYINITIAL); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 116: break;
          case 21:
            { yybegin(COMMAND); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 117: break;
          case 22:
            { yybegin(ECHO_STRING); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 118: break;
          case 23:
            { yybegin(ECHO); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 119: break;
          case 24:
            { yybegin(ECHO_STRING); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 25:
            { yybegin(EXIT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 121: break;
          case 26:
            { yybegin(YYINITIAL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 122: break;
          case 27:
            { yybegin(FOR); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 123: break;
          case 28:
            { yybegin(FOR); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 124: break;
          case 29:
            { yybegin(FOR); yypushback(yylength()); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 125: break;
          case 30:
            { yybegin(FOR_COLLECTION); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 126: break;
          case 31:
            { yybegin(FOR); return BatchTypes.CLOSE_PAREN;
            }
          // fall through
          case 127: break;
          case 32:
            { yybegin(IF_STANDARD); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 128: break;
          case 33:
            { yybegin(IF); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 129: break;
          case 34:
            { yybegin(IF_ERRORLEVEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 35:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.NUMERIC;
            }
          // fall through
          case 131: break;
          case 36:
            { yybegin(IF_EXIST); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 132: break;
          case 37:
            { yybegin(IF_STANDARD); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 133: break;
          case 38:
            { yybegin(IF_STANDARD); return BatchTypes.NUMERIC;
            }
          // fall through
          case 134: break;
          case 39:
            { yybegin(LABEL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 135: break;
          case 40:
            { yybegin(MORE); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 136: break;
          case 41:
            { yybegin(MORE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 137: break;
          case 42:
            { yybegin(REM); return BatchTypes.COMMENT;
            }
          // fall through
          case 138: break;
          case 43:
            { yybegin(SET); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 139: break;
          case 44:
            { yybegin(SET_VALUE); return BatchTypes.ASSIGNMENT;
            }
          // fall through
          case 140: break;
          case 45:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_PARAMETER;
            }
          // fall through
          case 141: break;
          case 46:
            { yybegin(SET_LOCAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 142: break;
          case 47:
            { yybegin(SHIFT); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 143: break;
          case 48:
            { yybegin(SET_VALUE); return BatchTypes.STRING;
            }
          // fall through
          case 144: break;
          case 49:
            { yybegin(SET_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 145: break;
          case 50:
            { yybegin(SET_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 146: break;
          case 51:
            { yybegin(YYINITIAL); return BatchTypes.STRING;
            }
          // fall through
          case 147: break;
          case 52:
            { yybegin(REM); yypushback(yylength());
            }
          // fall through
          case 148: break;
          case 53:
            { yybegin(ANNOTATION); yypushback(yylength() - 1); return BatchTypes.DECORATOR;
            }
          // fall through
          case 149: break;
          case 54:
            { yybegin(BREAK); return BatchTypes.TOGGLE;
            }
          // fall through
          case 150: break;
          case 55:
            { yybegin(COMMAND); return BatchTypes.STRING;
            }
          // fall through
          case 151: break;
          case 56:
            { yybegin(IF); return BatchTypes.IF_COMMAND;
            }
          // fall through
          case 152: break;
          case 57:
            { yybegin(ECHO_STRING); return BatchTypes.STRING;
            }
          // fall through
          case 153: break;
          case 58:
            { yybegin(EXIT); return BatchTypes.EXTENSION;
            }
          // fall through
          case 154: break;
          case 59:
            { yybegin(FOR); return BatchTypes.STRING;
            }
          // fall through
          case 155: break;
          case 60:
            { yybegin(FOR_COLLECTION); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 156: break;
          case 61:
            { yybegin(FOR); return BatchTypes.EXTENSION;
            }
          // fall through
          case 157: break;
          case 62:
            { yybegin(YYINITIAL); return BatchTypes.DO_COMMAND;
            }
          // fall through
          case 158: break;
          case 63:
            { yybegin(FOR); return BatchTypes.IN_COMMAND;
            }
          // fall through
          case 159: break;
          case 64:
            { yybegin(FOR_COLLECTION); return BatchTypes.STRING;
            }
          // fall through
          case 160: break;
          case 65:
            { yybegin(IF_STANDARD); return BatchTypes.STRING;
            }
          // fall through
          case 161: break;
          case 66:
            { yybegin(IF_STANDARD); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 162: break;
          case 67:
            { yybegin(MORE); return BatchTypes.EXTENSION;
            }
          // fall through
          case 163: break;
          case 68:
            { yybegin(MORE); return BatchTypes.DISK_DRIVE;
            }
          // fall through
          case 164: break;
          case 69:
            { yybegin(SET); yypushback(1); return BatchTypes.VARIABLE;
            }
          // fall through
          case 165: break;
          case 70:
            { yybegin(SET); return BatchTypes.EXTENSION;
            }
          // fall through
          case 166: break;
          case 71:
            { yybegin(YYINITIAL); return BatchTypes.EXTENSION;
            }
          // fall through
          case 167: break;
          case 72:
            { yybegin(YYINITIAL); yypushback(yylength() - 1); return BatchTypes.OPEN_PAREN;
            }
          // fall through
          case 168: break;
          case 73:
            { yybegin(REM); yypushback(yylength() - 1); return BatchTypes.REM_DECORATOR;
            }
          // fall through
          case 169: break;
          case 74:
            { yybegin(ASSOC_VALUE); return BatchTypes.NUMERIC;
            }
          // fall through
          case 170: break;
          case 75:
            { yybegin(FOR); return BatchTypes.FOR_COMMAND;
            }
          // fall through
          case 171: break;
          case 76:
            { yybegin(SET); return BatchTypes.SET_COMMAND;
            }
          // fall through
          case 172: break;
          case 77:
            { yybegin(YYINITIAL); return BatchTypes.TOGGLE;
            }
          // fall through
          case 173: break;
          case 78:
            { yybegin(YYINITIAL); yypushback(1); return BatchTypes.TOGGLE;
            }
          // fall through
          case 174: break;
          case 79:
            { yybegin(FOR); return BatchTypes.FOR_VARIABLE;
            }
          // fall through
          case 175: break;
          case 80:
            { yybegin(IF); return BatchTypes.COMPARISON_OPERATOR;
            }
          // fall through
          case 176: break;
          case 81:
            { yybegin(SET); yypushback(2); return BatchTypes.VARIABLE;
            }
          // fall through
          case 177: break;
          case 82:
            { yybegin(ECHO); return BatchTypes.ECHO_ANNOTATION;
            }
          // fall through
          case 178: break;
          case 83:
            { yybegin(CALL); return BatchTypes.CALL_COMMAND;
            }
          // fall through
          case 179: break;
          case 84:
            { yybegin(ECHO); return BatchTypes.ECHO_COMMAND;
            }
          // fall through
          case 180: break;
          case 85:
            { yybegin(YYINITIAL); return BatchTypes.ELSE_COMMAND;
            }
          // fall through
          case 181: break;
          case 86:
            { yybegin(EXIT); return BatchTypes.EXIT_COMMAND;
            }
          // fall through
          case 182: break;
          case 87:
            { yybegin(GOTO); return BatchTypes.GOTO_COMMAND;
            }
          // fall through
          case 183: break;
          case 88:
            { yybegin(MORE); return BatchTypes.MORE_COMMAND;
            }
          // fall through
          case 184: break;
          case 89:
            { yybegin(ASSOC); return BatchTypes.ASSOC_COMMAND;
            }
          // fall through
          case 185: break;
          case 90:
            { yybegin(BREAK); return BatchTypes.BREAK_COMMAND;
            }
          // fall through
          case 186: break;
          case 91:
            { yybegin(SHIFT); return BatchTypes.SHIFT_COMMAND;
            }
          // fall through
          case 187: break;
          case 92:
            { yybegin(FOR); return BatchTypes.PLAINTEXT;
            }
          // fall through
          case 188: break;
          case 93:
            { yybegin(IF_EXIST); return BatchTypes.EXIST_TOKEN;
            }
          // fall through
          case 189: break;
          case 94:
            { yybegin(YYINITIAL); return BatchTypes.ENDLOCAL_COMMAND;
            }
          // fall through
          case 190: break;
          case 95:
            { yybegin(SET_LOCAL); return BatchTypes.SETLOCAL_COMMAND;
            }
          // fall through
          case 191: break;
          case 96:
            { yybegin(IF_ERRORLEVEL); return BatchTypes.ERRORLEVEL_TOKEN;
            }
          // fall through
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
